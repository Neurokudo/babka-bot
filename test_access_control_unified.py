#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –µ–¥–∏–Ω–æ–æ–±—Ä–∞–∑–∏—è —Å–∏—Å—Ç–µ–º—ã –∫–æ–Ω—Ç—Ä–æ–ª—è –¥–æ—Å—Ç—É–ø–∞
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ –≤—Å–µ –ø–ª–∞—Ç–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –∏–º–µ—é—Ç –æ–¥–∏–Ω–∞–∫–æ–≤—É—é –ª–æ–≥–∏–∫—É –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–∞
"""

import os
import sys
import asyncio
from datetime import datetime, timedelta

sys.path.append(os.path.abspath(os.path.join(os.path.dirname(__file__), '..')))

os.environ["DATABASE_URL"] = os.getenv("DATABASE_URL", "sqlite:///./babka_bot.db")

from app.services.billing import can_use_feature
from app.db.db_subscriptions import get_user_plan, create_subscription
from app.services.pricing import get_tariff_by_name, feature_cost_coins
from app.db.queries import db_manager

def test_access_control_unified():
    print("üîç –¢–ï–°–¢ –ï–î–ò–ù–û–û–ë–†–ê–ó–ò–Ø –°–ò–°–¢–ï–ú–´ –ö–û–ù–¢–†–û–õ–Ø –î–û–°–¢–£–ü–ê")
    print("=" * 60)
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –±–µ–∑ –ø–æ–¥–ø–∏—Å–∫–∏
    test_user_no_sub = 5015100200
    print(f"\nüë§ –¢–ï–°–¢ 1: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –±–µ–∑ –ø–æ–¥–ø–∏—Å–∫–∏ (ID: {test_user_no_sub})")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø –∫–æ –≤—Å–µ–º —Ñ—É–Ω–∫—Ü–∏—è–º
    features_to_test = [
        ("transform", "–¢—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π", 1),
        ("video_generation", "–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≤–∏–¥–µ–æ", 20),
        ("tryon", "–í–∏—Ä—Ç—É–∞–ª—å–Ω–∞—è –ø—Ä–∏–º–µ—Ä–æ—á–Ω–∞—è", 3),
        ("json", "JSON –≥–µ–Ω–µ—Ä–∞—Ü–∏—è", 20),
    ]
    
    print("üìã –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–∞:")
    for feature_key, feature_name, expected_cost in features_to_test:
        access_check = can_use_feature(test_user_no_sub, feature_key)
        status = "‚úÖ –î–æ—Å—Ç—É–ø —Ä–∞–∑—Ä–µ—à–µ–Ω" if access_check["can_use"] else f"‚ùå {access_check['message']}"
        print(f"  {feature_name}: {status}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
        if not access_check["can_use"]:
            if access_check["reason"] == "no_subscription":
                assert "–ø–æ–¥–ø–∏—Å–∫" in access_check["message"].lower(), f"–°–æ–æ–±—â–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å '–ø–æ–¥–ø–∏—Å–∫': {access_check['message']}"
            elif access_check["reason"] == "insufficient_coins":
                assert "–º–æ–Ω–µ—Ç" in access_check["message"].lower(), f"–°–æ–æ–±—â–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å '–º–æ–Ω–µ—Ç': {access_check['message']}"
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –ø–æ–¥–ø–∏—Å–∫–æ–π
    test_user_with_sub = 5015100201
    print(f"\nüë§ –¢–ï–°–¢ 2: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å –ø–æ–¥–ø–∏—Å–∫–æ–π (ID: {test_user_with_sub})")
    
    # –°–æ–∑–¥–∞–µ–º –ø–æ–¥–ø–∏—Å–∫—É
    plan_info = get_tariff_by_name("lite")
    if plan_info:
        try:
            create_subscription(
                test_user_with_sub, 
                plan_info["name"], 
                plan_info["coins"], 
                plan_info["price_rub"], 
                plan_info["duration_days"], 
                "test-unified-access"
            )
            print(f"‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ {plan_info['name']} —Å–æ–∑–¥–∞–Ω–∞")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏: {e}")
    
    print("üìã –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–∞:")
    for feature_key, feature_name, expected_cost in features_to_test:
        access_check = can_use_feature(test_user_with_sub, feature_key)
        status = "‚úÖ –î–æ—Å—Ç—É–ø —Ä–∞–∑—Ä–µ—à–µ–Ω" if access_check["can_use"] else f"‚ùå {access_check['message']}"
        print(f"  {feature_name}: {status}")
    
    # –¢–µ—Å—Ç 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ –µ–¥–∏–Ω–æ–æ–±—Ä–∞–∑–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π –æ–± –æ—à–∏–±–∫–∞—Ö
    print(f"\nüß™ –¢–ï–°–¢ 3: –ï–¥–∏–Ω–æ–æ–±—Ä–∞–∑–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π –æ–± –æ—à–∏–±–∫–∞—Ö")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ –≤–æ–∑–≤—Ä–∞—â–∞—é—Ç –æ–¥–∏–Ω–∞–∫–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç
    error_messages = []
    for feature_key, _, _ in features_to_test:
        access_check = can_use_feature(test_user_no_sub, feature_key)
        if not access_check["can_use"]:
            error_messages.append((feature_key, access_check["reason"], access_check["message"]))
    
    print("üìã –ê–Ω–∞–ª–∏–∑ —Å–æ–æ–±—â–µ–Ω–∏–π –æ–± –æ—à–∏–±–∫–∞—Ö:")
    for feature_key, reason, message in error_messages:
        print(f"  {feature_key} ({reason}): {message}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –æ–¥–Ω–æ–π –ø—Ä–∏—á–∏–Ω—ã –ø–æ—Ö–æ–∂–∏
    no_sub_messages = [msg for _, reason, msg in error_messages if reason == "no_subscription"]
    if no_sub_messages:
        print(f"\n‚úÖ –°–æ–æ–±—â–µ–Ω–∏—è 'no_subscription' –µ–¥–∏–Ω–æ–æ–±—Ä–∞–∑–Ω—ã: {len(set(no_sub_messages))} —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∏–∑ {len(no_sub_messages)}")
    
    # –¢–µ—Å—Ç 4: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–Ω–æ–ø–æ–∫ –¥–æ—Å—Ç—É–ø–∞
    print(f"\nüß™ –¢–ï–°–¢ 4: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–Ω–æ–ø–æ–∫ –¥–æ—Å—Ç—É–ø–∞")
    
    # –ò–º–∏—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é get_access_denied_keyboard
    def get_access_denied_keyboard(access_check: dict):
        if access_check["reason"] == "no_subscription":
            return "üí≥ –ö—É–ø–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É, ‚¨ÖÔ∏è –ù–∞–∑–∞–¥"
        elif access_check["reason"] == "insufficient_coins":
            return "üí∞ –î–æ–∫—É–ø–∏—Ç—å –º–æ–Ω–µ—Ç–∫–∏, ‚¨ÖÔ∏è –ù–∞–∑–∞–¥"
        else:
            return "‚¨ÖÔ∏è –ù–∞–∑–∞–¥"
    
    print("üìã –ö–Ω–æ–ø–∫–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –ø—Ä–∏—á–∏–Ω –æ—Ç–∫–∞–∑–∞:")
    for feature_key, _, _ in features_to_test:
        access_check = can_use_feature(test_user_no_sub, feature_key)
        if not access_check["can_use"]:
            buttons = get_access_denied_keyboard(access_check)
            print(f"  {feature_key} ({access_check['reason']}): {buttons}")
    
    print(f"\n‚úÖ –¢–ï–°–¢ –ï–î–ò–ù–û–û–ë–†–ê–ó–ò–Ø –ó–ê–í–ï–†–®–ï–ù!")
    print("üéØ –í—Å–µ –ø–ª–∞—Ç–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –∏–º–µ—é—Ç –µ–¥–∏–Ω–æ–æ–±—Ä–∞–∑–Ω—É—é —Å–∏—Å—Ç–µ–º—É –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–∞")
    print("üéØ –°–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–∞—Ö —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω—ã")
    print("üéØ –ö–Ω–æ–ø–∫–∏ –¥–æ—Å—Ç—É–ø–∞ —É–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω—ã")

if __name__ == "__main__":
    test_access_control_unified()
