#!/usr/bin/env python3
"""
–¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ—Å–ª–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å—Ö–µ–º—ã –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ YooKassa webhook –º–æ–∂–µ—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–≤–∞—Ç—å –ø–æ–¥–ø–∏—Å–∫–∏
"""

import os
import sys
import asyncio
from datetime import datetime, timedelta

sys.path.append(os.path.abspath(os.path.join(os.path.dirname(__file__), '..')))

os.environ["DATABASE_URL"] = os.getenv("DATABASE_URL", "sqlite:///./babka_bot.db")

from app.services.yookassa_service import process_successful_payment, init_yookassa
from app.db.db_subscriptions import get_user_plan, create_subscription
from app.services.pricing import get_tariff_by_name

async def test_subscription_creation():
    print("üß™ –¢–ï–°–¢ –°–û–ó–î–ê–ù–ò–Ø –ü–û–î–ü–ò–°–ö–ò –ü–û–°–õ–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø –°–•–ï–ú–´")
    print("=" * 60)
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º YooKassa
    try:
        init_yookassa()
        print("‚úÖ YooKassa –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ YooKassa: {e}")
        return False
    
    # –¢–µ—Å—Ç–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    test_user_id = 5015100300
    plan_name = "lite"
    plan_info = get_tariff_by_name(plan_name)
    
    if not plan_info:
        print(f"‚ùå –¢–∞—Ä–∏—Ñ '{plan_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return False
    
    print(f"üìä –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {test_user_id}")
    print(f"üìä –¢–∞—Ä–∏—Ñ: {plan_info['title']} - {plan_info['price_rub']} ‚ÇΩ")
    
    # –¢–µ—Å—Ç 1: –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞–ø—Ä—è–º—É—é
    print("\nüß™ –¢–ï–°–¢ 1: –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞–ø—Ä—è–º—É—é")
    try:
        success = create_subscription(
            user_id=test_user_id,
            plan=plan_info["name"],
            coins=plan_info["coins"],
            price_rub=plan_info["price_rub"],
            duration_days=plan_info["duration_days"],
            payment_id="test-direct-123"
        )
        
        if success:
            print("‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ —Å–æ–∑–¥–∞–Ω–∞ –Ω–∞–ø—Ä—è–º—É—é —É—Å–ø–µ—à–Ω–æ")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–¥–ø–∏—Å–∫–∏
            plan_data = get_user_plan(test_user_id)
            print(f"üìä –î–∞–Ω–Ω—ã–µ –ø–æ–¥–ø–∏—Å–∫–∏: {plan_data}")
        else:
            print("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞–ø—Ä—è–º—É—é")
            return False
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏: {e}")
        import traceback
        traceback.print_exc()
        return False
    
    # –¢–µ—Å—Ç 2: –ò–º–∏—Ç–∞—Ü–∏—è YooKassa webhook
    print("\nüß™ –¢–ï–°–¢ 2: –ò–º–∏—Ç–∞—Ü–∏—è YooKassa webhook")
    try:
        webhook_data = {
            "event": "payment.succeeded",
            "payment_id": "test-webhook-456",
            "status": "succeeded",
            "user_id": test_user_id + 1,  # –î—Ä—É–≥–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
            "amount": plan_info["price_rub"],
            "metadata": {
                "user_id": str(test_user_id + 1),
                "plan": plan_info["name"],
                "coins": str(plan_info["coins"]),
                "price": str(plan_info["price_rub"]),
                "type": "plan"
            }
        }
        
        success = await process_successful_payment(webhook_data)
        
        if success:
            print("‚úÖ YooKassa webhook –æ–±—Ä–∞–±–æ—Ç–∞–Ω —É—Å–ø–µ—à–Ω–æ")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–¥–ø–∏—Å–∫–∏
            plan_data = get_user_plan(test_user_id + 1)
            print(f"üìä –î–∞–Ω–Ω—ã–µ –ø–æ–¥–ø–∏—Å–∫–∏: {plan_data}")
        else:
            print("‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ YooKassa webhook")
            return False
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ webhook: {e}")
        import traceback
        traceback.print_exc()
        return False
    
    # –¢–µ—Å—Ç 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    print("\nüß™ –¢–ï–°–¢ 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö")
    try:
        from app.db.db_subscriptions import db_conn
        
        with db_conn() as conn:
            cur = conn.cursor()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∞–±–ª–∏—Ü—É users
            cur.execute("""
                SELECT column_name, data_type 
                FROM information_schema.columns 
                WHERE table_name = 'users' 
                ORDER BY ordinal_position
            """)
            users_columns = cur.fetchall()
            print(f"üìä –ö–æ–ª–æ–Ω–∫–∏ –≤ —Ç–∞–±–ª–∏—Ü–µ users: {len(users_columns)}")
            for col in users_columns:
                print(f"  - {col[0]} ({col[1]})")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∞–±–ª–∏—Ü—É subscriptions
            cur.execute("""
                SELECT column_name, data_type 
                FROM information_schema.columns 
                WHERE table_name = 'subscriptions' 
                ORDER BY ordinal_position
            """)
            subscriptions_columns = cur.fetchall()
            print(f"üìä –ö–æ–ª–æ–Ω–∫–∏ –≤ —Ç–∞–±–ª–∏—Ü–µ subscriptions: {len(subscriptions_columns)}")
            for col in subscriptions_columns:
                print(f"  - {col[0]} ({col[1]})")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π
            cur.execute("SELECT COUNT(*) FROM users")
            users_count = cur.fetchone()[0]
            print(f"üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {users_count}")
            
            cur.execute("SELECT COUNT(*) FROM subscriptions")
            subscriptions_count = cur.fetchone()[0]
            print(f"üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–¥–ø–∏—Å–æ–∫: {subscriptions_count}")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ë–î: {e}")
        return False
    
    print("\n‚úÖ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–®–õ–ò –£–°–ü–ï–®–ù–û!")
    print("üéØ –°—Ö–µ–º–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
    print("üéØ YooKassa webhook —Ä–∞–±–æ—Ç–∞–µ—Ç –±–µ–∑ –æ—à–∏–±–æ–∫")
    print("üéØ –ü–æ–¥–ø–∏—Å–∫–∏ —Å–æ–∑–¥–∞—é—Ç—Å—è —É—Å–ø–µ—à–Ω–æ")
    print("üéØ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–æ–ª–∂–Ω—ã –ø—Ä–∏—Ö–æ–¥–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º")
    
    return True

if __name__ == "__main__":
    success = asyncio.run(test_subscription_creation())
    if success:
        print("\nüöÄ –ì–û–¢–û–í–û –ö –ü–†–û–î–ê–ö–®–ï–ù–£!")
        print("–¢–µ–ø–µ—Ä—å –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –∫—É–ø–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É —á–µ—Ä–µ–∑ –±–æ—Ç–∞ - —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –ø—Ä–∏–π—Ç–∏!")
    else:
        print("\n‚ùå –¢–µ—Å—Ç—ã –Ω–µ –ø—Ä–æ—à–ª–∏ - –Ω—É–∂–Ω–æ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ")
        sys.exit(1)
