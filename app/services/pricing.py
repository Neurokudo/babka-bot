from decimal import Decimal
from typing import List, Dict, Any
from app.config.pricing import TARIFFS, FEATURE_COSTS, TOPUP_PACKS, COGS_USD

def coins_for_tariff(tariff_name: str) -> int:
    return TARIFFS[tariff_name].coins

def price_rub_for_tariff(tariff_name: str) -> int:
    return TARIFFS[tariff_name].price_rub

def feature_cost_coins(feature_key: str) -> int:
    return FEATURE_COSTS.get(feature_key, 1)

def topup_price_rub(coins: int) -> int:
    for pack in TOPUP_PACKS:
        if pack.coins == coins:
            return pack.price_rub
    return 0

def cogs_usd(feature_key: str) -> Decimal:
    return Decimal(str(COGS_USD.get(feature_key, 0.01)))

def get_available_tariffs() -> List[Dict[str, Any]]:
    """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–∞—Ä–∏—Ñ–æ–≤"""
    return [
        {
            "name": "lite",
            "title": "–õ–∞–π—Ç",
            "price_rub": TARIFFS["lite"].price_rub,
            "coins": TARIFFS["lite"].coins,
            "duration_days": TARIFFS["lite"].duration_days,
            "icon": "‚ú®"
        },
        {
            "name": "standard", 
            "title": "–°—Ç–∞–Ω–¥–∞—Ä—Ç",
            "price_rub": TARIFFS["standard"].price_rub,
            "coins": TARIFFS["standard"].coins,
            "duration_days": TARIFFS["standard"].duration_days,
            "icon": "‚≠ê"
        },
        {
            "name": "pro",
            "title": "–ü—Ä–æ", 
            "price_rub": TARIFFS["pro"].price_rub,
            "coins": TARIFFS["pro"].coins,
            "duration_days": TARIFFS["pro"].duration_days,
            "icon": "üíé"
        }
    ]

def get_tariff_by_name(tariff_name: str) -> Dict[str, Any]:
    """–ü–æ–ª—É—á–∏—Ç—å —Ç–∞—Ä–∏—Ñ –ø–æ –∏–º–µ–Ω–∏"""
    tariffs_list = get_available_tariffs()
    for tariff in tariffs_list:
        if tariff["name"] == tariff_name:
            return tariff
    return None

def get_available_topup_packs() -> List[Dict[str, Any]]:
    """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø–∞–∫–µ—Ç–æ–≤ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è"""
    return [
        {
            "coins": pack.coins,
            "price_rub": pack.price_rub,
            "rate_rub_per_coin": round(pack.price_rub / pack.coins, 2)
        }
        for pack in TOPUP_PACKS
    ]

def calculate_coin_rate_rub(tariff_name: str) -> float:
    """–†–∞—Å—Å—á–∏—Ç–∞—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å –º–æ–Ω–µ—Ç—ã –≤ —Ä—É–±–ª—è—Ö –¥–ª—è —Ç–∞—Ä–∏—Ñ–∞"""
    tariff = TARIFFS[tariff_name]
    return round(tariff.price_rub / tariff.coins, 2)

def calculate_coin_rate_rub_topup(coins: int) -> float:
    """–†–∞—Å—Å—á–∏—Ç–∞—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å –º–æ–Ω–µ—Ç—ã –≤ —Ä—É–±–ª—è—Ö –¥–ª—è –ø–∞–∫–µ—Ç–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è"""
    for pack in TOPUP_PACKS:
        if pack.coins == coins:
            return round(pack.price_rub / pack.coins, 2)
    return 0

def format_plans_list() -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ —Ç–∞—Ä–∏—Ñ–æ–≤ –¥–ª—è UI"""
    plans = []
    for tariff_data in get_available_tariffs():
        plans.append(
            f"{tariff_data['icon']} {tariff_data['title']} ‚Äî {tariff_data['price_rub']} ‚ÇΩ\n"
            f"üéü {tariff_data['coins']} –º–æ–Ω–µ—Ç"
        )
    return "\n\n".join(plans)

def format_feature_costs() -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ —Ñ—É–Ω–∫—Ü–∏–π"""
    costs = []
    
    # –í–∏–¥–µ–æ
    costs.append("üé¨ –í–∏–¥–µ–æ (8 —Å–µ–∫)")
    costs.append(f"üîä –°–æ –∑–≤—É–∫–æ–º ‚Äî {FEATURE_COSTS['video_8s_audio']} –º–æ–Ω–µ—Ç")
    costs.append(f"üîá –ë–µ–∑ –∑–≤—É–∫–∞ ‚Äî {FEATURE_COSTS['video_8s_mute']} –º–æ–Ω–µ—Ç")
    
    # –§–æ—Ç–æ –∏ –ø—Ä–∏–º–µ—Ä–∫–∞
    costs.append("")
    costs.append(f"üì∏ –§–æ—Ç–æ-–∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã ‚Äî {FEATURE_COSTS['image_basic']} –º–æ–Ω–µ—Ç–∞")
    costs.append(f"üëó –ü—Ä–∏–º–µ—Ä–∫–∞ –æ–¥–µ–∂–¥—ã ‚Äî {FEATURE_COSTS['virtual_tryon']} –º–æ–Ω–µ—Ç—ã")
    
    return "\n".join(costs)

def format_topup_packs() -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –ø–∞–∫–µ—Ç–æ–≤ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è"""
    packs = ["‚ûï –ü–æ–ø–æ–ª–Ω–∏—Ç—å –º–æ–Ω–µ—Ç—ã"]
    for pack in TOPUP_PACKS:
        rate = round(pack.price_rub / pack.coins, 2)
        packs.append(f"{pack.coins} ‚Äî {pack.price_rub} ‚ÇΩ")
    packs.append("")
    packs.append("–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: ¬´–î–æ–∫—É–ø–∫–∞ –º–æ–Ω–µ—Ç –Ω–µ –ø—Ä–æ–¥–ª–µ–≤–∞–µ—Ç –ø–æ–¥–ø–∏—Å–∫—É¬ª.")
    return "\n".join(packs)

def pricing_text() -> str:
    """–ü–æ–ª–Ω—ã–π —Ç–µ–∫—Å—Ç —Å —Ç–∞—Ä–∏—Ñ–∞–º–∏ –∏ —Å—Ç–æ–∏–º–æ—Å—Ç—å—é"""
    text = "üí∞ –¢–∞—Ä–∏—Ñ—ã (30 –¥–Ω–µ–π)\n\n"
    text += format_plans_list()
    text += "\n\n"
    text += format_feature_costs()
    text += "\n\n"
    text += format_topup_packs()
    return text
