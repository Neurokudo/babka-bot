from decimal import Decimal
from typing import Dict
from app.config.pricing import TARIFFS, FEATURE_COSTS, TOPUP_PACKS_RUB, COGS_USD, Tariff

def coins_for_tariff(tariff_name: str) -> int:
    """–ü–æ–ª—É—á–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–æ–Ω–µ—Ç –¥–ª—è —Ç–∞—Ä–∏—Ñ–∞"""
    return TARIFFS[tariff_name].coins

def price_rub_for_tariff(tariff_name: str) -> int:
    """–ü–æ–ª—É—á–∏—Ç—å —Ü–µ–Ω—É –≤ —Ä—É–±–ª—è—Ö –¥–ª—è —Ç–∞—Ä–∏—Ñ–∞"""
    return TARIFFS[tariff_name].price_rub

def feature_cost_coins(feature_key: str) -> int:
    """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å —Ñ—É–Ω–∫—Ü–∏–∏ –≤ –º–æ–Ω–µ—Ç–∞—Ö"""
    return FEATURE_COSTS[feature_key]

def topup_price_rub(coins: int) -> int:
    """–ü–æ–ª—É—á–∏—Ç—å —Ü–µ–Ω—É –≤ —Ä—É–±–ª—è—Ö –¥–ª—è –ø–∞–∫–µ—Ç–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è"""
    return TOPUP_PACKS_RUB[coins]

def cogs_usd(feature_key: str) -> Decimal:
    """–ü–æ–ª—É—á–∏—Ç—å —Å–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å —Ñ—É–Ω–∫—Ü–∏–∏ –≤ –¥–æ–ª–ª–∞—Ä–∞—Ö"""
    return Decimal(str(COGS_USD[feature_key]))

def get_available_tariffs() -> Dict[str, Tariff]:
    """–ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–∞—Ä–∏—Ñ—ã"""
    return TARIFFS

def get_available_topup_packs() -> Dict[int, int]:
    """–ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –ø–∞–∫–µ—Ç—ã –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è"""
    return TOPUP_PACKS_RUB

def get_available_features() -> Dict[str, int]:
    """–ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –∏ –∏—Ö —Å—Ç–æ–∏–º–æ—Å—Ç—å"""
    return FEATURE_COSTS

def calculate_coin_rate_rub(tariff_name: str) -> float:
    """–†–∞—Å—Å—á–∏—Ç–∞—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å 1 –º–æ–Ω–µ—Ç—ã –≤ —Ä—É–±–ª—è—Ö –¥–ª—è —Ç–∞—Ä–∏—Ñ–∞"""
    tariff = TARIFFS[tariff_name]
    return tariff.price_rub / tariff.coins

def calculate_coin_rate_rub_topup(coins: int) -> float:
    """–†–∞—Å—Å—á–∏—Ç–∞—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å 1 –º–æ–Ω–µ—Ç—ã –≤ —Ä—É–±–ª—è—Ö –¥–ª—è –ø–∞–∫–µ—Ç–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è"""
    return TOPUP_PACKS_RUB[coins] / coins

def format_plans_list() -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Ç–∞—Ä–∏—Ñ–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    lines = ["üí∞ <b>–¢–∞—Ä–∏—Ñ—ã (30 –¥–Ω–µ–π)</b>\n"]
    tariffs = get_available_tariffs()
    for key, tariff in tariffs.items():
        rate = calculate_coin_rate_rub(key)
        line_parts = [
            f"üéü {tariff.coins} –º–æ–Ω–µ—Ç",
            f"{tariff.price_rub:,} ‚ÇΩ",
            f"~{rate:.1f} ‚ÇΩ/–º–æ–Ω–µ—Ç–∞"
        ]
        lines.append(" ¬∑ ".join(line_parts))
    
    lines.append("\nüí° –î–æ–∫—É–ø–∫–∞ –º–æ–Ω–µ—Ç –Ω–µ –ø—Ä–æ–¥–ª–µ–≤–∞–µ—Ç –ø–æ–¥–ø–∏—Å–∫—É.")
    return "\n".join(lines)

def format_feature_costs() -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ —Ñ—É–Ω–∫—Ü–∏–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    lines = ["üé¨ <b>–í–∏–¥–µ–æ (8 —Å–µ–∫)</b>"]
    lines.append("üîä –°–æ –∑–≤—É–∫–æ–º ‚Äî 20 –º–æ–Ω–µ—Ç")
    lines.append("üîá –ë–µ–∑ –∑–≤—É–∫–∞ ‚Äî 16 –º–æ–Ω–µ—Ç")
    lines.append("")
    lines.append("üì∏ <b>–§–æ—Ç–æ-–∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã</b> ‚Äî 1 –º–æ–Ω–µ—Ç–∞")
    lines.append("üëó <b>–ü—Ä–∏–º–µ—Ä–∫–∞ –æ–¥–µ–∂–¥—ã</b> ‚Äî 3 –º–æ–Ω–µ—Ç—ã")
    return "\n".join(lines)

def pricing_text() -> str:
    """–ü–æ–ª–Ω—ã–π —Ç–µ–∫—Å—Ç —Å —Ç–∞—Ä–∏—Ñ–∞–º–∏ –∏ —Å—Ç–æ–∏–º–æ—Å—Ç—å—é —Ñ—É–Ω–∫—Ü–∏–π"""
    plans_text = format_plans_list()
    costs_text = format_feature_costs()
    return f"{plans_text}\n\n{costs_text}"
