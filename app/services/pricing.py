from decimal import Decimal
from typing import List, Dict, Any
from app.config.pricing import TARIFFS, FEATURE_COSTS, TOPUP_PACKS, SPECIAL_PACKS, COGS_USD

def coins_for_tariff(tariff_name: str) -> int:
    return TARIFFS[tariff_name].coins

def price_rub_for_tariff(tariff_name: str) -> int:
    return TARIFFS[tariff_name].price_rub

def feature_cost_coins(feature_key: str) -> int:
    return FEATURE_COSTS.get(feature_key, 1)

def topup_price_rub(coins: int) -> int:
    for pack in TOPUP_PACKS:
        if pack.coins == coins:
            return pack.price_rub
    return 0

def cogs_usd(feature_key: str) -> Decimal:
    return Decimal(str(COGS_USD.get(feature_key, 0.01)))

def get_available_tariffs() -> List[Dict[str, Any]]:
    """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–∞—Ä–∏—Ñ–æ–≤"""
    return [
        {
            "name": "lite",
            "title": "–õ–∞–π—Ç",
            "price_rub": TARIFFS["lite"].price_rub,
            "coins": TARIFFS["lite"].coins,
            "duration_days": TARIFFS["lite"].duration_days,
            "icon": "‚ú®"
        },
        {
            "name": "standard", 
            "title": "–°—Ç–∞–Ω–¥–∞—Ä—Ç",
            "price_rub": TARIFFS["standard"].price_rub,
            "coins": TARIFFS["standard"].coins,
            "duration_days": TARIFFS["standard"].duration_days,
            "icon": "‚≠ê"
        },
        {
            "name": "pro",
            "title": "–ü—Ä–æ", 
            "price_rub": TARIFFS["pro"].price_rub,
            "coins": TARIFFS["pro"].coins,
            "duration_days": TARIFFS["pro"].duration_days,
            "icon": "üíé"
        }
    ]

def get_tariff_by_name(tariff_name: str) -> Dict[str, Any]:
    """–ü–æ–ª—É—á–∏—Ç—å —Ç–∞—Ä–∏—Ñ –ø–æ –∏–º–µ–Ω–∏"""
    tariffs_list = get_available_tariffs()
    for tariff in tariffs_list:
        if tariff["name"] == tariff_name:
            return tariff
    return None

def get_available_topup_packs() -> List[Dict[str, Any]]:
    """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø–∞–∫–µ—Ç–æ–≤ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è"""
    return [
        {
            "coins": pack.coins,
            "price_rub": pack.price_rub,
            "rate_rub_per_coin": round(pack.price_rub / pack.coins, 2)
        }
        for pack in TOPUP_PACKS
    ]

def calculate_coin_rate_rub(tariff_name: str) -> float:
    """–†–∞—Å—Å—á–∏—Ç–∞—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å –º–æ–Ω–µ—Ç—ã –≤ —Ä—É–±–ª—è—Ö –¥–ª—è —Ç–∞—Ä–∏—Ñ–∞"""
    tariff = TARIFFS[tariff_name]
    return round(tariff.price_rub / tariff.coins, 2)

def calculate_coin_rate_rub_topup(coins: int) -> float:
    """–†–∞—Å—Å—á–∏—Ç–∞—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å –º–æ–Ω–µ—Ç—ã –≤ —Ä—É–±–ª—è—Ö –¥–ª—è –ø–∞–∫–µ—Ç–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è"""
    for pack in TOPUP_PACKS:
        if pack.coins == coins:
            return round(pack.price_rub / pack.coins, 2)
    return 0

def format_plans_list() -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ —Ç–∞—Ä–∏—Ñ–æ–≤ –¥–ª—è UI"""
    try:
        plans = []
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        plans.append("üí∞ <b>–¢–∞—Ä–∏—Ñ—ã –Ω–∞ 30 –¥–Ω–µ–π</b>\n")
        
        for tariff_data in get_available_tariffs():
            plans.append(f"{tariff_data['icon']} {tariff_data['title']} ‚Äî {tariff_data['price_rub']:,} ‚ÇΩ ‚Üí {tariff_data['coins']} –º–æ–Ω–µ—Ç")
            plans.append(f"–ß—Ç–æ —ç—Ç–æ –¥–∞—ë—Ç:")
            examples = calculate_tariff_examples(tariff_data['coins'])
            plans.append(examples)
            plans.append("")  # –ü—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ –º–µ–∂–¥—É —Ç–∞—Ä–∏—Ñ–∞–º–∏
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ —Ñ—É–Ω–∫—Ü–∏–π
        plans.append(format_feature_costs())
        plans.append("")
        plans.append("üí° –ü–æ–¥—Å–∫–∞–∑–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é: –±–µ–∑ –∑–≤—É–∫–∞ ‚Äî –¥–µ—à–µ–≤–ª–µ, —Ä–æ–ª–∏–∫–æ–≤ –≤—ã–π–¥–µ—Ç –±–æ–ª—å—à–µ. –ó–≤—É–∫ –º–æ–∂–Ω–æ –≤–∫–ª—é—á–∏—Ç—å –ø–æ –∂–µ–ª–∞–Ω–∏—é.\n")
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ä–∞–∑–æ–≤—ã–π –ø–∞–∫–µ—Ç
        plans.append(format_special_packs())
        
        return "\n".join(plans)
    except Exception as e:
        import logging
        log = logging.getLogger(__name__)
        log.error("Failed to build plans list: %s", e, exc_info=True)
        return "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ç–∞—Ä–∏—Ñ–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑."

def calculate_tariff_examples(coins: int) -> str:
    """–†–∞—Å—Å—á–∏—Ç–∞—Ç—å –ø—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –¥–ª—è —Ç–∞—Ä–∏—Ñ–∞"""
    examples = []
    
    # –í–∏–¥–µ–æ 6 —Å–µ–∫ –±–µ–∑ –∑–≤—É–∫–∞
    video_6s_count = coins // FEATURE_COSTS["video_6s_mute"]
    if video_6s_count > 0:
        examples.append(f"* –¥–æ {video_6s_count} –≤–∏–¥–µ–æ (6 —Å–µ–∫, –±–µ–∑ –∑–≤—É–∫–∞) –∏–ª–∏")
    
    # –í–∏–¥–µ–æ 8 —Å–µ–∫ –±–µ–∑ –∑–≤—É–∫–∞
    video_8s_mute_count = coins // FEATURE_COSTS["video_8s_mute"]
    if video_8s_mute_count > 0:
        examples.append(f"* –¥–æ {video_8s_mute_count} –≤–∏–¥–µ–æ (8 —Å–µ–∫, –±–µ–∑ –∑–≤—É–∫–∞) –∏–ª–∏")
    
    # –í–∏–¥–µ–æ 8 —Å–µ–∫ —Å–æ –∑–≤—É–∫–æ–º
    video_8s_audio_count = coins // FEATURE_COSTS["video_8s_audio"]
    if video_8s_audio_count > 0:
        examples.append(f"* –¥–æ {video_8s_audio_count} –≤–∏–¥–µ–æ (8 —Å–µ–∫, —Å–æ –∑–≤—É–∫–æ–º) –∏–ª–∏")
    
    # –§–æ—Ç–æ-–æ–ø–µ—Ä–∞—Ü–∏–∏
    photo_count = coins // FEATURE_COSTS["image_basic"]
    if photo_count > 0:
        examples.append(f"* –¥–æ {photo_count} —Ñ–æ—Ç–æ-–æ–ø–µ—Ä–∞—Ü–∏–π")
    
    return "\n".join(examples)

def format_feature_costs() -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ —Ñ—É–Ω–∫—Ü–∏–π"""
    costs = []
    
    # –ó–∞–≥–æ–ª–æ–≤–æ–∫
    costs.append("üí° <b>–ö–∞–∫ —Å–ø–∏—Å—ã–≤–∞—é—Ç—Å—è –º–æ–Ω–µ—Ç–∫–∏:</b>")
    
    # –í–∏–¥–µ–æ
    costs.append("üé¨ –í–∏–¥–µ–æ Veo 3:")
    costs.append("‚Ä¢ 6 —Å–µ–∫, –±–µ–∑ –∑–≤—É–∫–∞ ‚Äî 14 –º–æ–Ω–µ—Ç–æ–∫")
    costs.append("‚Ä¢ 8 —Å–µ–∫, –±–µ–∑ –∑–≤—É–∫–∞ ‚Äî 18 –º–æ–Ω–µ—Ç–æ–∫")
    costs.append("‚Ä¢ 8 —Å–µ–∫, —Å–æ –∑–≤—É–∫–æ–º ‚Äî 26 –º–æ–Ω–µ—Ç–æ–∫")
    
    # –§–æ—Ç–æ –∏ –ø—Ä–∏–º–µ—Ä–∫–∞
    costs.append("üì∏ –§–æ—Ç–æ-–∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã ‚Äî 1 –º–æ–Ω–µ—Ç–∫–∞ –∑–∞ –¥–µ–π—Å—Ç–≤–∏–µ")
    costs.append("üëó –í–∏—Ä—Ç—É–∞–ª—å–Ω–∞—è –ø—Ä–∏–º–µ—Ä–æ—á–Ω–∞—è (Try-On) ‚Äî 3 –º–æ–Ω–µ—Ç–∫–∏ –∑–∞ 1 –æ–±—Ä–∞–∑ (1 —Ä–µ–∑—É–ª—å—Ç–∞—Ç)")
    
    return "\n".join(costs)

def format_topup_packs() -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –ø–∞–∫–µ—Ç–æ–≤ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è"""
    packs = []
    for pack in TOPUP_PACKS:
        packs.append(f"{pack.coins} –º–æ–Ω–µ—Ç–æ–∫ ‚Äî {pack.price_rub} ‚ÇΩ")
    return "\n".join(packs)

def get_available_special_packs() -> List[Dict[str, Any]]:
    """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ä–∞–∑–æ–≤—ã—Ö –ø–∞–∫–µ—Ç–æ–≤"""
    return [
        {
            "name": pack.name,
            "description": pack.description,
            "price_rub": pack.price_rub,
            "items": pack.items,
            "duration_days": pack.duration_days,
            "one_time_only": pack.one_time_only
        }
        for pack in SPECIAL_PACKS
    ]

def format_special_packs() -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ —Ä–∞–∑–æ–≤—ã—Ö –ø–∞–∫–µ—Ç–æ–≤"""
    packs = []
    packs.append("üéÅ <b>–†–∞–∑–æ–≤—ã–π –≤—ã–≥–æ–¥–Ω—ã–π –ø–∞–∫–µ—Ç</b>")
    
    for pack in SPECIAL_PACKS:
        packs.append(f"{pack.description} ‚Äî {pack.price_rub} ‚ÇΩ")
        
        # –î–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ
        items_desc = []
        for item, count in pack.items.items():
            if item == "video_8s_mute":
                items_desc.append(f"* {count} –≤–∏–¥–µ–æ Veo 3 (8 —Å–µ–∫, –±–µ–∑ –∑–≤—É–∫–∞) –≤ –ø–æ–¥–∞—Ä–æ–∫")
            elif item == "virtual_tryon":
                items_desc.append(f"* {count} –∑–∞–ø—É—Å–∫–æ–≤ –ü–µ—Ä–µ–æ–¥–µ–≤–∞–Ω–∏–π (–ø–æ 1 —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É)")
        
        if items_desc:
            packs.append("\n".join(items_desc))
        
        packs.append(f"* –ê–∫—Ç–∏–≤–∞—Ü–∏—è: {pack.duration_days} –¥–Ω–µ–π")
        if pack.one_time_only:
            packs.append("* –ü–æ–∫—É–ø–∫–∞: 1 —Ä–∞–∑ –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
    
    return "\n".join(packs)

def pricing_text() -> str:
    """–ü–æ–ª–Ω—ã–π —Ç–µ–∫—Å—Ç —Å —Ç–∞—Ä–∏—Ñ–∞–º–∏ –∏ —Å—Ç–æ–∏–º–æ—Å—Ç—å—é"""
    text = "üí∞ –¢–∞—Ä–∏—Ñ—ã –Ω–∞ 30 –¥–Ω–µ–π\n\n"
    
    # –î–æ–±–∞–≤–ª—è–µ–º –¥–µ—Ç–∞–ª—å–Ω—ã–µ –æ–ø–∏—Å–∞–Ω–∏—è —Ç–∞—Ä–∏—Ñ–æ–≤
    for tariff_data in get_available_tariffs():
        text += f"{tariff_data['icon']} {tariff_data['title']} ‚Äî {tariff_data['price_rub']} ‚ÇΩ ‚Üí {tariff_data['coins']} –º–æ–Ω–µ—Ç–æ–∫\n"
        text += f"–ß—Ç–æ —ç—Ç–æ –¥–∞—ë—Ç:\n"
        text += calculate_tariff_examples(tariff_data['coins'])
        text += "\n\n"
    
    text += format_feature_costs()
    text += "\n\n"
    text += "üí° –ü–æ–¥—Å–∫–∞–∑–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é: –±–µ–∑ –∑–≤—É–∫–∞ ‚Äî –¥–µ—à–µ–≤–ª–µ, —Ä–æ–ª–∏–∫–æ–≤ –≤—ã–π–¥–µ—Ç –±–æ–ª—å—à–µ. –ó–≤—É–∫ –º–æ–∂–Ω–æ –≤–∫–ª—é—á–∏—Ç—å –ø–æ –∂–µ–ª–∞–Ω–∏—é.\n\n"
    text += format_special_packs()
    text += "\n\n"
    text += "‚ûï –ü–∞–∫–µ—Ç—ã –º–æ–Ω–µ—Ç–æ–∫:\n"
    text += format_topup_packs()
    text += "\n\nüí° –î–æ–∫—É–ø–∫–∞ –º–æ–Ω–µ—Ç–æ–∫ –Ω–µ –ø—Ä–æ–¥–ª–µ–≤–∞–µ—Ç –ø–æ–¥–ø–∏—Å–∫—É."
    return text
