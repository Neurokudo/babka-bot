"""
–ú–æ–¥—É–ª—å –Ω–∞–±–ª—é–¥–µ–Ω–∏—è –∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –≤—Å–µ—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
–§–∏–∫—Å–∏—Ä—É–µ—Ç –∫–∞–∂–¥–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –≤ –∂—É—Ä–Ω–∞–ª–µ billing_audit
"""

from app.db import db_billing_audit
import datetime
import logging
from typing import List, Dict, Any, Optional

log = logging.getLogger("babka-bot")

def log(user_id: int, delta: int, feature: str, reason: str, old_balance: int, new_balance: int) -> bool:
    """
    –ó–∞–ø–∏—Å–∞—Ç—å –æ–ø–µ—Ä–∞—Ü–∏—é –≤ –∂—É—Ä–Ω–∞–ª –∞—É–¥–∏—Ç–∞
    
    Args:
        user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        delta: –ò–∑–º–µ–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ (–ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è, –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–µ –¥–ª—è —Å–ø–∏—Å–∞–Ω–∏—è)
        feature: –¢–∏–ø —Ñ—É–Ω–∫—Ü–∏–∏/–æ–ø–µ—Ä–∞—Ü–∏–∏
        reason: –ü—Ä–∏—á–∏–Ω–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏
        old_balance: –ë–∞–ª–∞–Ω—Å –¥–æ –æ–ø–µ—Ä–∞—Ü–∏–∏
        new_balance: –ë–∞–ª–∞–Ω—Å –ø–æ—Å–ª–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
    
    Returns:
        True –µ—Å–ª–∏ –∑–∞–ø–∏—Å—å —É—Å–ø–µ—à–Ω–∞, False –∏–Ω–∞—á–µ
    """
    try:
        record = {
            "user_id": user_id,
            "delta": delta,
            "feature": feature,
            "reason": reason,
            "old_balance": old_balance,
            "new_balance": new_balance,
            "timestamp": datetime.datetime.now()
        }
        
        success = db_billing_audit.insert_record(record)
        
        if success:
            log.info(f"[AUDIT] {user_id} | Œî={delta:+d} | {feature or 'unknown'} | {old_balance}‚Üí{new_balance} | {reason}")
        else:
            log.error(f"[AUDIT FAILED] {user_id} | Œî={delta:+d} | {feature or 'unknown'}")
        
        return success
        
    except Exception as e:
        log.error(f"Failed to log billing operation for user {user_id}: {e}")
        return False

def get_user_recent_transactions(user_id: int, limit: int = 10) -> List[Dict[str, Any]]:
    """
    –ü–æ–ª—É—á–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    
    Args:
        user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        limit: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π
    
    Returns:
        –°–ø–∏—Å–æ–∫ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
    """
    try:
        return db_billing_audit.get_user_history(user_id, limit)
    except Exception as e:
        log.error(f"Failed to get user transactions for {user_id}: {e}")
        return []

def get_daily_report(date: Optional[datetime.date] = None) -> Dict[str, Any]:
    """
    –ü–æ–ª—É—á–∏—Ç—å –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –æ—Ç—á–µ—Ç –ø–æ –æ–ø–µ—Ä–∞—Ü–∏—è–º
    
    Args:
        date: –î–∞—Ç–∞ –æ—Ç—á–µ—Ç–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é —Å–µ–≥–æ–¥–Ω—è)
    
    Returns:
        –°–ª–æ–≤–∞—Ä—å —Å –æ—Ç—á–µ—Ç–æ–º
    """
    try:
        if date is None:
            date = datetime.date.today()
        
        return db_billing_audit.get_daily_report(date)
    except Exception as e:
        log.error(f"Failed to get daily report for {date}: {e}")
        return {
            "date": date,
            "total_spent": 0,
            "total_earned": 0,
            "unique_users": 0,
            "top_features": []
        }

def get_weekly_report(week_start: Optional[datetime.date] = None) -> Dict[str, Any]:
    """
    –ü–æ–ª—É—á–∏—Ç—å –Ω–µ–¥–µ–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç –ø–æ –æ–ø–µ—Ä–∞—Ü–∏—è–º
    
    Args:
        week_start: –ù–∞—á–∞–ª–æ –Ω–µ–¥–µ–ª–∏ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –Ω–∞—á–∞–ª–æ —Ç–µ–∫—É—â–µ–π –Ω–µ–¥–µ–ª–∏)
    
    Returns:
        –°–ª–æ–≤–∞—Ä—å —Å –æ—Ç—á–µ—Ç–æ–º
    """
    try:
        if week_start is None:
            today = datetime.date.today()
            week_start = today - datetime.timedelta(days=today.weekday())
        
        week_end = week_start + datetime.timedelta(days=6)
        
        return db_billing_audit.get_period_report(week_start, week_end)
    except Exception as e:
        log.error(f"Failed to get weekly report for {week_start}: {e}")
        return {
            "period_start": week_start,
            "period_end": week_end,
            "total_spent": 0,
            "total_earned": 0,
            "unique_users": 0,
            "top_features": []
        }

def get_monthly_report(month: Optional[int] = None, year: Optional[int] = None) -> Dict[str, Any]:
    """
    –ü–æ–ª—É—á–∏—Ç—å –º–µ—Å—è—á–Ω—ã–π –æ—Ç—á–µ—Ç –ø–æ –æ–ø–µ—Ä–∞—Ü–∏—è–º
    
    Args:
        month: –ú–µ—Å—è—Ü (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é —Ç–µ–∫—É—â–∏–π)
        year: –ì–æ–¥ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é —Ç–µ–∫—É—â–∏–π)
    
    Returns:
        –°–ª–æ–≤–∞—Ä—å —Å –æ—Ç—á–µ—Ç–æ–º
    """
    try:
        if month is None or year is None:
            now = datetime.date.today()
            month = month or now.month
            year = year or now.year
        
        month_start = datetime.date(year, month, 1)
        if month == 12:
            month_end = datetime.date(year + 1, 1, 1) - datetime.timedelta(days=1)
        else:
            month_end = datetime.date(year, month + 1, 1) - datetime.timedelta(days=1)
        
        return db_billing_audit.get_period_report(month_start, month_end)
    except Exception as e:
        log.error(f"Failed to get monthly report for {year}-{month:02d}: {e}")
        return {
            "period_start": month_start,
            "period_end": month_end,
            "total_spent": 0,
            "total_earned": 0,
            "unique_users": 0,
            "top_features": []
        }

def get_feature_statistics(feature: str, days: int = 30) -> Dict[str, Any]:
    """
    –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏
    
    Args:
        feature: –ù–∞–∑–≤–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏
        days: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
    
    Returns:
        –°–ª–æ–≤–∞—Ä—å —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
    """
    try:
        end_date = datetime.date.today()
        start_date = end_date - datetime.timedelta(days=days)
        
        return db_billing_audit.get_feature_statistics(feature, start_date, end_date)
    except Exception as e:
        log.error(f"Failed to get feature statistics for {feature}: {e}")
        return {
            "feature": feature,
            "period_days": days,
            "total_usage": 0,
            "total_cost": 0,
            "unique_users": 0
        }

def format_report(report: Dict[str, Any]) -> str:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å –æ—Ç—á–µ—Ç –≤ —á–∏—Ç–∞–µ–º—ã–π –≤–∏–¥
    
    Args:
        report: –°–ª–æ–≤–∞—Ä—å —Å –æ—Ç—á–µ—Ç–æ–º
    
    Returns:
        –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—Ç—Ä–æ–∫–∞
    """
    try:
        if "date" in report:
            # –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –æ—Ç—á–µ—Ç
            date_str = report["date"].strftime("%Y-%m-%d")
            return f"""üìÖ –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –æ—Ç—á—ë—Ç BabkaBot ({date_str})
üí∏ –°–ø–∏—Å–∞–Ω–∏–π –∑–∞ —Å—É—Ç–∫–∏: {report.get('total_spent', 0)} –º–æ–Ω–µ—Ç
üí∞ –ù–∞—á–∏—Å–ª–µ–Ω–∏–π –∑–∞ —Å—É—Ç–∫–∏: {report.get('total_earned', 0)} –º–æ–Ω–µ—Ç
üë• –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {report.get('unique_users', 0)}
üî• –¢–æ–ø —Ñ—É–Ω–∫—Ü–∏–π:
{_format_top_features(report.get('top_features', []))}"""
        
        elif "period_start" in report:
            # –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏–π –æ—Ç—á–µ—Ç
            start_str = report["period_start"].strftime("%Y-%m-%d")
            end_str = report["period_end"].strftime("%Y-%m-%d")
            return f"""üìä –û—Ç—á—ë—Ç BabkaBot ({start_str} - {end_str})
üí∏ –°–ø–∏—Å–∞–Ω–∏–π –∑–∞ –ø–µ—Ä–∏–æ–¥: {report.get('total_spent', 0)} –º–æ–Ω–µ—Ç
üí∞ –ù–∞—á–∏—Å–ª–µ–Ω–∏–π –∑–∞ –ø–µ—Ä–∏–æ–¥: {report.get('total_earned', 0)} –º–æ–Ω–µ—Ç
üë• –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {report.get('unique_users', 0)}
üî• –¢–æ–ø —Ñ—É–Ω–∫—Ü–∏–π:
{_format_top_features(report.get('top_features', []))}"""
        
        else:
            return f"üìä –û—Ç—á—ë—Ç BabkaBot\n{report}"
    
    except Exception as e:
        log.error(f"Failed to format report: {e}")
        return f"‚ùå –û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ç—á–µ—Ç–∞: {e}"

def _format_top_features(features: List[Dict[str, Any]], limit: int = 5) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç–æ–ø —Ñ—É–Ω–∫—Ü–∏–π"""
    if not features:
        return "   –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö"
    
    lines = []
    for i, feature in enumerate(features[:limit], 1):
        name = feature.get('feature', 'unknown')
        cost = feature.get('total_cost', 0)
        count = feature.get('usage_count', 0)
        lines.append(f"   {i}. {name} ‚Äî {cost} –º–æ–Ω–µ—Ç ({count} –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π)")
    
    return "\n".join(lines)
