"""
–ê–¥–º–∏–Ω—Å–∫–∏–µ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–æ–º –∏ –∞—É–¥–∏—Ç–æ–º
"""

from aiogram import types, Router
from aiogram.filters import Command
from app.services import balance_manager, billing_observer
from app.config.pricing import FEATURE_DESCRIPTIONS
import logging
from typing import Optional

log = logging.getLogger("babka-bot")
admin_router = Router()

# –°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–æ–≤ (–º–æ–∂–Ω–æ –≤—ã–Ω–µ—Å—Ç–∏ –≤ –∫–æ–Ω—Ñ–∏–≥)
ADMIN_IDS = [5015100177]  # –î–æ–±–∞–≤—å—Ç–µ —Å—é–¥–∞ ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤

def is_admin(user_id: int) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º"""
    return user_id in ADMIN_IDS

@admin_router.message(Command("balance"))
async def cmd_balance(message: types.Message):
    """–ü–æ–∫–∞–∑–∞—Ç—å –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏"""
    if not is_admin(message.from_user.id):
        await message.reply("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
        return
    
    try:
        # –ü–∞—Ä—Å–∏–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥—ã
        args = message.text.split()
        if len(args) < 2:
            await message.reply("‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /balance <user_id>")
            return
        
        user_id = int(args[1])
        summary = balance_manager.get_user_summary(user_id)
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
        response = f"üí∞ <b>–ë–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}</b>\n\n"
        response += f"üíé –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: <b>{summary['current_balance']}</b> –º–æ–Ω–µ—Ç\n\n"
        
        if summary['recent_transactions']:
            response += "üìã <b>–ü–æ—Å–ª–µ–¥–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏:</b>\n"
            for tx in summary['recent_transactions'][:5]:
                delta_str = f"+{tx['delta']}" if tx['delta'] > 0 else str(tx['delta'])
                feature_desc = FEATURE_DESCRIPTIONS.get(tx['feature'], tx['feature'])
                response += f"‚Ä¢ {delta_str} –º–æ–Ω–µ—Ç | {feature_desc} | {tx['reason']}\n"
        else:
            response += "üìã –ù–µ—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π"
        
        await message.reply(response, parse_mode="HTML")
        
    except ValueError:
        await message.reply("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç user_id")
    except Exception as e:
        log.error(f"Error in /balance command: {e}")
        await message.reply(f"‚ùå –û—à–∏–±–∫–∞: {e}")

@admin_router.message(Command("set_balance"))
async def cmd_set_balance(message: types.Message):
    """–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    if not is_admin(message.from_user.id):
        await message.reply("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
        return
    
    try:
        # –ü–∞—Ä—Å–∏–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã: /set_balance <user_id> <new_balance> [reason]
        args = message.text.split()
        if len(args) < 3:
            await message.reply("‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /set_balance <user_id> <new_balance> [reason]")
            return
        
        user_id = int(args[1])
        new_balance = int(args[2])
        reason = " ".join(args[3:]) if len(args) > 3 else "Admin set balance"
        
        old_balance = balance_manager.get_balance(user_id)
        balance_manager.set_balance(
            user_id=user_id,
            new_balance=new_balance,
            reason=reason,
            admin_note=f"Admin {message.from_user.id}"
        )
        
        response = f"‚úÖ <b>–ë–∞–ª–∞–Ω—Å –æ–±–Ω–æ–≤–ª–µ–Ω</b>\n\n"
        response += f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_id}\n"
        response += f"üí∞ –ë—ã–ª–æ: {old_balance} –º–æ–Ω–µ—Ç\n"
        response += f"üí∞ –°—Ç–∞–ª–æ: {new_balance} –º–æ–Ω–µ—Ç\n"
        response += f"üìù –ü—Ä–∏—á–∏–Ω–∞: {reason}"
        
        await message.reply(response, parse_mode="HTML")
        
    except ValueError as e:
        await message.reply(f"‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç: {e}")
    except Exception as e:
        log.error(f"Error in /set_balance command: {e}")
        await message.reply(f"‚ùå –û—à–∏–±–∫–∞: {e}")

@admin_router.message(Command("billing_report"))
async def cmd_billing_report(message: types.Message):
    """–ü–æ–∫–∞–∑–∞—Ç—å –æ—Ç—á–µ—Ç –ø–æ –±–∏–ª–ª–∏–Ω–≥—É"""
    if not is_admin(message.from_user.id):
        await message.reply("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
        return
    
    try:
        # –ü–∞—Ä—Å–∏–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã: /billing_report [daily|weekly|monthly]
        args = message.text.split()
        period = args[1] if len(args) > 1 else "daily"
        
        if period == "daily":
            report = billing_observer.get_daily_report()
        elif period == "weekly":
            report = billing_observer.get_weekly_report()
        elif period == "monthly":
            report = billing_observer.get_monthly_report()
        else:
            await message.reply("‚ùå –î–æ—Å—Ç—É–ø–Ω—ã–µ –ø–µ—Ä–∏–æ–¥—ã: daily, weekly, monthly")
            return
        
        response = billing_observer.format_report(report)
        await message.reply(response)
        
    except Exception as e:
        log.error(f"Error in /billing_report command: {e}")
        await message.reply(f"‚ùå –û—à–∏–±–∫–∞: {e}")

@admin_router.message(Command("audit"))
async def cmd_audit(message: types.Message):
    """–ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª—å–Ω—É—é –∏—Å—Ç–æ—Ä–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    if not is_admin(message.from_user.id):
        await message.reply("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
        return
    
    try:
        # –ü–∞—Ä—Å–∏–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã: /audit <user_id> [limit]
        args = message.text.split()
        if len(args) < 2:
            await message.reply("‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /audit <user_id> [limit]")
            return
        
        user_id = int(args[1])
        limit = int(args[2]) if len(args) > 2 else 20
        
        transactions = billing_observer.get_user_recent_transactions(user_id, limit)
        
        response = f"üìä <b>–ê—É–¥–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}</b>\n\n"
        
        if transactions:
            for tx in transactions:
                delta_str = f"+{tx['delta']}" if tx['delta'] > 0 else str(tx['delta'])
                feature_desc = FEATURE_DESCRIPTIONS.get(tx['feature'], tx['feature'])
                timestamp = tx['timestamp'].strftime("%Y-%m-%d %H:%M")
                response += f"‚Ä¢ {delta_str} | {feature_desc} | {tx['reason']} | {timestamp}\n"
        else:
            response += "üìã –ù–µ—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π"
        
        await message.reply(response, parse_mode="HTML")
        
    except ValueError as e:
        await message.reply(f"‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç: {e}")
    except Exception as e:
        log.error(f"Error in /audit command: {e}")
        await message.reply(f"‚ùå –û—à–∏–±–∫–∞: {e}")

@admin_router.message(Command("add_coins"))
async def cmd_add_coins(message: types.Message):
    """–î–æ–±–∞–≤–∏—Ç—å –º–æ–Ω–µ—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
    if not is_admin(message.from_user.id):
        await message.reply("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
        return
    
    try:
        # –ü–∞—Ä—Å–∏–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã: /add_coins <user_id> <amount> <reason>
        args = message.text.split()
        if len(args) < 4:
            await message.reply("‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /add_coins <user_id> <amount> <reason>")
            return
        
        user_id = int(args[1])
        amount = int(args[2])
        reason = " ".join(args[3:])
        
        new_balance = balance_manager.add_coins(
            user_id=user_id,
            amount=amount,
            reason=reason,
            feature="manual_add"
        )
        
        response = f"‚úÖ <b>–ú–æ–Ω–µ—Ç—ã –¥–æ–±–∞–≤–ª–µ–Ω—ã</b>\n\n"
        response += f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_id}\n"
        response += f"üí∞ –î–æ–±–∞–≤–ª–µ–Ω–æ: +{amount} –º–æ–Ω–µ—Ç\n"
        response += f"üí∞ –ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: {new_balance} –º–æ–Ω–µ—Ç\n"
        response += f"üìù –ü—Ä–∏—á–∏–Ω–∞: {reason}"
        
        await message.reply(response, parse_mode="HTML")
        
    except ValueError as e:
        await message.reply(f"‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç: {e}")
    except Exception as e:
        log.error(f"Error in /add_coins command: {e}")
        await message.reply(f"‚ùå –û—à–∏–±–∫–∞: {e}")

@admin_router.message(Command("spend_coins"))
async def cmd_spend_coins(message: types.Message):
    """–°–ø–∏—Å–∞—Ç—å –º–æ–Ω–µ—Ç—ã —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    if not is_admin(message.from_user.id):
        await message.reply("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
        return
    
    try:
        # –ü–∞—Ä—Å–∏–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã: /spend_coins <user_id> <amount> <reason>
        args = message.text.split()
        if len(args) < 4:
            await message.reply("‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /spend_coins <user_id> <amount> <reason>")
            return
        
        user_id = int(args[1])
        amount = int(args[2])
        reason = " ".join(args[3:])
        
        new_balance = balance_manager.spend_coins(
            user_id=user_id,
            amount=amount,
            reason=reason,
            feature="manual_spend"
        )
        
        response = f"‚úÖ <b>–ú–æ–Ω–µ—Ç—ã —Å–ø–∏—Å–∞–Ω—ã</b>\n\n"
        response += f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_id}\n"
        response += f"üí∞ –°–ø–∏—Å–∞–Ω–æ: -{amount} –º–æ–Ω–µ—Ç\n"
        response += f"üí∞ –ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: {new_balance} –º–æ–Ω–µ—Ç\n"
        response += f"üìù –ü—Ä–∏—á–∏–Ω–∞: {reason}"
        
        await message.reply(response, parse_mode="HTML")
        
    except balance_manager.InsufficientFundsError:
        await message.reply("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
    except ValueError as e:
        await message.reply(f"‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç: {e}")
    except Exception as e:
        log.error(f"Error in /spend_coins command: {e}")
        await message.reply(f"‚ùå –û—à–∏–±–∫–∞: {e}")

@admin_router.message(Command("help_admin"))
async def cmd_help_admin(message: types.Message):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É –ø–æ –∞–¥–º–∏–Ω—Å–∫–∏–º –∫–æ–º–∞–Ω–¥–∞–º"""
    if not is_admin(message.from_user.id):
        await message.reply("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
        return
    
    help_text = """
üîß <b>–ê–¥–º–∏–Ω—Å–∫–∏–µ –∫–æ–º–∞–Ω–¥—ã</b>

üí∞ <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–æ–º:</b>
/balance &lt;user_id&gt; - –ø–æ–∫–∞–∑–∞—Ç—å –±–∞–ª–∞–Ω—Å –∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
/set_balance &lt;user_id&gt; &lt;new_balance&gt; [reason] - —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –±–∞–ª–∞–Ω—Å
/add_coins &lt;user_id&gt; &lt;amount&gt; &lt;reason&gt; - –¥–æ–±–∞–≤–∏—Ç—å –º–æ–Ω–µ—Ç—ã
/spend_coins &lt;user_id&gt; &lt;amount&gt; &lt;reason&gt; - —Å–ø–∏—Å–∞—Ç—å –º–æ–Ω–µ—Ç—ã

üìä <b>–û—Ç—á–µ—Ç—ã –∏ –∞—É–¥–∏—Ç:</b>
/billing_report [daily|weekly|monthly] - –æ—Ç—á–µ—Ç –ø–æ –±–∏–ª–ª–∏–Ω–≥—É
/audit &lt;user_id&gt; [limit] - –¥–µ—Ç–∞–ª—å–Ω–∞—è –∏—Å—Ç–æ—Ä–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

‚ùì <b>–°–ø—Ä–∞–≤–∫–∞:</b>
/help_admin - —ç—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞
"""
    
    await message.reply(help_text, parse_mode="HTML")
