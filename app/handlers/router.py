# app/handlers/router_v2.py
"""–ï–¥–∏–Ω—ã–π —Ä–æ—É—Ç–µ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ callback-–æ–≤ –∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Ö—ç–Ω–¥–ª–µ—Ä–æ–≤ –¥–ª—è python-telegram-bot"""

from telegram import Update, CallbackQuery, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import CallbackQueryHandler, ContextTypes
from app.ui.callbacks import parse_cb, Actions, Cb
from app.ui.keyboards import build_keyboard_with_description, build_home_keyboard
from app.ui.texts import t
from app.ui.legacy_mapping import convert_legacy_callback
import logging

log = logging.getLogger(__name__)

HANDLERS: dict[str, callable] = {}

def on_action(action: str):
    """–î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —Ö—ç–Ω–¥–ª–µ—Ä–∞ –ø–æ –¥–µ–π—Å—Ç–≤–∏—é"""
    def decorator(fn):
        HANDLERS[action] = fn
        log.info(f"Registered handler for action: {action}")
        return fn
    return decorator

async def callback_entry(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ï–¥–∏–Ω–∞—è —Ç–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –¥–ª—è –≤—Å–µ—Ö callback-–æ–≤"""
    try:
        call = update.callback_query
        if not call:
            return
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø (–µ—Å–ª–∏ —Ñ—É–Ω–∫—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞)
        # if not await check_access(call): return
        
        await call.answer()
        
        log.info(f"üîç ROUTER CALLBACK: '{call.data}' from uid={call.from_user.id}")
        cb = parse_cb(call.data or "")
        
        # –ï—Å–ª–∏ –Ω–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç –Ω–µ —Ä–∞—Å–ø–∞—Ä—Å–∏–ª—Å—è, –ø—Ä–æ–±—É–µ–º —Å—Ç–∞—Ä—ã–π
        if not cb:
            log.info(f"Trying legacy conversion for callback: '{call.data}'")
            legacy_cb = convert_legacy_callback(call.data)
            if legacy_cb:
                log.info(f"‚úÖ Converted legacy callback '{call.data}' to new format: {legacy_cb}")
                cb = legacy_cb
            else:
                log.warning(f"‚ùå Failed to parse callback data: '{call.data}'")
                await show_error_and_menu(call, "error.button_outdated")
                return
        
        if cb.action not in HANDLERS:
            log.warning(f"Unknown action: '{cb.action}' for callback: '{call.data}'")
            log.warning(f"Available handlers: {list(HANDLERS.keys())}")
            await show_error_and_menu(call, "error.button_outdated")
            return
        
        # –í—ã–∑—ã–≤–∞–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π —Ö—ç–Ω–¥–ª–µ—Ä
        handler = HANDLERS[cb.action]
        await handler(update, context, cb)
        
    except Exception as e:
        log.error(f"Error in callback handler: {e}", exc_info=True)
        try:
            await show_error_and_menu(call, "error.button_outdated")
        except Exception:
            log.error("Failed to show error menu")

async def show_error_and_menu(call: CallbackQuery, error_key: str):
    """–ü–æ–∫–∞–∑–∞—Ç—å –æ—à–∏–±–∫—É –∏ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    try:
        error_text = t(error_key)
        text, keyboard = build_keyboard_with_description("root")
        
        await call.message.edit_text(
            f"{error_text}\n\n{text}",
            reply_markup=keyboard
        )
    except Exception as e:
        log.error(f"Failed to show error menu: {e}")
        # –ü–æ—Å–ª–µ–¥–Ω—è—è –ø–æ–ø—ã—Ç–∫–∞ - –ø–æ–∫–∞–∑–∞—Ç—å —Ç–æ–ª—å–∫–æ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        try:
            text, keyboard = build_keyboard_with_description("root")
            await call.message.edit_text(text, reply_markup=keyboard)
        except Exception:
            log.error("Complete failure to show menu")

# === –ù–ê–í–ò–ì–ê–¶–ò–û–ù–ù–´–ï –•–≠–ù–î–õ–ï–†–´ ===

@on_action(Actions.NAV)
async def handle_nav(update: Update, context: ContextTypes.DEFAULT_TYPE, cb):
    """–ù–∞–≤–∏–≥–∞—Ü–∏—è –º–µ–∂–¥—É —ç–∫—Ä–∞–Ω–∞–º–∏"""
    call = update.callback_query
    target = cb.id or "root"
    try:
        text, keyboard = build_keyboard_with_description(target)
        await call.message.edit_text(text, reply_markup=keyboard)
        log.info(f"Navigated to: {target}")
    except Exception as e:
        log.error(f"Navigation error to {target}: {e}")
        await show_error_and_menu(call, "error.button_outdated")

@on_action(Actions.HOME)
async def handle_home(update: Update, context: ContextTypes.DEFAULT_TYPE, cb):
    """–ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É"""
    await handle_nav(update, context, cb)

@on_action(Actions.BACK)
async def handle_back(update: Update, context: ContextTypes.DEFAULT_TYPE, cb):
    """–ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥" """
    await handle_nav(update, context, cb)

@on_action(Actions.CANCEL)
async def handle_cancel(update: Update, context: ContextTypes.DEFAULT_TYPE, cb):
    """–û—Ç–º–µ–Ω–∞ –¥–µ–π—Å—Ç–≤–∏—è"""
    await handle_nav(update, context, cb)

# === –ì–õ–ê–í–ù–û–ï –ú–ï–ù–Æ ===

@on_action(Actions.MENU_MAKE)
async def handle_menu_make(update: Update, context: ContextTypes.DEFAULT_TYPE, cb):
    """–ü–µ—Ä–µ—Ö–æ–¥ –∫ –≤—ã–±–æ—Ä—É —Ä–µ–∂–∏–º–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏"""
    await handle_nav(update, context, cb)

@on_action(Actions.MENU_LEGO)
async def handle_menu_lego(update: Update, context: ContextTypes.DEFAULT_TYPE, cb):
    """–ê–∫—Ç–∏–≤–∞—Ü–∏—è LEGO —Ä–µ–∂–∏–º–∞"""
    await handle_nav(update, context, cb)

@on_action(Actions.MENU_ALIVE)
async def handle_menu_alive(update: Update, context: ContextTypes.DEFAULT_TYPE, cb):
    """–û–∂–∏–≤–ª–µ–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (–≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ)"""
    call = update.callback_query
    await call.message.edit_text(
        t("menu.alive"),
        reply_markup=build_home_keyboard()
    )

@on_action(Actions.MENU_TRYON)
async def handle_menu_tryon(update: Update, context: ContextTypes.DEFAULT_TYPE, cb):
    """–í–∏—Ä—Ç—É–∞–ª—å–Ω–∞—è –ø—Ä–∏–º–µ—Ä–æ—á–Ω–∞—è"""
    await handle_nav(update, context, cb)

@on_action(Actions.MENU_TRANSFORMS)
async def handle_menu_transforms(update: Update, context: ContextTypes.DEFAULT_TYPE, cb):
    """–¢—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π"""
    await handle_nav(update, context, cb)

@on_action(Actions.MENU_JSONPRO)
async def handle_menu_jsonpro(update: Update, context: ContextTypes.DEFAULT_TYPE, cb):
    """JSON Pro —Ä–µ–∂–∏–º"""
    await handle_nav(update, context, cb)

@on_action(Actions.MENU_GUIDES)
async def handle_menu_guides(update: Update, context: ContextTypes.DEFAULT_TYPE, cb):
    """–ì–∞–π–¥—ã –∏ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏"""
    call = update.callback_query
    await call.message.edit_text(
        t("menu.guides"),
        reply_markup=build_home_keyboard()
    )

@on_action(Actions.MENU_PROFILE)
async def handle_menu_profile(update: Update, context: ContextTypes.DEFAULT_TYPE, cb):
    """–ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    await handle_nav(update, context, cb)

@on_action(Actions.MENU_HISTORY)
async def handle_menu_history(update: Update, context: ContextTypes.DEFAULT_TYPE, cb):
    """–ò—Å—Ç–æ—Ä–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–π"""
    call = update.callback_query
    await call.message.edit_text(
        t("btn.history"),
        reply_markup=build_home_keyboard()
    )

# === –ü–õ–ê–¢–ï–ñ–ò –ò –¢–ê–†–ò–§–´ ===

@on_action(Actions.PAYMENT_PLANS)
async def handle_payment_plans(update: Update, context: ContextTypes.DEFAULT_TYPE, cb):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Ç–∞—Ä–∏—Ñ—ã"""
    call = update.callback_query
    from app.services.pricing import format_plans_list, get_available_tariffs
    import logging
    log = logging.getLogger(__name__)

    log.info("CALLBACK handle_payment_plans uid=%s", call.from_user.id)

    # –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è —Å–±–æ—Ä–∫–∞ —Ç–µ–∫—Å—Ç–∞
    try:
        plans_text = format_plans_list()
    except Exception as e:
        log.error("Failed to build plans list: %s", e, exc_info=True)
        plans_text = "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ç–∞—Ä–∏—Ñ–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑."

    # –î–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∏–π –±–µ–π–¥–∂ –≤–µ—Ä—Å–∏–∏ (–æ—Å—Ç–∞–≤–∏—Ç—å, –µ—Å–ª–∏ –≤ –ø—Ä–æ–µ–∫—Ç–µ –µ—Å—Ç—å —ç—Ç–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ)
    try:
        from main import VERSION, PRICING_HASH
        plans_text += f"\n\nüß© version: {VERSION} ‚Ä¢ pricing: {PRICING_HASH}"
    except Exception:
        pass

    # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–ø–∏—Å–∫–∞ (–Ω–µ dict!)
    kb = []
    try:
        tariffs = get_available_tariffs()  # –æ–∂–∏–¥–∞–µ—Ç—Å—è list[dict]
        for info in tariffs:
            key = info["name"]
            title = info["title"]
            price = info["price_rub"]
            kb.append([InlineKeyboardButton(f"{title} ‚Äî {price:,} ‚ÇΩ", callback_data=f"buy_plan_{key}")])
    except Exception as e:
        log.error("Failed to build tariffs keyboard: %s", e, exc_info=True)

    kb.append([InlineKeyboardButton("‚ûï –ü–æ–ø–æ–ª–Ω–∏—Ç—å –º–æ–Ω–µ—Ç—ã", callback_data="show_topup")])
    kb.append([InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_home")])

    await call.message.edit_text(plans_text, parse_mode="HTML", reply_markup=InlineKeyboardMarkup(kb))

@on_action(Actions.PAYMENT_TOPUP)
async def handle_payment_topup(update: Update, context: ContextTypes.DEFAULT_TYPE, cb):
    """–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞"""
    call = update.callback_query
    from app.services.pricing import format_topup_packs, get_available_topup_packs

    log.info("CALLBACK show_topup uid=%s", call.from_user.id)

    topup_text = "üí∞ –ü–æ–ø–æ–ª–Ω–∏—Ç—å –º–æ–Ω–µ—Ç–∫–∏\n\n"
    topup_text += format_topup_packs()

    kb = []
    topup_packs = get_available_topup_packs()
    for pack in topup_packs:
        kb.append([InlineKeyboardButton(f"{pack['coins']} –º–æ–Ω–µ—Ç ‚Äî {pack['price_rub']} ‚ÇΩ", callback_data=f"buy_topup_{pack['coins']}")])
    kb.append([InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_home")])

    await call.message.edit_text(topup_text, parse_mode="HTML", reply_markup=InlineKeyboardMarkup(kb))

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —Ä–æ—É—Ç–µ—Ä–∞ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –±–æ—Ç–µ
def register_router(app):
    """–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å —Ä–æ—É—Ç–µ—Ä –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏"""
    app.add_handler(CallbackQueryHandler(callback_entry))
    log.info("‚úÖ Callback router registered successfully")
    log.info(f"üìã Registered handlers: {list(HANDLERS.keys())}")
    print(f"üîß ROUTER INIT: Registered {len(HANDLERS)} handlers")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ö—ç–Ω–¥–ª–µ—Ä–æ–≤
def get_registered_handlers():
    """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ö—ç–Ω–¥–ª–µ—Ä–æ–≤"""
    return list(HANDLERS.keys())
