# app/handlers/router.py
"""–ï–¥–∏–Ω—ã–π —Ä–æ—É—Ç–µ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ callback-–æ–≤ –∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Ö—ç–Ω–¥–ª–µ—Ä–æ–≤"""

from aiogram import types, Router
from app.ui.callbacks import parse_cb, Actions, Cb
from app.ui.keyboards import build_keyboard_with_description, build_home_keyboard
from app.ui.texts import t
from app.ui.legacy_mapping import convert_legacy_callback
import logging

log = logging.getLogger(__name__)

router = Router()
HANDLERS: dict[str, callable] = {}

def on_action(action: str):
    """–î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —Ö—ç–Ω–¥–ª–µ—Ä–∞ –ø–æ –¥–µ–π—Å—Ç–≤–∏—é"""
    def decorator(fn):
        HANDLERS[action] = fn
        log.info(f"Registered handler for action: {action}")
        return fn
    return decorator

@router.callback_query()
async def callback_entry(call: types.CallbackQuery):
    """–ï–¥–∏–Ω–∞—è —Ç–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –¥–ª—è –≤—Å–µ—Ö callback-–æ–≤"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø (–µ—Å–ª–∏ —Ñ—É–Ω–∫—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞)
        # if not await check_access(call): return
        
        await call.answer()
        
        cb = parse_cb(call.data or "")
        
        # –ï—Å–ª–∏ –Ω–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç –Ω–µ —Ä–∞—Å–ø–∞—Ä—Å–∏–ª—Å—è, –ø—Ä–æ–±—É–µ–º —Å—Ç–∞—Ä—ã–π
        if not cb:
            legacy_cb = convert_legacy_callback(call.data)
            if legacy_cb:
                log.info(f"Converted legacy callback '{call.data}' to new format")
                cb = legacy_cb
            else:
                log.warning(f"Failed to parse callback data: '{call.data}'")
                await show_error_and_menu(call, "error.button_outdated")
                return
        
        if cb.action not in HANDLERS:
            log.warning(f"Unknown action: '{cb.action}' for callback: '{call.data}'")
            await show_error_and_menu(call, "error.button_outdated")
            return
        
        # –í—ã–∑—ã–≤–∞–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π —Ö—ç–Ω–¥–ª–µ—Ä
        handler = HANDLERS[cb.action]
        await handler(call, cb)
        
    except Exception as e:
        log.error(f"Error in callback handler: {e}", exc_info=True)
        try:
            await show_error_and_menu(call, "error.button_outdated")
        except Exception:
            log.error("Failed to show error menu")

async def show_error_and_menu(call: types.CallbackQuery, error_key: str):
    """–ü–æ–∫–∞–∑–∞—Ç—å –æ—à–∏–±–∫—É –∏ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    try:
        error_text = t(error_key)
        text, keyboard = build_keyboard_with_description("root")
        
        await call.message.edit_text(
            f"{error_text}\n\n{text}",
            reply_markup=keyboard
        )
    except Exception as e:
        log.error(f"Failed to show error menu: {e}")
        # –ü–æ—Å–ª–µ–¥–Ω—è—è –ø–æ–ø—ã—Ç–∫–∞ - –ø–æ–∫–∞–∑–∞—Ç—å —Ç–æ–ª—å–∫–æ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        try:
            text, keyboard = build_keyboard_with_description("root")
            await call.message.edit_text(text, reply_markup=keyboard)
        except Exception:
            log.error("Complete failure to show menu")

# === –ù–ê–í–ò–ì–ê–¶–ò–û–ù–ù–´–ï –•–≠–ù–î–õ–ï–†–´ ===

@on_action(Actions.NAV)
async def handle_nav(call: types.CallbackQuery, cb):
    """–ù–∞–≤–∏–≥–∞—Ü–∏—è –º–µ–∂–¥—É —ç–∫—Ä–∞–Ω–∞–º–∏"""
    target = cb.id or "root"
    try:
        text, keyboard = build_keyboard_with_description(target)
        await call.message.edit_text(text, reply_markup=keyboard)
        log.info(f"Navigated to: {target}")
    except Exception as e:
        log.error(f"Navigation error to {target}: {e}")
        await show_error_and_menu(call, "error.button_outdated")

@on_action(Actions.HOME)
async def handle_home(call: types.CallbackQuery, cb):
    """–ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É"""
    await handle_nav(call, cb)

@on_action(Actions.BACK)
async def handle_back(call: types.CallbackQuery, cb):
    """–ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥" """
    target = cb.id or "root"
    await handle_nav(call, cb)

@on_action(Actions.CANCEL)
async def handle_cancel(call: types.CallbackQuery, cb):
    """–û—Ç–º–µ–Ω–∞ –¥–µ–π—Å—Ç–≤–∏—è"""
    await handle_nav(call, cb)

# === –ì–õ–ê–í–ù–û–ï –ú–ï–ù–Æ ===

@on_action(Actions.MENU_MAKE)
async def handle_menu_make(call: types.CallbackQuery, cb):
    """–ü–µ—Ä–µ—Ö–æ–¥ –∫ –≤—ã–±–æ—Ä—É —Ä–µ–∂–∏–º–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏"""
    await handle_nav(call, cb)

@on_action(Actions.MENU_LEGO)
async def handle_menu_lego(call: types.CallbackQuery, cb):
    """–ê–∫—Ç–∏–≤–∞—Ü–∏—è LEGO —Ä–µ–∂–∏–º–∞"""
    # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ —Ä–µ–∂–∏–º–∞
    # st.update({"mode": "lego", "scene": None, "style": "LEGO", "replica": None})
    await handle_nav(call, cb)

@on_action(Actions.MENU_ALIVE)
async def handle_menu_alive(call: types.CallbackQuery, cb):
    """–û–∂–∏–≤–ª–µ–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (–≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ)"""
    await call.message.edit_text(
        t("menu.alive"),
        reply_markup=build_home_keyboard()
    )

@on_action(Actions.MENU_TRYON)
async def handle_menu_tryon(call: types.CallbackQuery, cb):
    """–í–∏—Ä—Ç—É–∞–ª—å–Ω–∞—è –ø—Ä–∏–º–µ—Ä–æ—á–Ω–∞—è"""
    await handle_nav(call, cb)

@on_action(Actions.MENU_TRANSFORMS)
async def handle_menu_transforms(call: types.CallbackQuery, cb):
    """–¢—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π"""
    # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    # coins = st.get("coins", 0)
    # text = t("desc.transforms", coins=coins)
    await handle_nav(call, cb)

@on_action(Actions.MENU_JSONPRO)
async def handle_menu_jsonpro(call: types.CallbackQuery, cb):
    """JSON Pro —Ä–µ–∂–∏–º"""
    await handle_nav(call, cb)

@on_action(Actions.MENU_GUIDES)
async def handle_menu_guides(call: types.CallbackQuery, cb):
    """–ì–∞–π–¥—ã –∏ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏"""
    await call.message.edit_text(
        t("menu.guides"),
        reply_markup=build_home_keyboard()
    )

@on_action(Actions.MENU_PROFILE)
async def handle_menu_profile(call: types.CallbackQuery, cb):
    """–ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    await handle_nav(call, cb)

@on_action(Actions.MENU_HISTORY)
async def handle_menu_history(call: types.CallbackQuery, cb):
    """–ò—Å—Ç–æ—Ä–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–π"""
    await call.message.edit_text(
        t("btn.history"),
        reply_markup=build_home_keyboard()
    )

# === –†–ï–ñ–ò–ú–´ –ì–ï–ù–ï–†–ê–¶–ò–ò ===

@on_action(Actions.MODE_HELPER)
async def handle_mode_helper(call: types.CallbackQuery, cb):
    """–†–µ–∂–∏–º —Å –ø–æ–º–æ—â–Ω–∏–∫–æ–º"""
    await call.message.edit_text(
        t("mode.helper"),
        reply_markup=build_home_keyboard()
    )

@on_action(Actions.MODE_MANUAL)
async def handle_mode_manual(call: types.CallbackQuery, cb):
    """–†—É—á–Ω–æ–π —Ä–µ–∂–∏–º"""
    await call.message.edit_text(
        t("mode.manual"),
        reply_markup=build_home_keyboard()
    )

@on_action(Actions.MODE_MEME)
async def handle_mode_meme(call: types.CallbackQuery, cb):
    """–ú–µ–º —Ä–µ–∂–∏–º"""
    await call.message.edit_text(
        t("mode.meme"),
        reply_markup=build_home_keyboard()
    )

@on_action(Actions.MODE_NKUDO)
async def handle_mode_nkudo(call: types.CallbackQuery, cb):
    """–ù–ö–£–î–û —Ä–µ–∂–∏–º"""
    await handle_nav(call, cb)

@on_action(Actions.BACK_MODES)
async def handle_back_modes(call: types.CallbackQuery, cb):
    """–ù–∞–∑–∞–¥ –∫ —Ä–µ–∂–∏–º–∞–º"""
    await handle_nav(call, cb)

# === LEGO –†–ï–ñ–ò–ú ===

@on_action(Actions.LEGO_SINGLE)
async def handle_lego_single(call: types.CallbackQuery, cb):
    """LEGO –æ–¥–∏–Ω–æ—á–Ω–∞—è —Å—Ü–µ–Ω–∞"""
    await handle_nav(call, cb)

@on_action(Actions.LEGO_REPORTAGE)
async def handle_lego_reportage(call: types.CallbackQuery, cb):
    """LEGO —Ä–µ–ø–æ—Ä—Ç–∞–∂"""
    await handle_nav(call, cb)

@on_action(Actions.LEGO_REGENERATE)
async def handle_lego_regenerate(call: types.CallbackQuery, cb):
    """LEGO –ø–µ—Ä–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏—è"""
    await call.message.edit_text(
        "üîÑ –ü–µ—Ä–µ–≥–µ–Ω–µ—Ä–∏—Ä—É—é LEGO —Å—Ü–µ–Ω—É...",
        reply_markup=build_home_keyboard()
    )

@on_action(Actions.LEGO_IMPROVE)
async def handle_lego_improve(call: types.CallbackQuery, cb):
    """LEGO —É–ª—É—á—à–µ–Ω–∏–µ"""
    await call.message.edit_text(
        "‚ú® –£–ª—É—á—à–∞—é LEGO —Å—Ü–µ–Ω—É...",
        reply_markup=build_home_keyboard()
    )

@on_action(Actions.LEGO_KEEP)
async def handle_lego_keep(call: types.CallbackQuery, cb):
    """LEGO –æ—Å—Ç–∞–≤–∏—Ç—å –∫–∞–∫ –µ—Å—Ç—å"""
    await call.message.edit_text(
        "‚úÖ LEGO —Å—Ü–µ–Ω–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞",
        reply_markup=build_home_keyboard()
    )

@on_action(Actions.LEGO_CANCEL)
async def handle_lego_cancel(call: types.CallbackQuery, cb):
    """LEGO –æ—Ç–º–µ–Ω–∞"""
    await handle_nav(call, cb)

@on_action(Actions.LEGO_AGAIN)
async def handle_lego_again(call: types.CallbackQuery, cb):
    """LEGO –µ—â–µ —Ä–∞–∑"""
    await handle_lego_improve(call, cb)

@on_action(Actions.LEGO_EMBED_REPLICA)
async def handle_lego_embed_replica(call: types.CallbackQuery, cb):
    """LEGO –≤—Å—Ç—Ä–æ–∏—Ç—å —Ä–µ–ø–ª–∏–∫—É"""
    await call.message.edit_text(
        "üí¨ –í–≤–µ–¥–∏—Ç–µ —Ä–µ–ø–ª–∏–∫—É –¥–ª—è LEGO —Å—Ü–µ–Ω—ã:",
        reply_markup=build_home_keyboard()
    )

@on_action(Actions.LEGO_MENU_BACK)
async def handle_lego_menu_back(call: types.CallbackQuery, cb):
    """LEGO –Ω–∞–∑–∞–¥ –≤ –º–µ–Ω—é"""
    await handle_nav(call, cb)

# === –ù–ö–£–î–û –†–ï–ñ–ò–ú ===

@on_action(Actions.NKUDO_SINGLE)
async def handle_nkudo_single(call: types.CallbackQuery, cb):
    """–ù–ö–£–î–û –æ–¥–∏–Ω–æ—á–Ω–∞—è —Å—Ü–µ–Ω–∞"""
    await handle_nav(call, cb)

@on_action(Actions.NKUDO_REPORTAGE)
async def handle_nkudo_reportage(call: types.CallbackQuery, cb):
    """–ù–ö–£–î–û —Ä–µ–ø–æ—Ä—Ç–∞–∂"""
    await handle_nav(call, cb)

@on_action(Actions.NKUDO_REGENERATE)
async def handle_nkudo_regenerate(call: types.CallbackQuery, cb):
    """–ù–ö–£–î–û –ø–µ—Ä–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏—è"""
    await call.message.edit_text(
        "üîÑ –ü–µ—Ä–µ–≥–µ–Ω–µ—Ä–∏—Ä—É—é –ù–ö–£–î–û —Å—Ü–µ–Ω—É...",
        reply_markup=build_home_keyboard()
    )

@on_action(Actions.NKUDO_IMPROVE)
async def handle_nkudo_improve(call: types.CallbackQuery, cb):
    """–ù–ö–£–î–û —É–ª—É—á—à–µ–Ω–∏–µ"""
    await call.message.edit_text(
        "‚ú® –£–ª—É—á—à–∞—é –ù–ö–£–î–û —Å—Ü–µ–Ω—É...",
        reply_markup=build_home_keyboard()
    )

@on_action(Actions.NKUDO_KEEP)
async def handle_nkudo_keep(call: types.CallbackQuery, cb):
    """–ù–ö–£–î–û –æ—Å—Ç–∞–≤–∏—Ç—å –∫–∞–∫ –µ—Å—Ç—å"""
    await call.message.edit_text(
        "‚úÖ –ù–ö–£–î–û —Å—Ü–µ–Ω–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞",
        reply_markup=build_home_keyboard()
    )

@on_action(Actions.NKUDO_CANCEL)
async def handle_nkudo_cancel(call: types.CallbackQuery, cb):
    """–ù–ö–£–î–û –æ—Ç–º–µ–Ω–∞"""
    await handle_nav(call, cb)

@on_action(Actions.NKUDO_APPROVE)
async def handle_nkudo_approve(call: types.CallbackQuery, cb):
    """–ù–ö–£–î–û –æ–¥–æ–±—Ä–∏—Ç—å"""
    await call.message.edit_text(
        "‚û°Ô∏è –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏...",
        reply_markup=build_home_keyboard()
    )

@on_action(Actions.NKUDO_REROLL_SCENE1)
async def handle_nkudo_reroll_scene1(call: types.CallbackQuery, cb):
    """–ù–ö–£–î–û –ø–µ—Ä–µ–∫—Ä—É—Ç–∏—Ç—å —Å—Ü–µ–Ω—É 1"""
    await call.message.edit_text(
        "üé≤ –ü–µ—Ä–µ–∫—Ä—É—á–∏–≤–∞—é —Å—Ü–µ–Ω—É 1...",
        reply_markup=build_home_keyboard()
    )

@on_action(Actions.NKUDO_REROLL_SCENE2)
async def handle_nkudo_reroll_scene2(call: types.CallbackQuery, cb):
    """–ù–ö–£–î–û –ø–µ—Ä–µ–∫—Ä—É—Ç–∏—Ç—å —Å—Ü–µ–Ω—É 2"""
    await call.message.edit_text(
        "üé≤ –ü–µ—Ä–µ–∫—Ä—É—á–∏–≤–∞—é —Å—Ü–µ–Ω—É 2...",
        reply_markup=build_home_keyboard()
    )

@on_action(Actions.NKUDO_EDIT_SCENE1)
async def handle_nkudo_edit_scene1(call: types.CallbackQuery, cb):
    """–ù–ö–£–î–û —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å—Ü–µ–Ω—É 1"""
    await call.message.edit_text(
        "‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä—É—é —Å—Ü–µ–Ω—É 1...",
        reply_markup=build_home_keyboard()
    )

@on_action(Actions.NKUDO_EDIT_SCENE2)
async def handle_nkudo_edit_scene2(call: types.CallbackQuery, cb):
    """–ù–ö–£–î–û —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å—Ü–µ–Ω—É 2"""
    await call.message.edit_text(
        "‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä—É—é —Å—Ü–µ–Ω—É 2...",
        reply_markup=build_home_keyboard()
    )

@on_action(Actions.NKUDO_REGENERATE_REPORT)
async def handle_nkudo_regenerate_report(call: types.CallbackQuery, cb):
    """–ù–ö–£–î–û –ø–µ—Ä–µ–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Ä–µ–ø–æ—Ä—Ç–∞–∂"""
    await call.message.edit_text(
        "üîÑ –ü–µ—Ä–µ–≥–µ–Ω–µ—Ä–∏—Ä—É—é –≤–µ—Å—å —Ä–µ–ø–æ—Ä—Ç–∞–∂...",
        reply_markup=build_home_keyboard()
    )

@on_action(Actions.NKUDO_IMPROVE_REPORT)
async def handle_nkudo_improve_report(call: types.CallbackQuery, cb):
    """–ù–ö–£–î–û —É–ª—É—á—à–∏—Ç—å —Ä–µ–ø–æ—Ä—Ç–∞–∂"""
    await call.message.edit_text(
        "üß†‚ú® –£–ª—É—á—à–∞—é —Ä–µ–ø–æ—Ä—Ç–∞–∂ –ø–æ–º–æ—â–Ω–∏–∫–æ–º...",
        reply_markup=build_home_keyboard()
    )

@on_action(Actions.NKUDO_EMBED_REPLICA)
async def handle_nkudo_embed_replica(call: types.CallbackQuery, cb):
    """–ù–ö–£–î–û –≤—Å—Ç—Ä–æ–∏—Ç—å —Ä–µ–ø–ª–∏–∫—É"""
    await call.message.edit_text(
        "üí¨ –í–≤–µ–¥–∏—Ç–µ —Ä–µ–ø–ª–∏–∫—É –¥–ª—è –ù–ö–£–î–û —Å—Ü–µ–Ω—ã:",
        reply_markup=build_home_keyboard()
    )

@on_action(Actions.NKUDO_MENU_BACK)
async def handle_nkudo_menu_back(call: types.CallbackQuery, cb):
    """–ù–ö–£–î–û –Ω–∞–∑–∞–¥ –≤ –º–µ–Ω—é"""
    await handle_nav(call, cb)

# === –¢–†–ê–ù–°–§–û–†–ú–ê–¶–ò–ò ===

@on_action(Actions.TRANSFORM_REMOVE_BG)
async def handle_transform_remove_bg(call: types.CallbackQuery, cb):
    """–£–¥–∞–ª–µ–Ω–∏–µ —Ñ–æ–Ω–∞"""
    await call.message.edit_text(
        "‚ú® –£–¥–∞–ª—è—é —Ñ–æ–Ω...",
        reply_markup=build_home_keyboard()
    )

@on_action(Actions.TRANSFORM_MERGE_PEOPLE)
async def handle_transform_merge_people(call: types.CallbackQuery, cb):
    """–°–æ–≤–º–µ—â–µ–Ω–∏–µ –ª—é–¥–µ–π"""
    await call.message.edit_text(
        "üë• –°–æ–≤–º–µ—â–∞—é –ª—é–¥–µ–π...",
        reply_markup=build_home_keyboard()
    )

@on_action(Actions.TRANSFORM_INJECT_OBJECT)
async def handle_transform_inject_object(call: types.CallbackQuery, cb):
    """–í–Ω–µ–¥—Ä–µ–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞"""
    await call.message.edit_text(
        "üß© –í–Ω–µ–¥—Ä—è—é –æ–±—ä–µ–∫—Ç...",
        reply_markup=build_home_keyboard()
    )

@on_action(Actions.TRANSFORM_RETOUCH)
async def handle_transform_retouch(call: types.CallbackQuery, cb):
    """–ú–∞–≥–∏—á–µ—Å–∫–∞—è —Ä–µ—Ç—É—à—å"""
    await call.message.edit_text(
        "ü™Ñ –ü—Ä–∏–º–µ–Ω—è—é –º–∞–≥–∏—á–µ—Å–∫—É—é —Ä–µ—Ç—É—à—å...",
        reply_markup=build_home_keyboard()
    )

@on_action(Actions.TRANSFORM_POLAROID)
async def handle_transform_polaroid(call: types.CallbackQuery, cb):
    """Polaroid —ç—Ñ—Ñ–µ–∫—Ç"""
    await call.message.edit_text(
        "üì∑ –ü—Ä–∏–º–µ–Ω—è—é Polaroid —ç—Ñ—Ñ–µ–∫—Ç...",
        reply_markup=build_home_keyboard()
    )

@on_action(Actions.TRANSFORM_QUALITY_BASIC)
async def handle_transform_quality_basic(call: types.CallbackQuery, cb):
    """–ë–∞–∑–æ–≤–∞—è –∫–∞—á–µ—Å—Ç–≤–æ"""
    await call.message.edit_text(
        "‚ö° –í—ã–±—Ä–∞–Ω–æ –±–∞–∑–æ–≤–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ",
        reply_markup=build_home_keyboard()
    )

@on_action(Actions.TRANSFORM_QUALITY_PREMIUM)
async def handle_transform_quality_premium(call: types.CallbackQuery, cb):
    """–ü—Ä–µ–º–∏—É–º –∫–∞—á–µ—Å—Ç–≤–æ"""
    await call.message.edit_text(
        "üíé –í—ã–±—Ä–∞–Ω–æ –ø—Ä–µ–º–∏—É–º –∫–∞—á–µ—Å—Ç–≤–æ",
        reply_markup=build_home_keyboard()
    )

@on_action(Actions.TRANSFORM_RETRY)
async def handle_transform_retry(call: types.CallbackQuery, cb):
    """–ü–æ–≤—Ç–æ—Ä–∏—Ç—å —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏—é"""
    await call.message.edit_text(
        "üîÑ –ü–æ–≤—Ç–æ—Ä—è—é —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏—é...",
        reply_markup=build_home_keyboard()
    )

# === –ü–†–ò–ú–ï–†–û–ß–ù–ê–Ø ===

@on_action(Actions.TRYON_START)
async def handle_tryon_start(call: types.CallbackQuery, cb):
    """–ù–∞—á–∞—Ç—å –ø—Ä–∏–º–µ—Ä–∫—É"""
    await handle_nav(call, cb)

@on_action(Actions.TRYON_SWAP)
async def handle_tryon_swap(call: types.CallbackQuery, cb):
    """–ü–æ–º–µ–Ω—è—Ç—å –º–µ—Å—Ç–∞–º–∏"""
    await call.message.edit_text(
        "üîÑ –ú–µ–Ω—è—é –º–µ—Å—Ç–∞–º–∏...",
        reply_markup=build_home_keyboard()
    )

@on_action(Actions.TRYON_RESET)
async def handle_tryon_reset(call: types.CallbackQuery, cb):
    """–°–±—Ä–æ—Å–∏—Ç—å –ø—Ä–∏–º–µ—Ä–∫—É"""
    await call.message.edit_text(
        "üîÑ –°–±—Ä–∞—Å—ã–≤–∞—é –ø—Ä–∏–º–µ—Ä–∫—É...",
        reply_markup=build_home_keyboard()
    )

@on_action(Actions.TRYON_CONFIRM)
async def handle_tryon_confirm(call: types.CallbackQuery, cb):
    """–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –ø—Ä–∏–º–µ—Ä–∫—É"""
    await call.message.edit_text(
        "‚úÖ –ü—Ä–∏–º–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞",
        reply_markup=build_home_keyboard()
    )

@on_action(Actions.TRYON_NEW_POSE)
async def handle_tryon_new_pose(call: types.CallbackQuery, cb):
    """–ù–æ–≤–∞—è –ø–æ–∑–∞"""
    await call.message.edit_text(
        "üîÑ –ì–µ–Ω–µ—Ä–∏—Ä—É—é –Ω–æ–≤—É—é –ø–æ–∑—É...",
        reply_markup=build_home_keyboard()
    )

@on_action(Actions.TRYON_NEW_GARMENT)
async def handle_tryon_new_garment(call: types.CallbackQuery, cb):
    """–ù–æ–≤–∞—è –æ–¥–µ–∂–¥–∞"""
    await call.message.edit_text(
        "üîÑ –ú–µ–Ω—è—é –æ–¥–µ–∂–¥—É...",
        reply_markup=build_home_keyboard()
    )

@on_action(Actions.TRYON_NEW_BG)
async def handle_tryon_new_bg(call: types.CallbackQuery, cb):
    """–ù–æ–≤—ã–π —Ñ–æ–Ω"""
    await call.message.edit_text(
        "üîÑ –ú–µ–Ω—è—é —Ñ–æ–Ω...",
        reply_markup=build_home_keyboard()
    )

@on_action(Actions.TRYON_PROMPT)
async def handle_tryon_prompt(call: types.CallbackQuery, cb):
    """–£–ª—É—á—à–∏—Ç—å –ø—Ä–æ–º–ø—Ç"""
    await call.message.edit_text(
        "üí¨ –í–≤–µ–¥–∏—Ç–µ —É–ª—É—á—à–µ–Ω–Ω—ã–π –ø—Ä–æ–º–ø—Ç:",
        reply_markup=build_home_keyboard()
    )

# === –°–¢–ò–õ–ò ===

@on_action(Actions.STYLE_ANIME)
async def handle_style_anime(call: types.CallbackQuery, cb):
    """–°—Ç–∏–ª—å –∞–Ω–∏–º–µ"""
    await call.message.edit_text(
        "üáØüáµ –í—ã–±—Ä–∞–Ω —Å—Ç–∏–ª—å –∞–Ω–∏–º–µ",
        reply_markup=build_home_keyboard()
    )

@on_action(Actions.STYLE_LEGO)
async def handle_style_lego(call: types.CallbackQuery, cb):
    """–°—Ç–∏–ª—å LEGO"""
    await call.message.edit_text(
        "üß± –í—ã–±—Ä–∞–Ω —Å—Ç–∏–ª—å LEGO",
        reply_markup=build_home_keyboard()
    )

@on_action(Actions.STYLE_NONE)
async def handle_style_none(call: types.CallbackQuery, cb):
    """–ë–µ–∑ —Å—Ç–∏–ª—è"""
    await call.message.edit_text(
        "‚è© –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –±–µ–∑ —Å—Ç–∏–ª—è",
        reply_markup=build_home_keyboard()
    )

# === –û–†–ò–ï–ù–¢–ê–¶–ò–Ø ===

@on_action(Actions.ORIENTATION_PORTRAIT)
async def handle_orientation_portrait(call: types.CallbackQuery, cb):
    """–ü–æ—Ä—Ç—Ä–µ—Ç–Ω–∞—è –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏—è"""
    await call.message.edit_text(
        "üì± –í—ã–±—Ä–∞–Ω–∞ –ø–æ—Ä—Ç—Ä–µ—Ç–Ω–∞—è –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏—è (9:16)",
        reply_markup=build_home_keyboard()
    )

@on_action(Actions.ORIENTATION_LANDSCAPE)
async def handle_orientation_landscape(call: types.CallbackQuery, cb):
    """–ê–ª—å–±–æ–º–Ω–∞—è –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏—è"""
    await call.message.edit_text(
        "üñ•Ô∏è –í—ã–±—Ä–∞–Ω–∞ –∞–ª—å–±–æ–º–Ω–∞—è –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏—è (16:9)",
        reply_markup=build_home_keyboard()
    )

# === JSON PRO ===

@on_action(Actions.JSONPRO_ENTER)
async def handle_jsonpro_enter(call: types.CallbackQuery, cb):
    """JSON Pro –≤–≤–æ–¥"""
    await call.message.edit_text(
        "JSON Pro —Ä–µ–∂–∏–º –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω",
        reply_markup=build_home_keyboard()
    )

@on_action(Actions.JSONPRO_ORI_916)
async def handle_jsonpro_ori_916(call: types.CallbackQuery, cb):
    """JSON Pro 9:16"""
    await call.message.edit_text(
        "üì± JSON Pro: –ø–æ—Ä—Ç—Ä–µ—Ç–Ω–∞—è –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏—è",
        reply_markup=build_home_keyboard()
    )

@on_action(Actions.JSONPRO_ORI_169)
async def handle_jsonpro_ori_169(call: types.CallbackQuery, cb):
    """JSON Pro 16:9"""
    await call.message.edit_text(
        "üñ•Ô∏è JSON Pro: –∞–ª—å–±–æ–º–Ω–∞—è –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏—è",
        reply_markup=build_home_keyboard()
    )

@on_action(Actions.JSONPRO_GENERATE)
async def handle_jsonpro_generate(call: types.CallbackQuery, cb):
    """JSON Pro –≥–µ–Ω–µ—Ä–∞—Ü–∏—è"""
    await call.message.edit_text(
        "üöÄ JSON Pro –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–∞–ø—É—â–µ–Ω–∞",
        reply_markup=build_home_keyboard()
    )

# === –ü–õ–ê–¢–ï–ñ–ò –ò –¢–ê–†–ò–§–´ ===

@on_action(Actions.PAYMENT_PLANS)
async def handle_payment_plans(call: types.CallbackQuery, cb):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Ç–∞—Ä–∏—Ñ—ã"""
    from app.services.pricing import format_plans_list, get_available_tariffs
    from telegram import InlineKeyboardButton, InlineKeyboardMarkup
    import logging
    log = logging.getLogger(__name__)

    log.info("CALLBACK show_tariffs uid=%s", call.from_user.id)

    # –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è —Å–±–æ—Ä–∫–∞ —Ç–µ–∫—Å—Ç–∞
    try:
        plans_text = format_plans_list()
    except Exception as e:
        log.error("Failed to build plans list: %s", e, exc_info=True)
        plans_text = "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ç–∞—Ä–∏—Ñ–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑."

    # –î–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∏–π –±–µ–π–¥–∂ –≤–µ—Ä—Å–∏–∏ (–æ—Å—Ç–∞–≤–∏—Ç—å, –µ—Å–ª–∏ –≤ –ø—Ä–æ–µ–∫—Ç–µ –µ—Å—Ç—å —ç—Ç–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ)
    try:
        from main import VERSION, PRICING_HASH
        plans_text += f"\n\nüß© version: {VERSION} ‚Ä¢ pricing: {PRICING_HASH}"
    except Exception:
        pass

    # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–ø–∏—Å–∫–∞ (–Ω–µ dict!)
    kb = []
    try:
        tariffs = get_available_tariffs()  # –æ–∂–∏–¥–∞–µ—Ç—Å—è list[dict]
        for info in tariffs:
            key = info["name"]
            title = info["title"]
            price = info["price_rub"]
            kb.append([InlineKeyboardButton(f"{title} ‚Äî {price:,} ‚ÇΩ", callback_data=f"buy_plan_{key}")])
    except Exception as e:
        log.error("Failed to build tariffs keyboard: %s", e, exc_info=True)

    kb.append([InlineKeyboardButton("‚ûï –ü–æ–ø–æ–ª–Ω–∏—Ç—å –º–æ–Ω–µ—Ç—ã", callback_data="show_topup")])
    kb.append([InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_home")])

    await call.message.edit_text(plans_text, parse_mode="HTML", reply_markup=InlineKeyboardMarkup(kb))

# --- LEGACY SHIM: —Å—Ç–∞—Ä—ã–µ –∫–æ–ª–ª–±–µ–∫–∏ –Ω–∞ —Ç–∞—Ä–∏—Ñ—ã ---
@dp.callback_query_handler(lambda c: c.data in ("show_tariffs", "open_pricing"))
async def legacy_show_tariffs(call: types.CallbackQuery):
    """Legacy shim –¥–ª—è —Å—Ç–∞—Ä—ã—Ö –∫–æ–ª–ª–±–µ–∫–æ–≤ —Ç–∞—Ä–∏—Ñ–æ–≤"""
    log.info("CALLBACK legacy_show_tariffs uid=%s data=%s", call.from_user.id, call.data)
    # –∏—Å–ø–æ–ª—å–∑—É–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—É—é —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—é
    try:
        return await handle_payment_plans(call, cb=None)
    except TypeError:
        # –µ—Å–ª–∏ —Å–∏–≥–Ω–∞—Ç—É—Ä–∞ –¥—Ä—É–≥–∞—è, –ø—Ä–æ—Å—Ç–æ –≤—ã–∑–æ–≤–µ–º –±–µ–∑ cb
        return await handle_payment_plans(call, None)

@on_action(Actions.PAYMENT_TOPUP)
async def handle_payment_topup(call: types.CallbackQuery, cb):
    """–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞"""
    from app.services.pricing import format_topup_packs, get_available_topup_packs
    from telegram import InlineKeyboardButton, InlineKeyboardMarkup

    log.info("CALLBACK show_topup uid=%s", call.from_user.id)

    topup_text = "üí∞ –ü–æ–ø–æ–ª–Ω–∏—Ç—å –º–æ–Ω–µ—Ç–∫–∏\n\n"
    topup_text += format_topup_packs()

    kb = []
    topup_packs = get_available_topup_packs()
    for pack in topup_packs:
        kb.append([InlineKeyboardButton(f"{pack['coins']} –º–æ–Ω–µ—Ç ‚Äî {pack['price_rub']} ‚ÇΩ", callback_data=f"buy_topup_{pack['coins']}")])
    kb.append([InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_home")])

    await call.message.edit_text(topup_text, parse_mode="HTML", reply_markup=InlineKeyboardMarkup(kb))

@on_action(Actions.PAYMENT_TERMS)
async def handle_payment_terms(call: types.CallbackQuery, cb):
    """–£—Å–ª–æ–≤–∏—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è"""
    await call.message.edit_text(
        "üìÑ –£—Å–ª–æ–≤–∏—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è",
        reply_markup=build_home_keyboard()
    )

@on_action(Actions.PAYMENT_SUPPORT)
async def handle_payment_support(call: types.CallbackQuery, cb):
    """–ü–æ–¥–¥–µ—Ä–∂–∫–∞"""
    await call.message.edit_text(
        "üí¨ –°–ª—É–∂–±–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏",
        reply_markup=build_home_keyboard()
    )

@on_action(Actions.PAYMENT_CHANGE_PLAN)
async def handle_payment_change_plan(call: types.CallbackQuery, cb):
    """–°–º–µ–Ω–∞ —Ç–∞—Ä–∏—Ñ–∞"""
    await call.message.edit_text(
        "üîÑ –°–º–µ–Ω–∞ —Ç–∞—Ä–∏—Ñ–∞",
        reply_markup=build_home_keyboard()
    )

@on_action(Actions.PAYMENT_SHOW_HISTORY)
async def handle_payment_show_history(call: types.CallbackQuery, cb):
    """–ò—Å—Ç–æ—Ä–∏—è –ø–ª–∞—Ç–µ–∂–µ–π"""
    await call.message.edit_text(
        "üìú –ò—Å—Ç–æ—Ä–∏—è –ø–ª–∞—Ç–µ–∂–µ–π",
        reply_markup=build_home_keyboard()
    )

# === –°–ü–ï–¶–ò–ê–õ–¨–ù–´–ï –î–ï–ô–°–¢–í–ò–Ø ===

@on_action(Actions.SCENE_SAVE)
async def handle_scene_save(call: types.CallbackQuery, cb):
    """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å—Ü–µ–Ω—É"""
    await call.message.edit_text(
        "‚úÖ –°—Ü–µ–Ω–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞",
        reply_markup=build_home_keyboard()
    )

@on_action(Actions.SCENE_CANCEL)
async def handle_scene_cancel(call: types.CallbackQuery, cb):
    """–û—Ç–º–µ–Ω–∏—Ç—å —Å—Ü–µ–Ω—É"""
    await call.message.edit_text(
        "‚ùå –°—Ü–µ–Ω–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞",
        reply_markup=build_home_keyboard()
    )

@on_action(Actions.SKIP_LOW_COINS)
async def handle_skip_low_coins(call: types.CallbackQuery, cb):
    """–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –æ –Ω–∏–∑–∫–æ–º –±–∞–ª–∞–Ω—Å–µ"""
    await handle_nav(call, cb)

@on_action(Actions.VIDEO_RETRY)
async def handle_video_retry(call: types.CallbackQuery, cb):
    """–ü–æ–≤—Ç–æ—Ä–∏—Ç—å –≤–∏–¥–µ–æ"""
    await call.message.edit_text(
        "üîÑ –ü–æ–≤—Ç–æ—Ä—è—é –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –≤–∏–¥–µ–æ...",
        reply_markup=build_home_keyboard()
    )

@on_action(Actions.MEME_AGAIN)
async def handle_meme_again(call: types.CallbackQuery, cb):
    """–ú–µ–º –µ—â–µ —Ä–∞–∑"""
    await call.message.edit_text(
        "üòÑ –ì–µ–Ω–µ—Ä–∏—Ä—É—é –Ω–æ–≤—ã–π –º–µ–º...",
        reply_markup=build_home_keyboard()
    )

@on_action(Actions.MEME_TO_HELPER)
async def handle_meme_to_helper(call: types.CallbackQuery, cb):
    """–ú–µ–º —Å –ø–æ–º–æ—â–Ω–∏–∫–æ–º"""
    await call.message.edit_text(
        "ü§ñ –ú–µ–º —Å –ø–æ–º–æ—â–Ω–∏–∫–æ–º...",
        reply_markup=build_home_keyboard()
    )

# === –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ï –î–ï–ô–°–¢–í–ò–Ø ===

@on_action(Actions.ACTION_ADD_PROMPT)
async def handle_action_add_prompt(call: types.CallbackQuery, cb):
    """–î–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–º–ø—Ç"""
    await call.message.edit_text(
        "‚ûï –î–æ–±–∞–≤—å—Ç–µ –ø—Ä–æ–º–ø—Ç:",
        reply_markup=build_home_keyboard()
    )

@on_action(Actions.ACTION_EDIT_REPLICA)
async def handle_action_edit_replica(call: types.CallbackQuery, cb):
    """–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ä–µ–ø–ª–∏–∫—É"""
    await call.message.edit_text(
        "‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä—É–π—Ç–µ —Ä–µ–ø–ª–∏–∫—É:",
        reply_markup=build_home_keyboard()
    )

@on_action(Actions.ACTION_BACK_FINAL)
async def handle_action_back_final(call: types.CallbackQuery, cb):
    """–ù–∞–∑–∞–¥ –∫ —Ñ–∏–Ω–∞–ª—É"""
    await handle_nav(call, cb)

@on_action(Actions.ACTION_GENERATE_REPLICA)
async def handle_action_generate_replica(call: types.CallbackQuery, cb):
    """–ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Ä–µ–ø–ª–∏–∫—É"""
    await call.message.edit_text(
        "üöÄ –ì–µ–Ω–µ—Ä–∏—Ä—É—é —Ä–µ–ø–ª–∏–∫—É...",
        reply_markup=build_home_keyboard()
    )

@on_action(Actions.ACTION_GENERATE_FINAL)
async def handle_action_generate_final(call: types.CallbackQuery, cb):
    """–ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Ñ–∏–Ω–∞–ª"""
    await call.message.edit_text(
        "üöÄ –ì–µ–Ω–µ—Ä–∏—Ä—É—é —Ñ–∏–Ω–∞–ª...",
        reply_markup=build_home_keyboard()
    )

@on_action(Actions.ACTION_MANUAL_REPLICA)
async def handle_action_manual_replica(call: types.CallbackQuery, cb):
    """–í–≤–µ—Å—Ç–∏ —Ä–µ–ø–ª–∏–∫—É –≤—Ä—É—á–Ω—É—é"""
    await call.message.edit_text(
        "‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ —Ä–µ–ø–ª–∏–∫—É –≤—Ä—É—á–Ω—É—é:",
        reply_markup=build_home_keyboard()
    )

@on_action(Actions.ACTION_CANCEL_MANUAL)
async def handle_action_cancel_manual(call: types.CallbackQuery, cb):
    """–û—Ç–º–µ–Ω–∏—Ç—å —Ä—É—á–Ω–æ–π –≤–≤–æ–¥"""
    await call.message.edit_text(
        "‚ùå –†—É—á–Ω–æ–π –≤–≤–æ–¥ –æ—Ç–º–µ–Ω–µ–Ω",
        reply_markup=build_home_keyboard()
    )

@on_action(Actions.ACTION_VAR_COMPLEX)
async def handle_action_var_complex(call: types.CallbackQuery, cb):
    """–°–ª–æ–∂–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç"""
    await call.message.edit_text(
        "üé≠ –ì–µ–Ω–µ—Ä–∏—Ä—É—é —Å–ª–æ–∂–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç...",
        reply_markup=build_home_keyboard()
    )

@on_action(Actions.ACTION_VAR_SIMPLE)
async def handle_action_var_simple(call: types.CallbackQuery, cb):
    """–ü—Ä–æ—Å—Ç–æ–π –≤–∞—Ä–∏–∞–Ω—Ç"""
    await call.message.edit_text(
        "üòä –ì–µ–Ω–µ—Ä–∏—Ä—É—é –ø—Ä–æ—Å—Ç–æ–π –≤–∞—Ä–∏–∞–Ω—Ç...",
        reply_markup=build_home_keyboard()
    )

@on_action(Actions.ACTION_VAR_AGAIN)
async def handle_action_var_again(call: types.CallbackQuery, cb):
    """–î—Ä—É–≥–æ–π –≤–∞—Ä–∏–∞–Ω—Ç"""
    await call.message.edit_text(
        "üîÑ –ì–µ–Ω–µ—Ä–∏—Ä—É—é –¥—Ä—É–≥–æ–π –≤–∞—Ä–∏–∞–Ω—Ç...",
        reply_markup=build_home_keyboard()
    )

@on_action(Actions.ACTION_PHRASE)
async def handle_action_phrase(call: types.CallbackQuery, cb):
    """–ü—Ä–∏–¥—É–º–∞—Ç—å —Ñ—Ä–∞–∑—É"""
    await call.message.edit_text(
        "üí¨ –ü—Ä–∏–¥—É–º—ã–≤–∞—é —Ñ—Ä–∞–∑—É...",
        reply_markup=build_home_keyboard()
    )

@on_action(Actions.ACTION_AUDIO_YES)
async def handle_action_audio_yes(call: types.CallbackQuery, cb):
    """–° –º—É–∑—ã–∫–æ–π"""
    await call.message.edit_text(
        "üéµ –ì–µ–Ω–µ—Ä–∏—Ä—É—é —Å –º—É–∑—ã–∫–æ–π...",
        reply_markup=build_home_keyboard()
    )

@on_action(Actions.ACTION_AUDIO_NO)
async def handle_action_audio_no(call: types.CallbackQuery, cb):
    """–ë–µ–∑ –º—É–∑—ã–∫–∏"""
    await call.message.edit_text(
        "üîá –ì–µ–Ω–µ—Ä–∏—Ä—É—é –±–µ–∑ –º—É–∑—ã–∫–∏...",
        reply_markup=build_home_keyboard()
    )

@on_action(Actions.ACTION_CANCEL_PROCEDURE)
async def handle_action_cancel_procedure(call: types.CallbackQuery, cb):
    """–û—Ç–º–µ–Ω–∏—Ç—å –ø—Ä–æ—Ü–µ–¥—É—Ä—É"""
    await call.message.edit_text(
        "‚ùå –ü—Ä–æ—Ü–µ–¥—É—Ä–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞",
        reply_markup=build_home_keyboard()
    )

@on_action(Actions.ACTION_EDIT_FROM_LAST)
async def handle_action_edit_from_last(call: types.CallbackQuery, cb):
    """–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ—Å–ª–µ–¥–Ω–µ–µ"""
    await call.message.edit_text(
        "‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä—É—é –ø–æ—Å–ª–µ–¥–Ω–µ–µ...",
        reply_markup=build_home_keyboard()
    )

@on_action(Actions.ACTION_REFINE_PROMPT)
async def handle_action_refine_prompt(call: types.CallbackQuery, cb):
    """–£–ª—É—á—à–∏—Ç—å –ø—Ä–æ–º–ø—Ç"""
    await call.message.edit_text(
        "‚ú® –£–ª—É—á—à–∞—é –ø—Ä–æ–º–ø—Ç...",
        reply_markup=build_home_keyboard()
    )

@on_action(Actions.GENERATE_NOW)
async def handle_generate_now(call: types.CallbackQuery, cb):
    """–ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Å–µ–π—á–∞—Å"""
    await call.message.edit_text(
        "üöÄ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–∞–ø—É—â–µ–Ω–∞...",
        reply_markup=build_home_keyboard()
    )

@on_action(Actions.GO_ORIENTATION)
async def handle_go_orientation(call: types.CallbackQuery, cb):
    """–ü–µ—Ä–µ–π—Ç–∏ –∫ –≤—ã–±–æ—Ä—É –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏–∏"""
    await handle_nav(call, cb)

# === –£–õ–£–ß–®–ï–ù–ò–Ø ===

@on_action(Actions.IMPROVE_KEEP)
async def handle_improve_keep(call: types.CallbackQuery, cb):
    """–û—Å—Ç–∞–≤–∏—Ç—å —É–ª—É—á—à–µ–Ω–∏–µ"""
    await call.message.edit_text(
        "‚úÖ –£–ª—É—á—à–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ",
        reply_markup=build_home_keyboard()
    )

@on_action(Actions.IMPROVE_CANCEL)
async def handle_improve_cancel(call: types.CallbackQuery, cb):
    """–û—Ç–º–µ–Ω–∏—Ç—å —É–ª—É—á—à–µ–Ω–∏–µ"""
    await call.message.edit_text(
        "‚ùå –£–ª—É—á—à–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ",
        reply_markup=build_home_keyboard()
    )

@on_action(Actions.REPORT_IMPROVE_KEEP)
async def handle_report_improve_keep(call: types.CallbackQuery, cb):
    """–û—Å—Ç–∞–≤–∏—Ç—å —É–ª—É—á—à–µ–Ω–∏–µ —Ä–µ–ø–æ—Ä—Ç–∞–∂–∞"""
    await call.message.edit_text(
        "‚úÖ –£–ª—É—á—à–µ–Ω–∏–µ —Ä–µ–ø–æ—Ä—Ç–∞–∂–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ",
        reply_markup=build_home_keyboard()
    )

@on_action(Actions.REPORT_IMPROVE_CANCEL)
async def handle_report_improve_cancel(call: types.CallbackQuery, cb):
    """–û—Ç–º–µ–Ω–∏—Ç—å —É–ª—É—á—à–µ–Ω–∏–µ —Ä–µ–ø–æ—Ä—Ç–∞–∂–∞"""
    await call.message.edit_text(
        "‚ùå –£–ª—É—á—à–µ–Ω–∏–µ —Ä–µ–ø–æ—Ä—Ç–∞–∂–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ",
        reply_markup=build_home_keyboard()
    )

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —Ä–æ—É—Ç–µ—Ä–∞ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –±–æ—Ç–µ
def register_router(dispatcher):
    """–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å —Ä–æ—É—Ç–µ—Ä –≤ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–µ"""
    dispatcher.add_handler(router)
    log.info("Callback router registered")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ö—ç–Ω–¥–ª–µ—Ä–æ–≤
def get_registered_handlers():
    """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ö—ç–Ω–¥–ª–µ—Ä–æ–≤"""
    return list(HANDLERS.keys())
