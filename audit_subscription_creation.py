#!/usr/bin/env python3
"""
–ê–£–î–ò–¢: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–¥–ø–∏—Å–æ–∫
"""

import os
import sys
sys.path.append('.')

from app.db.db_subscriptions import create_subscription, get_user_plan, db_conn

def audit_subscription_creation():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ –ø–æ–¥–ø–∏—Å–æ–∫"""
    print("üîç –ê–£–î–ò–¢: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–¥–ø–∏—Å–æ–∫")
    print("="*60)
    
    # –¢–µ—Å—Ç 1: –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏ lite
    print("\nüß™ –¢–ï–°–¢ 1: –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏ lite")
    try:
        success = create_subscription(
            user_id=5015100178,  # –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
            plan="lite",
            coins=120,
            price_rub=1990,
            duration_days=30,
            payment_id="test-lite-123"
        )
        
        if success:
            print("‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ lite —Å–æ–∑–¥–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤ –ë–î
            plan_data = get_user_plan(5015100178)
            print(f"üìä –î–∞–Ω–Ω—ã–µ –ø–æ–¥–ø–∏—Å–∫–∏: {plan_data}")
        else:
            print("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏ lite")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()
    
    # –¢–µ—Å—Ç 2: –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏ standard
    print("\nüß™ –¢–ï–°–¢ 2: –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏ standard")
    try:
        success = create_subscription(
            user_id=5015100179,
            plan="standard",
            coins=210,
            price_rub=2490,
            duration_days=30,
            payment_id="test-standard-456"
        )
        
        if success:
            print("‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ standard —Å–æ–∑–¥–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
            plan_data = get_user_plan(5015100179)
            print(f"üìä –î–∞–Ω–Ω—ã–µ –ø–æ–¥–ø–∏—Å–∫–∏: {plan_data}")
        else:
            print("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏ standard")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
    
    # –¢–µ—Å—Ç 3: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –ø–æ–¥–ø–∏—Å–∫–∏
    print("\nüß™ –¢–ï–°–¢ 3: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –ø–æ–¥–ø–∏—Å–∫–∏")
    try:
        # –°–æ–∑–¥–∞–µ–º –ø–µ—Ä–≤—É—é –ø–æ–¥–ø–∏—Å–∫—É
        create_subscription(
            user_id=5015100180,
            plan="lite",
            coins=120,
            price_rub=1990,
            duration_days=30,
            payment_id="test-upgrade-1"
        )
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞ –±–æ–ª–µ–µ –≤—ã—Å–æ–∫–∏–π —Ç–∞—Ä–∏—Ñ
        success = create_subscription(
            user_id=5015100180,
            plan="pro",
            coins=440,
            price_rub=4990,
            duration_days=30,
            payment_id="test-upgrade-2"
        )
        
        if success:
            print("‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
            plan_data = get_user_plan(5015100180)
            print(f"üìä –î–∞–Ω–Ω—ã–µ –ø–æ–¥–ø–∏—Å–∫–∏: {plan_data}")
        else:
            print("‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
    
    # –¢–µ—Å—Ç 4: –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
    print("\nüß™ –¢–ï–°–¢ 4: –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö")
    invalid_cases = [
        {"user_id": 0, "plan": "invalid", "coins": -100, "price_rub": -1000},
        {"user_id": -1, "plan": "", "coins": 0, "price_rub": 0},
        {"user_id": None, "plan": None, "coins": None, "price_rub": None},
    ]
    
    for i, case in enumerate(invalid_cases, 1):
        try:
            success = create_subscription(
                user_id=case["user_id"],
                plan=case["plan"],
                coins=case["coins"],
                price_rub=case["price_rub"],
                duration_days=30,
                payment_id=f"test-invalid-{i}"
            )
            if not success:
                print(f"‚úÖ –ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ {i} –ø—Ä–∞–≤–∏–ª—å–Ω–æ –æ—Ç–∫–ª–æ–Ω–µ–Ω—ã")
            else:
                print(f"‚ùå –ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ {i} –Ω–µ –¥–æ–ª–∂–Ω—ã —Å–æ–∑–¥–∞–≤–∞—Ç—å –ø–æ–¥–ø–∏—Å–∫—É")
        except Exception as e:
            print(f"‚úÖ –ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ {i} –ø—Ä–∞–≤–∏–ª—å–Ω–æ –æ—Ç–∫–ª–æ–Ω–µ–Ω—ã: {e}")
    
    # –¢–µ—Å—Ç 5: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
    print("\nüß™ –¢–ï–°–¢ 5: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π")
    try:
        with db_conn() as conn:
            cur = conn.cursor()
            is_postgres = hasattr(conn, 'cursor') and 'psycopg2' in str(type(conn))
            
            if is_postgres:
                cur.execute("SELECT COUNT(*) FROM subscriptions WHERE user_id IN (5015100178, 5015100179, 5015100180)")
            else:
                cur.execute("SELECT COUNT(*) FROM subscriptions WHERE user_id IN (5015100178, 5015100179, 5015100180)")
            
            count = cur.fetchone()[0]
            print(f"üìä –°–æ–∑–¥–∞–Ω–æ –ø–æ–¥–ø–∏—Å–æ–∫: {count}")
            
            if is_postgres:
                cur.execute("SELECT user_id, plan, coins, price_rub FROM subscriptions WHERE user_id IN (5015100178, 5015100179, 5015100180) ORDER BY user_id")
            else:
                cur.execute("SELECT user_id, plan, coins, price_rub FROM subscriptions WHERE user_id IN (5015100178, 5015100179, 5015100180) ORDER BY user_id")
            
            subscriptions = cur.fetchall()
            print("üìã –°–ø–∏—Å–æ–∫ –ø–æ–¥–ø–∏—Å–æ–∫:")
            for sub in subscriptions:
                print(f"  - –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {sub[0]}: {sub[1]} –ø–ª–∞–Ω, {sub[2]} –º–æ–Ω–µ—Ç, {sub[3]} ‚ÇΩ")
                
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: {e}")

if __name__ == "__main__":
    audit_subscription_creation()
    print("\n‚úÖ –ê–£–î–ò–¢ –°–û–ó–î–ê–ù–ò–Ø –ü–û–î–ü–ò–°–û–ö –ó–ê–í–ï–†–®–ï–ù")
