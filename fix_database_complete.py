#!/usr/bin/env python3
"""
–ü–æ–ª–Ω–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å—Ö–µ–º—ã –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö PostgreSQL
–ò—Å–ø—Ä–∞–≤–ª—è–µ—Ç —Ç–∞–±–ª–∏—Ü—ã users –∏ subscriptions –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π —Ä–∞–±–æ—Ç—ã —Å YooKassa webhook
"""

import os
import sys
import psycopg2
from urllib.parse import urlparse

def fix_database_complete():
    print("üîß –ü–û–õ–ù–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –°–•–ï–ú–´ –ë–ê–ó–´ –î–ê–ù–ù–´–•")
    print("=" * 60)
    
    # –ü–æ–ª—É—á–∞–µ–º URL –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    database_url = os.getenv("DATABASE_URL")
    if not database_url:
        print("‚ùå DATABASE_URL –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
        return False
    
    print(f"üìä –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...")
    
    try:
        # –ü–∞—Ä—Å–∏–º URL –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        parsed_url = urlparse(database_url)
        
        # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ PostgreSQL
        conn = psycopg2.connect(
            host=parsed_url.hostname,
            port=parsed_url.port,
            database=parsed_url.path[1:],
            user=parsed_url.username,
            password=parsed_url.password
        )
        
        cur = conn.cursor()
        print("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ")
        
        # ===== –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –¢–ê–ë–õ–ò–¶–´ USERS =====
        print("\nüîß –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –¢–ê–ë–õ–ò–¶–´ USERS")
        print("-" * 40)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–∞–±–ª–∏—Ü—ã users
        cur.execute("""
            SELECT column_name, data_type, is_nullable, column_default
            FROM information_schema.columns 
            WHERE table_name = 'users'
            ORDER BY ordinal_position
        """)
        
        users_columns = cur.fetchall()
        print("üìä –¢–µ–∫—É—â–∏–µ –∫–æ–ª–æ–Ω–∫–∏ –≤ —Ç–∞–±–ª–∏—Ü–µ users:")
        for col in users_columns:
            print(f"  - {col[0]} ({col[1]}) - nullable: {col[2]}, default: {col[3]}")
        
        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –∫–æ–ª–æ–Ω–∫–∏ –≤ users
        users_alter_commands = [
            "ALTER TABLE users ADD COLUMN IF NOT EXISTS is_active BOOLEAN DEFAULT TRUE",
            "ALTER TABLE users ADD COLUMN IF NOT EXISTS coins INTEGER DEFAULT 0",
            "ALTER TABLE users ADD COLUMN IF NOT EXISTS plan TEXT",
            "ALTER TABLE users ADD COLUMN IF NOT EXISTS plan_expiry TIMESTAMP",
            "ALTER TABLE users ADD COLUMN IF NOT EXISTS auto_renew BOOLEAN DEFAULT TRUE",
            "ALTER TABLE users ADD COLUMN IF NOT EXISTS created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP",
            "ALTER TABLE users ADD COLUMN IF NOT EXISTS updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP"
        ]
        
        for cmd in users_alter_commands:
            try:
                print(f"üîß –í—ã–ø–æ–ª–Ω—è–µ–º: {cmd}")
                cur.execute(cmd)
                conn.commit()
                print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ: {cmd}")
            except Exception as e:
                if "already exists" in str(e).lower():
                    print(f"‚ÑπÔ∏è –ö–æ–ª–æ–Ω–∫–∞ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {cmd}")
                else:
                    print(f"‚ùå –û—à–∏–±–∫–∞: {cmd} - {e}")
        
        # ===== –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –¢–ê–ë–õ–ò–¶–´ SUBSCRIPTIONS =====
        print("\nüîß –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –¢–ê–ë–õ–ò–¶–´ SUBSCRIPTIONS")
        print("-" * 40)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–∞–±–ª–∏—Ü—ã subscriptions
        cur.execute("""
            SELECT column_name, data_type, is_nullable, column_default
            FROM information_schema.columns 
            WHERE table_name = 'subscriptions'
            ORDER BY ordinal_position
        """)
        
        subscriptions_columns = cur.fetchall()
        print("üìä –¢–µ–∫—É—â–∏–µ –∫–æ–ª–æ–Ω–∫–∏ –≤ —Ç–∞–±–ª–∏—Ü–µ subscriptions:")
        for col in subscriptions_columns:
            print(f"  - {col[0]} ({col[1]}) - nullable: {col[2]}, default: {col[3]}")
        
        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –∫–æ–ª–æ–Ω–∫–∏ –≤ subscriptions
        subscriptions_alter_commands = [
            "ALTER TABLE subscriptions ADD COLUMN IF NOT EXISTS id SERIAL PRIMARY KEY",
            "ALTER TABLE subscriptions ADD COLUMN IF NOT EXISTS user_id BIGINT NOT NULL",
            "ALTER TABLE subscriptions ADD COLUMN IF NOT EXISTS plan TEXT NOT NULL",
            "ALTER TABLE subscriptions ADD COLUMN IF NOT EXISTS coins INTEGER DEFAULT 0",
            "ALTER TABLE subscriptions ADD COLUMN IF NOT EXISTS price_rub INTEGER NOT NULL",
            "ALTER TABLE subscriptions ADD COLUMN IF NOT EXISTS start_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP",
            "ALTER TABLE subscriptions ADD COLUMN IF NOT EXISTS end_date TIMESTAMP NOT NULL",
            "ALTER TABLE subscriptions ADD COLUMN IF NOT EXISTS is_active BOOLEAN DEFAULT TRUE",
            "ALTER TABLE subscriptions ADD COLUMN IF NOT EXISTS payment_id TEXT",
            "ALTER TABLE subscriptions ADD COLUMN IF NOT EXISTS created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP"
        ]
        
        for cmd in subscriptions_alter_commands:
            try:
                print(f"üîß –í—ã–ø–æ–ª–Ω—è–µ–º: {cmd}")
                cur.execute(cmd)
                conn.commit()
                print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ: {cmd}")
            except Exception as e:
                if "already exists" in str(e).lower():
                    print(f"‚ÑπÔ∏è –ö–æ–ª–æ–Ω–∫–∞ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {cmd}")
                else:
                    print(f"‚ùå –û—à–∏–±–∫–∞: {cmd} - {e}")
        
        # ===== –ü–†–û–í–ï–†–ö–ê –§–ò–ù–ê–õ–¨–ù–û–ô –°–¢–†–£–ö–¢–£–†–´ =====
        print("\nüîç –ü–†–û–í–ï–†–ö–ê –§–ò–ù–ê–õ–¨–ù–û–ô –°–¢–†–£–ö–¢–£–†–´")
        print("-" * 40)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∞–±–ª–∏—Ü—É users
        cur.execute("""
            SELECT column_name, data_type, is_nullable, column_default
            FROM information_schema.columns 
            WHERE table_name = 'users'
            ORDER BY ordinal_position
        """)
        
        final_users_columns = cur.fetchall()
        print("üìä –§–∏–Ω–∞–ª—å–Ω—ã–µ –∫–æ–ª–æ–Ω–∫–∏ –≤ —Ç–∞–±–ª–∏—Ü–µ users:")
        for col in final_users_columns:
            print(f"  - {col[0]} ({col[1]}) - nullable: {col[2]}, default: {col[3]}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∞–±–ª–∏—Ü—É subscriptions
        cur.execute("""
            SELECT column_name, data_type, is_nullable, column_default
            FROM information_schema.columns 
            WHERE table_name = 'subscriptions'
            ORDER BY ordinal_position
        """)
        
        final_subscriptions_columns = cur.fetchall()
        print("\nüìä –§–∏–Ω–∞–ª—å–Ω—ã–µ –∫–æ–ª–æ–Ω–∫–∏ –≤ —Ç–∞–±–ª–∏—Ü–µ subscriptions:")
        for col in final_subscriptions_columns:
            print(f"  - {col[0]} ({col[1]}) - nullable: {col[2]}, default: {col[3]}")
        
        # ===== –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï =====
        print("\nüß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï")
        print("-" * 40)
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º INSERT –≤ subscriptions
        try:
            print("üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º INSERT –≤ —Ç–∞–±–ª–∏—Ü—É subscriptions...")
            cur.execute("""
                INSERT INTO subscriptions (user_id, plan, coins, price_rub, start_date, end_date, is_active, payment_id, created_at)
                VALUES (%s, %s, %s, %s, %s, %s, %s, %s, %s)
            """, (999999999, 'test', 0, 0, '2025-01-01 00:00:00', '2025-01-02 00:00:00', True, 'test-payment', '2025-01-01 00:00:00'))
            
            # –û—Ç–∫–∞—Ç—ã–≤–∞–µ–º —Ç–µ—Å—Ç–æ–≤—É—é –∑–∞–ø–∏—Å—å
            cur.execute("DELETE FROM subscriptions WHERE user_id = 999999999")
            conn.commit()
            print("‚úÖ INSERT –≤ subscriptions —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ INSERT –≤ subscriptions: {e}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π
        cur.execute("SELECT COUNT(*) FROM users")
        users_count = cur.fetchone()[0]
        print(f"üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {users_count}")
        
        cur.execute("SELECT COUNT(*) FROM subscriptions")
        subscriptions_count = cur.fetchone()[0]
        print(f"üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–¥–ø–∏—Å–æ–∫: {subscriptions_count}")
        
        conn.close()
        print("\n‚úÖ –°–•–ï–ú–ê –ë–ê–ó–´ –î–ê–ù–ù–´–• –ü–û–õ–ù–û–°–¢–¨–Æ –ò–°–ü–†–ê–í–õ–ï–ù–ê!")
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö: {e}")
        import traceback
        traceback.print_exc()
        return False

if __name__ == "__main__":
    success = fix_database_complete()
    if success:
        print("\nüéØ –ë–ê–ó–ê –î–ê–ù–ù–´–• –ì–û–¢–û–í–ê –ö –†–ê–ë–û–¢–ï!")
        print("‚úÖ –¢–∞–±–ª–∏—Ü–∞ users –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∞")
        print("‚úÖ –¢–∞–±–ª–∏—Ü–∞ subscriptions –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∞")
        print("‚úÖ YooKassa webhook –¥–æ–ª–∂–µ–Ω —Ä–∞–±–æ—Ç–∞—Ç—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        print("‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø–æ–¥–ø–∏—Å–∫–µ –¥–æ–ª–∂–Ω—ã –ø—Ä–∏—Ö–æ–¥–∏—Ç—å")
        print("\nüöÄ –°–õ–ï–î–£–Æ–©–ò–ï –®–ê–ì–ò:")
        print("1. –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ Railway –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä")
        print("2. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –Ω–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –æ—à–∏–±–æ–∫")
        print("3. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∫—É–ø–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É —á–µ—Ä–µ–∑ –±–æ—Ç–∞")
    else:
        print("\n‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏—Å–ø—Ä–∞–≤–∏—Ç—å —Å—Ö–µ–º—É –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö")
        sys.exit(1)
