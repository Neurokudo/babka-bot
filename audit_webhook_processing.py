#!/usr/bin/env python3
"""
–ê–£–î–ò–¢: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ webhook –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–ª–∞—Ç–µ–∂–µ–π
"""

import os
import sys
sys.path.append('.')

from app.services.yookassa_service import process_payment_webhook, process_successful_payment

def audit_webhook_processing():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å webhook –æ–±—Ä–∞–±–æ—Ç–∫—É –ø–ª–∞—Ç–µ–∂–µ–π"""
    print("üîç –ê–£–î–ò–¢: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ webhook –æ–±—Ä–∞–±–æ—Ç–∫–∏")
    print("="*60)
    
    # –¢–µ—Å—Ç 1: –£—Å–ø–µ—à–Ω—ã–π –ø–ª–∞—Ç–µ–∂ –∑–∞ –ø–æ–¥–ø–∏—Å–∫—É
    print("\nüß™ –¢–ï–°–¢ 1: –£—Å–ø–µ—à–Ω—ã–π –ø–ª–∞—Ç–µ–∂ –∑–∞ –ø–æ–¥–ø–∏—Å–∫—É")
    webhook_data = {
        "event": "payment.succeeded",
        "object": {
            "id": "test-payment-123",
            "status": "succeeded",
            "amount": {"value": "1990.00", "currency": "RUB"},
            "description": "–ü–æ–∫—É–ø–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ 'LITE'",
            "metadata": {
                "user_id": "5015100177",
                "plan": "lite",
                "coins": "120",
                "price": "1990",
                "type": "plan"
            }
        }
    }
    
    try:
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º webhook
        payment_data = process_payment_webhook(webhook_data)
        if payment_data:
            print(f"‚úÖ Webhook –æ–±—Ä–∞–±–æ—Ç–∞–Ω: {payment_data}")
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —É—Å–ø–µ—à–Ω—ã–π –ø–ª–∞—Ç–µ–∂
            success = process_successful_payment(payment_data)
            print(f"‚úÖ –ü–ª–∞—Ç–µ–∂ –æ–±—Ä–∞–±–æ—Ç–∞–Ω: {success}")
        else:
            print("‚ùå Webhook –Ω–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ webhook: {e}")
        import traceback
        traceback.print_exc()
    
    # –¢–µ—Å—Ç 2: –ü–ª–∞—Ç–µ–∂ –∑–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ
    print("\nüß™ –¢–ï–°–¢ 2: –ü–ª–∞—Ç–µ–∂ –∑–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ")
    webhook_data = {
        "event": "payment.succeeded",
        "object": {
            "id": "test-topup-456",
            "status": "succeeded",
            "amount": {"value": "500.00", "currency": "RUB"},
            "description": "–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ 50 –º–æ–Ω–µ—Ç",
            "metadata": {
                "user_id": "5015100177",
                "coins": "50",
                "price": "500",
                "type": "topup"
            }
        }
    }
    
    try:
        payment_data = process_payment_webhook(webhook_data)
        if payment_data:
            print(f"‚úÖ Webhook –æ–±—Ä–∞–±–æ—Ç–∞–Ω: {payment_data}")
            success = process_successful_payment(payment_data)
            print(f"‚úÖ –ü–ª–∞—Ç–µ–∂ –æ–±—Ä–∞–±–æ—Ç–∞–Ω: {success}")
        else:
            print("‚ùå Webhook –Ω–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ webhook: {e}")
    
    # –¢–µ—Å—Ç 3: –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Å–æ–±—ã—Ç–∏—è
    print("\nüß™ –¢–ï–°–¢ 3: –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Å–æ–±—ã—Ç–∏—è")
    unsupported_events = [
        {"event": "payment.canceled", "object": {"id": "test-1"}},
        {"event": "payment.waiting_for_capture", "object": {"id": "test-2"}},
        {"event": "refund.succeeded", "object": {"id": "test-3"}},
    ]
    
    for event_data in unsupported_events:
        try:
            result = process_payment_webhook(event_data)
            if result is None:
                print(f"‚úÖ –°–æ–±—ã—Ç–∏–µ {event_data['event']} –ø—Ä–∞–≤–∏–ª—å–Ω–æ –ø—Ä–æ–∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω–æ")
            else:
                print(f"‚ùå –°–æ–±—ã—Ç–∏–µ {event_data['event']} –Ω–µ –¥–æ–ª–∂–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å—Å—è")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ {event_data['event']}: {e}")
    
    # –¢–µ—Å—Ç 4: –ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    print("\nüß™ –¢–ï–°–¢ 4: –ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ")
    invalid_data = [
        {},  # –ü—É—Å—Ç—ã–µ –¥–∞–Ω–Ω—ã–µ
        {"event": "payment.succeeded"},  # –ù–µ—Ç object
        {"event": "payment.succeeded", "object": {}},  # –ü—É—Å—Ç–æ–π object
        {"event": "payment.succeeded", "object": {"id": "test", "metadata": {}}},  # –ù–µ—Ç user_id
    ]
    
    for i, invalid in enumerate(invalid_data, 1):
        try:
            result = process_payment_webhook(invalid)
            if result is None:
                print(f"‚úÖ –ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ {i} –ø—Ä–∞–≤–∏–ª—å–Ω–æ –ø—Ä–æ–∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω—ã")
            else:
                print(f"‚ùå –ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ {i} –Ω–µ –¥–æ–ª–∂–Ω—ã –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å—Å—è")
        except Exception as e:
            print(f"‚úÖ –ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ {i} –ø—Ä–∞–≤–∏–ª—å–Ω–æ –æ—Ç–∫–ª–æ–Ω–µ–Ω—ã: {e}")

if __name__ == "__main__":
    audit_webhook_processing()
    print("\n‚úÖ –ê–£–î–ò–¢ WEBHOOK –ó–ê–í–ï–†–®–ï–ù")
