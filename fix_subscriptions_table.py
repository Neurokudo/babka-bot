#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ç–∞–±–ª–∏—Ü—ã subscriptions –≤ PostgreSQL
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∏ –¥–æ–±–∞–≤–ª—è–µ—Ç –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –ø–æ–ª—è
"""

import os
import sys
import psycopg2
from urllib.parse import urlparse

def fix_subscriptions_table():
    print("üîß –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –°–¢–†–£–ö–¢–£–†–´ –¢–ê–ë–õ–ò–¶–´ SUBSCRIPTIONS")
    print("=" * 60)
    
    # –ü–æ–ª—É—á–∞–µ–º URL –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    database_url = os.getenv("DATABASE_URL")
    if not database_url:
        print("‚ùå DATABASE_URL –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
        return False
    
    print(f"üìä –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...")
    
    try:
        # –ü–∞—Ä—Å–∏–º URL –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        parsed_url = urlparse(database_url)
        
        # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ PostgreSQL
        conn = psycopg2.connect(
            host=parsed_url.hostname,
            port=parsed_url.port,
            database=parsed_url.path[1:],
            user=parsed_url.username,
            password=parsed_url.password
        )
        
        cur = conn.cursor()
        print("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ")
        
        # –®–∞–≥ 1: –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–∞–±–ª–∏—Ü—ã subscriptions
        print("\nüîç –®–ê–ì 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ç–∞–±–ª–∏—Ü—ã subscriptions")
        cur.execute("""
            SELECT column_name, data_type, is_nullable, column_default
            FROM information_schema.columns 
            WHERE table_name = 'subscriptions'
            ORDER BY ordinal_position
        """)
        
        current_columns = cur.fetchall()
        print("üìä –¢–µ–∫—É—â–∏–µ –∫–æ–ª–æ–Ω–∫–∏ –≤ —Ç–∞–±–ª–∏—Ü–µ subscriptions:")
        for col in current_columns:
            print(f"  - {col[0]} ({col[1]}) - nullable: {col[2]}, default: {col[3]}")
        
        # –®–∞–≥ 2: –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ–∂–∏–¥–∞–µ–º—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É
        expected_columns = {
            'id': 'integer',
            'user_id': 'bigint',
            'plan': 'text',
            'coins': 'integer',
            'price_rub': 'integer',
            'start_date': 'timestamp without time zone',
            'end_date': 'timestamp without time zone',
            'is_active': 'boolean',
            'payment_id': 'text',
            'created_at': 'timestamp without time zone'
        }
        
        print("\nüìã –®–ê–ì 2: –û–∂–∏–¥–∞–µ–º–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ç–∞–±–ª–∏—Ü—ã subscriptions")
        for col_name, col_type in expected_columns.items():
            print(f"  - {col_name} ({col_type})")
        
        # –®–∞–≥ 3: –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∫–∞–∫–∏–µ –∫–æ–ª–æ–Ω–∫–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç
        print("\nüîç –®–ê–ì 3: –ü–æ–∏—Å–∫ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏—Ö –∫–æ–ª–æ–Ω–æ–∫")
        current_column_names = [col[0] for col in current_columns]
        missing_columns = []
        
        for col_name in expected_columns.keys():
            if col_name not in current_column_names:
                missing_columns.append(col_name)
                print(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∫–æ–ª–æ–Ω–∫–∞: {col_name}")
            else:
                print(f"‚úÖ –ö–æ–ª–æ–Ω–∫–∞ {col_name} —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
        
        # –®–∞–≥ 4: –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ –∫–æ–ª–æ–Ω–∫–∏
        if missing_columns:
            print(f"\nüîß –®–ê–ì 4: –î–æ–±–∞–≤–ª–µ–Ω–∏–µ {len(missing_columns)} –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏—Ö –∫–æ–ª–æ–Ω–æ–∫")
            
            # SQL –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–æ–ª–æ–Ω–æ–∫
            alter_commands = []
            
            if 'id' in missing_columns:
                alter_commands.append("ALTER TABLE subscriptions ADD COLUMN id SERIAL PRIMARY KEY")
            
            if 'user_id' in missing_columns:
                alter_commands.append("ALTER TABLE subscriptions ADD COLUMN user_id BIGINT NOT NULL")
            
            if 'plan' in missing_columns:
                alter_commands.append("ALTER TABLE subscriptions ADD COLUMN plan TEXT NOT NULL")
            
            if 'coins' in missing_columns:
                alter_commands.append("ALTER TABLE subscriptions ADD COLUMN coins INTEGER DEFAULT 0")
            
            if 'price_rub' in missing_columns:
                alter_commands.append("ALTER TABLE subscriptions ADD COLUMN price_rub INTEGER NOT NULL")
            
            if 'start_date' in missing_columns:
                alter_commands.append("ALTER TABLE subscriptions ADD COLUMN start_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP")
            
            if 'end_date' in missing_columns:
                alter_commands.append("ALTER TABLE subscriptions ADD COLUMN end_date TIMESTAMP NOT NULL")
            
            if 'is_active' in missing_columns:
                alter_commands.append("ALTER TABLE subscriptions ADD COLUMN is_active BOOLEAN DEFAULT TRUE")
            
            if 'payment_id' in missing_columns:
                alter_commands.append("ALTER TABLE subscriptions ADD COLUMN payment_id TEXT")
            
            if 'created_at' in missing_columns:
                alter_commands.append("ALTER TABLE subscriptions ADD COLUMN created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP")
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º –∫–æ–º–∞–Ω–¥—ã
            for cmd in alter_commands:
                try:
                    print(f"üîß –í—ã–ø–æ–ª–Ω—è–µ–º: {cmd}")
                    cur.execute(cmd)
                    conn.commit()
                    print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ: {cmd}")
                except Exception as e:
                    if "already exists" in str(e).lower() or "duplicate" in str(e).lower():
                        print(f"‚ÑπÔ∏è –ö–æ–ª–æ–Ω–∫–∞ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {cmd}")
                    else:
                        print(f"‚ùå –û—à–∏–±–∫–∞: {cmd} - {e}")
        else:
            print("\n‚úÖ –í—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∫–æ–ª–æ–Ω–∫–∏ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç")
        
        # –®–∞–≥ 5: –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É
        print("\nüîç –®–ê–ì 5: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∏–Ω–∞–ª—å–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ç–∞–±–ª–∏—Ü—ã subscriptions")
        cur.execute("""
            SELECT column_name, data_type, is_nullable, column_default
            FROM information_schema.columns 
            WHERE table_name = 'subscriptions'
            ORDER BY ordinal_position
        """)
        
        final_columns = cur.fetchall()
        print("üìä –§–∏–Ω–∞–ª—å–Ω—ã–µ –∫–æ–ª–æ–Ω–∫–∏ –≤ —Ç–∞–±–ª–∏—Ü–µ subscriptions:")
        for col in final_columns:
            print(f"  - {col[0]} ({col[1]}) - nullable: {col[2]}, default: {col[3]}")
        
        # –®–∞–≥ 6: –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Ç–∞–±–ª–∏—Ü–µ
        print("\nüîç –®–ê–ì 6: –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–Ω–Ω—ã—Ö –≤ —Ç–∞–±–ª–∏—Ü–µ subscriptions")
        cur.execute("SELECT COUNT(*) FROM subscriptions")
        sub_count = cur.fetchone()[0]
        print(f"üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π –≤ subscriptions: {sub_count}")
        
        if sub_count > 0:
            cur.execute("SELECT * FROM subscriptions ORDER BY created_at DESC LIMIT 3")
            latest_subs = cur.fetchall()
            print("üìä –ü–æ—Å–ª–µ–¥–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏:")
            for i, row in enumerate(latest_subs, 1):
                print(f"  {i}. {row}")
        
        # –®–∞–≥ 7: –¢–µ—Å—Ç–∏—Ä—É–µ–º INSERT –∑–∞–ø—Ä–æ—Å
        print("\nüß™ –®–ê–ì 7: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ INSERT –∑–∞–ø—Ä–æ—Å–∞")
        try:
            # –¢–µ—Å—Ç–æ–≤—ã–π INSERT (–Ω–µ —Å–æ—Ö—Ä–∞–Ω—è–µ–º)
            cur.execute("""
                INSERT INTO subscriptions (user_id, plan, coins, price_rub, start_date, end_date, is_active, payment_id, created_at)
                VALUES (%s, %s, %s, %s, %s, %s, %s, %s, %s)
            """, (999999999, 'test', 0, 0, '2025-01-01 00:00:00', '2025-01-02 00:00:00', True, 'test-payment', '2025-01-01 00:00:00'))
            
            # –û—Ç–∫–∞—Ç—ã–≤–∞–µ–º —Ç–µ—Å—Ç–æ–≤—É—é –∑–∞–ø–∏—Å—å
            cur.execute("DELETE FROM subscriptions WHERE user_id = 999999999")
            conn.commit()
            print("‚úÖ INSERT –∑–∞–ø—Ä–æ—Å —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ INSERT: {e}")
        
        conn.close()
        print("\n‚úÖ –°–¢–†–£–ö–¢–£–†–ê –¢–ê–ë–õ–ò–¶–´ SUBSCRIPTIONS –ò–°–ü–†–ê–í–õ–ï–ù–ê –£–°–ü–ï–®–ù–û!")
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö: {e}")
        import traceback
        traceback.print_exc()
        return False

if __name__ == "__main__":
    success = fix_subscriptions_table()
    if success:
        print("\nüéØ –¢–ê–ë–õ–ò–¶–ê SUBSCRIPTIONS –ì–û–¢–û–í–ê!")
        print("‚úÖ –í—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∫–æ–ª–æ–Ω–∫–∏ –¥–æ–±–∞–≤–ª–µ–Ω—ã")
        print("‚úÖ INSERT –∑–∞–ø—Ä–æ—Å—ã –¥–æ–ª–∂–Ω—ã —Ä–∞–±–æ—Ç–∞—Ç—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        print("‚úÖ YooKassa webhook –¥–æ–ª–∂–µ–Ω —Å–æ–∑–¥–∞–≤–∞—Ç—å –ø–æ–¥–ø–∏—Å–∫–∏ –±–µ–∑ –æ—à–∏–±–æ–∫")
    else:
        print("\n‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏—Å–ø—Ä–∞–≤–∏—Ç—å —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–∞–±–ª–∏—Ü—ã subscriptions")
        sys.exit(1)
