#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏
"""

import sys
import os
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from app.db.db_subscriptions import db_conn
from app.services.billing import check_subscription
from app.services.pricing import get_available_tariffs

def test_subscription_fix():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—É—é –ø–æ–¥–ø–∏—Å–∫—É"""
    user_id = 5015100177
    
    print("üîç –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ò–°–ü–†–ê–í–õ–ï–ù–ù–û–ô –ü–û–î–ü–ò–°–ö–ò")
    print("=" * 50)
    
    # 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –±–∞–∑–µ
    print("\n1Ô∏è‚É£ –ü–†–û–í–ï–†–ö–ê –ë–ê–ó–´ –î–ê–ù–ù–´–•:")
    with db_conn() as conn:
        cur = conn.cursor()
        cur.execute('SELECT plan, plan_expiry, coins, auto_renew FROM users WHERE user_id = ?', (user_id,))
        user_data = cur.fetchone()
        
        if user_data:
            plan, expiry, coins, auto_renew = user_data
            print(f"   ‚úÖ Plan: {plan}")
            print(f"   ‚úÖ Expiry: {expiry}")
            print(f"   ‚úÖ Coins: {coins}")
            print(f"   ‚úÖ Auto_renew: {auto_renew}")
        else:
            print("   ‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ!")
            return
    
    # 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é check_subscription
    print("\n2Ô∏è‚É£ –ü–†–û–í–ï–†–ö–ê –§–£–ù–ö–¶–ò–ò check_subscription:")
    subscription_data = check_subscription(user_id)
    print(f"   ‚úÖ User ID: {subscription_data.get('user_id')}")
    print(f"   ‚úÖ Plan: {subscription_data.get('plan')}")
    print(f"   ‚úÖ Coins: {subscription_data.get('coins')}")
    print(f"   ‚úÖ Is Active: {subscription_data.get('is_active')}")
    print(f"   ‚úÖ Source: {subscription_data.get('source')}")
    
    # 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∞—Ä–∏—Ñ—ã
    print("\n3Ô∏è‚É£ –ü–†–û–í–ï–†–ö–ê –¢–ê–†–ò–§–û–í:")
    tariffs = get_available_tariffs()
    pro_tariff = next((t for t in tariffs if t["name"] == "pro"), None)
    
    if pro_tariff:
        print(f"   ‚úÖ Pro —Ç–∞—Ä–∏—Ñ –Ω–∞–π–¥–µ–Ω:")
        print(f"      - –ù–∞–∑–≤–∞–Ω–∏–µ: {pro_tariff['title']}")
        print(f"      - –¶–µ–Ω–∞: {pro_tariff['price_rub']} RUB")
        print(f"      - –ú–æ–Ω–µ—Ç—ã: {pro_tariff['coins']}")
    else:
        print("   ‚ùå Pro —Ç–∞—Ä–∏—Ñ –Ω–µ –Ω–∞–π–¥–µ–Ω!")
    
    # 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–¥–ø–∏—Å–∫–∏
    print("\n4Ô∏è‚É£ –ê–ö–¢–ò–í–ù–´–ï –ü–û–î–ü–ò–°–ö–ò:")
    with db_conn() as conn:
        cur = conn.cursor()
        cur.execute('SELECT plan, coins, price_rub, start_date, end_date, payment_id FROM subscriptions WHERE user_id = ? AND is_active = 1', (user_id,))
        active_subs = cur.fetchall()
        
        if active_subs:
            for sub in active_subs:
                plan, coins, price, start, end, payment = sub
                print(f"   ‚úÖ Plan: {plan}, Coins: {coins}, Price: {price} RUB")
                print(f"      Start: {start}, End: {end}")
                print(f"      Payment ID: {payment}")
        else:
            print("   ‚ùå –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!")
    
    # 5. –ò—Ç–æ–≥–æ–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    print("\n5Ô∏è‚É£ –ò–¢–û–ì–û–í–´–ô –†–ï–ó–£–õ–¨–¢–ê–¢:")
    if subscription_data.get('plan') == 'pro' and subscription_data.get('coins') == 440:
        print("   üéâ –£–°–ü–ï–•! –ü–æ–¥–ø–∏—Å–∫–∞ Pro –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!")
        print("   ‚úÖ –¢–∞—Ä–∏—Ñ: Pro")
        print("   ‚úÖ –ú–æ–Ω–µ—Ç—ã: 440")
        print("   ‚úÖ –°—Ç–∞—Ç—É—Å: –ê–∫—Ç–∏–≤–Ω–∞")
    else:
        print("   ‚ùå –û–®–ò–ë–ö–ê! –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!")
        print(f"   –¢–µ–∫—É—â–∏–π –ø–ª–∞–Ω: {subscription_data.get('plan')}")
        print(f"   –¢–µ–∫—É—â–∏–µ –º–æ–Ω–µ—Ç—ã: {subscription_data.get('coins')}")

if __name__ == "__main__":
    test_subscription_fix()
