"""
Babka Bot - Telegram –±–æ—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ —Å AI
–ú–∏–Ω–∏–º–∞–ª—å–Ω–æ —Ä–∞–±–æ—á–∞—è –≤–µ—Ä—Å–∏—è —Å –Ω–æ–≤–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–æ–π
"""

import os
import asyncio
import logging
from typing import Optional

from dotenv import load_dotenv
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import (
    Application, CommandHandler, CallbackQueryHandler,
    MessageHandler, ContextTypes, filters
)

# –ò–º–ø–æ—Ä—Ç—ã –∏–∑ –Ω–æ–≤–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã
from app.utils.logging import setup_logging
from app.services.pricing import coins_for_tariff, price_rub_for_tariff, feature_cost_coins
from app.services.wallet import WalletService
from app.db.queries import db_manager

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logger = setup_logging()
log = logging.getLogger("babka_bot")

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

BOT_TOKEN = os.getenv("TELEGRAM_TOKEN") or os.getenv("BOT_TOKEN")
if not BOT_TOKEN:
    raise RuntimeError("TELEGRAM_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")

# –ì–ª–æ–±–∞–ª—å–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ)
user_wallets = {}

def get_user_wallet(user_id: int) -> WalletService:
    """–ü–æ–ª—É—á–∏—Ç—å –∏–ª–∏ —Å–æ–∑–¥–∞—Ç—å –∫–æ—à–µ–ª–µ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    if user_id not in user_wallets:
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ë–î –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ
        user = db_manager.get_user(user_id)
        if not user:
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –±–∞–∑–æ–≤—ã–º –±–∞–ª–∞–Ω—Å–æ–º
            user = db_manager.create_user(user_id)
            # –î–∞–µ–º —Å—Ç–∞—Ä—Ç–æ–≤—ã–µ –º–æ–Ω–µ—Ç—ã
            db_manager.update_user_balance(user_id, 50)
        
        user_wallets[user_id] = WalletService(user_id, user.balance)
    
    return user_wallets[user_id]

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    user = update.effective_user
    user_id = user.id
    
    # –ü–æ–ª—É—á–∞–µ–º –∫–æ—à–µ–ª–µ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    wallet = get_user_wallet(user_id)
    balance = wallet.get_balance()
    
    welcome_text = f"""
üéâ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Babka Bot, {user.first_name}!

ü§ñ –Ø –ø–æ–º–æ–≥—É –≤–∞–º —Å–æ–∑–¥–∞–≤–∞—Ç—å:
‚Ä¢ üé¨ –í–∏–¥–µ–æ —Å –ø–æ–º–æ—â—å—é AI (Veo)
‚Ä¢ üñºÔ∏è –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏ –≤–∏—Ä—Ç—É–∞–ª—å–Ω—É—é –ø—Ä–∏–º–µ—Ä–æ—á–Ω—É—é
‚Ä¢ ‚ú® –û–±—Ä–∞–±–æ—Ç–∫—É —Ñ–æ—Ç–æ (—É–¥–∞–ª–µ–Ω–∏–µ —Ñ–æ–Ω–∞, —Ä–µ—Ç—É—à—å –∏ –¥—Ä.)

üí∞ –í–∞—à –±–∞–ª–∞–Ω—Å: {balance} –º–æ–Ω–µ—Ç

–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:
"""
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    keyboard = [
        [InlineKeyboardButton("üé¨ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≤–∏–¥–µ–æ", callback_data="video_menu")],
        [InlineKeyboardButton("üñºÔ∏è –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è", callback_data="image_menu")],
        [InlineKeyboardButton("üëó –í–∏—Ä—Ç—É–∞–ª—å–Ω–∞—è –ø—Ä–∏–º–µ—Ä–æ—á–Ω–∞—è", callback_data="tryon_menu")],
        [InlineKeyboardButton("üí∞ –ë–∞–ª–∞–Ω—Å –∏ —Ç–∞—Ä–∏—Ñ—ã", callback_data="balance_menu")],
        [InlineKeyboardButton("‚ÑπÔ∏è –ü–æ–º–æ—â—å", callback_data="help_menu")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.message.reply_text(welcome_text, reply_markup=reply_markup)

async def handle_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ inline –∫–Ω–æ–ø–æ–∫"""
    query = update.callback_query
    await query.answer()
    
    user_id = query.from_user.id
    wallet = get_user_wallet(user_id)
    
    if query.data == "video_menu":
        await show_video_menu(query)
    elif query.data == "image_menu":
        await show_image_menu(query)
    elif query.data == "tryon_menu":
        await show_tryon_menu(query)
    elif query.data == "balance_menu":
        await show_balance_menu(query)
    elif query.data == "help_menu":
        await show_help_menu(query)
    elif query.data.startswith("video_"):
        await handle_video_action(query, wallet)
    elif query.data.startswith("image_"):
        await handle_image_action(query, wallet)
    elif query.data.startswith("tryon_"):
        await handle_tryon_action(query, wallet)
    elif query.data.startswith("tariff_"):
        await handle_tariff_action(query, wallet)

async def show_video_menu(query):
    """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–∏–¥–µ–æ"""
    text = """
üé¨ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≤–∏–¥–µ–æ

–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –≤–∏–¥–µ–æ:
"""
    
    keyboard = [
        [InlineKeyboardButton("üé¨ –í–∏–¥–µ–æ —Å –∞—É–¥–∏–æ (20 –º–æ–Ω–µ—Ç)", callback_data="video_8s_audio")],
        [InlineKeyboardButton("üîá –í–∏–¥–µ–æ –±–µ–∑ –∞—É–¥–∏–æ (16 –º–æ–Ω–µ—Ç)", callback_data="video_8s_mute")],
        [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="main_menu")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text(text, reply_markup=reply_markup)

async def show_image_menu(query):
    """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π"""
    text = """
üñºÔ∏è –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π

–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –æ–±—Ä–∞–±–æ—Ç–∫–∏:
"""
    
    keyboard = [
        [InlineKeyboardButton("üñºÔ∏è –ë–∞–∑–æ–≤–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ (1 –º–æ–Ω–µ—Ç–∞)", callback_data="image_basic")],
        [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="main_menu")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text(text, reply_markup=reply_markup)

async def show_tryon_menu(query):
    """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–π –ø—Ä–∏–º–µ—Ä–æ—á–Ω–æ–π"""
    text = """
üëó –í–∏—Ä—Ç—É–∞–ª—å–Ω–∞—è –ø—Ä–∏–º–µ—Ä–æ—á–Ω–∞—è

–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞–¥–µ—Ç—å –æ–¥–µ–∂–¥—É –Ω–∞ —Ñ–æ—Ç–æ!
"""
    
    keyboard = [
        [InlineKeyboardButton("üëó –í–∏—Ä—Ç—É–∞–ª—å–Ω–∞—è –ø—Ä–∏–º–µ—Ä–æ—á–Ω–∞—è (3 –º–æ–Ω–µ—Ç—ã)", callback_data="virtual_tryon")],
        [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="main_menu")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text(text, reply_markup=reply_markup)

async def show_balance_menu(query):
    """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é –±–∞–ª–∞–Ω—Å–∞ –∏ —Ç–∞—Ä–∏—Ñ–æ–≤"""
    user_id = query.from_user.id
    wallet = get_user_wallet(user_id)
    balance = wallet.get_balance()
    
    text = f"""
üí∞ –ë–∞–ª–∞–Ω—Å –∏ —Ç–∞—Ä–∏—Ñ—ã

–í–∞—à –±–∞–ª–∞–Ω—Å: {balance} –º–æ–Ω–µ—Ç

–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–∞—Ä–∏—Ñ—ã:
‚Ä¢ Lite: {price_rub_for_tariff("lite")}‚ÇΩ ‚Üí {coins_for_tariff("lite")} –º–æ–Ω–µ—Ç
‚Ä¢ Standard: {price_rub_for_tariff("standard")}‚ÇΩ ‚Üí {coins_for_tariff("standard")} –º–æ–Ω–µ—Ç  
‚Ä¢ Pro: {price_rub_for_tariff("pro")}‚ÇΩ ‚Üí {coins_for_tariff("pro")} –º–æ–Ω–µ—Ç
"""
    
    keyboard = [
        [InlineKeyboardButton("üí≥ Lite —Ç–∞—Ä–∏—Ñ", callback_data="tariff_lite")],
        [InlineKeyboardButton("üí≥ Standard —Ç–∞—Ä–∏—Ñ", callback_data="tariff_standard")],
        [InlineKeyboardButton("üí≥ Pro —Ç–∞—Ä–∏—Ñ", callback_data="tariff_pro")],
        [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="main_menu")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text(text, reply_markup=reply_markup)

async def show_help_menu(query):
    """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é –ø–æ–º–æ—â–∏"""
    text = """
‚ÑπÔ∏è –ü–æ–º–æ—â—å

ü§ñ Babka Bot - —ç—Ç–æ AI-–±–æ—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞:

üé¨ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≤–∏–¥–µ–æ:
‚Ä¢ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –≤–∏–¥–µ–æ
‚Ä¢ –í—ã–±–µ—Ä–∏—Ç–µ —Å –∞—É–¥–∏–æ –∏–ª–∏ –±–µ–∑
‚Ä¢ –ü–æ–ª—É—á–∏—Ç–µ –≥–æ—Ç–æ–≤–æ–µ –≤–∏–¥–µ–æ

üñºÔ∏è –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π:
‚Ä¢ –ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–æ—Ç–æ
‚Ä¢ –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –æ–±—Ä–∞–±–æ—Ç–∫–∏
‚Ä¢ –ü–æ–ª—É—á–∏—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç

üëó –í–∏—Ä—Ç—É–∞–ª—å–Ω–∞—è –ø—Ä–∏–º–µ—Ä–æ—á–Ω–∞—è:
‚Ä¢ –ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–æ—Ç–æ —á–µ–ª–æ–≤–µ–∫–∞ –∏ –æ–¥–µ–∂–¥—ã
‚Ä¢ –ü–æ–ª—É—á–∏—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–∏–º–µ—Ä–∫–∏

üí∞ –ú–æ–Ω–µ—Ç—ã –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –¥–ª—è –æ–ø–ª–∞—Ç—ã —Ñ—É–Ω–∫—Ü–∏–π.
–ü–æ–ø–æ–ª–Ω—è–π—Ç–µ –±–∞–ª–∞–Ω—Å —á–µ—Ä–µ–∑ —Ç–∞—Ä–∏—Ñ—ã.
"""
    
    keyboard = [
        [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="main_menu")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text(text, reply_markup=reply_markup)

async def handle_video_action(query, wallet: WalletService):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–µ–π—Å—Ç–≤–∏–π —Å –≤–∏–¥–µ–æ"""
    feature_key = query.data
    
    if not wallet.can_afford(feature_key):
        cost = wallet.get_cost(feature_key)
        balance = wallet.get_balance()
        text = f"""
‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–æ–Ω–µ—Ç!

–ù—É–∂–Ω–æ: {cost} –º–æ–Ω–µ—Ç
–£ –≤–∞—Å: {balance} –º–æ–Ω–µ—Ç

–ü–æ–ø–æ–ª–Ω–∏—Ç–µ –±–∞–ª–∞–Ω—Å –≤ —Ä–∞–∑–¥–µ–ª–µ "üí∞ –ë–∞–ª–∞–Ω—Å –∏ —Ç–∞—Ä–∏—Ñ—ã"
"""
        keyboard = [[InlineKeyboardButton("üí∞ –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å", callback_data="balance_menu")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(text, reply_markup=reply_markup)
        return
    
    # –¢—Ä–∞—Ç–∏–º –º–æ–Ω–µ—Ç—ã
    if wallet.spend_coins(feature_key):
        # –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å –≤ –ë–î
        db_manager.spend_coins(query.from_user.id, wallet.get_cost(feature_key), feature_key)
        
        text = f"""
‚úÖ –ú–æ–Ω–µ—Ç—ã —Å–ø–∏—Å–∞–Ω—ã!

–û—Å—Ç–∞—Ç–æ–∫: {wallet.get_balance()} –º–æ–Ω–µ—Ç

–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –≤–∏–¥–µ–æ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏.
"""
        await query.edit_message_text(text)
    else:
        await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–ø–∏—Å–∞–Ω–∏–∏ –º–æ–Ω–µ—Ç")

async def handle_image_action(query, wallet: WalletService):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–µ–π—Å—Ç–≤–∏–π —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏"""
    feature_key = query.data
    
    if not wallet.can_afford(feature_key):
        cost = wallet.get_cost(feature_key)
        balance = wallet.get_balance()
        text = f"""
‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–æ–Ω–µ—Ç!

–ù—É–∂–Ω–æ: {cost} –º–æ–Ω–µ—Ç
–£ –≤–∞—Å: {balance} –º–æ–Ω–µ—Ç

–ü–æ–ø–æ–ª–Ω–∏—Ç–µ –±–∞–ª–∞–Ω—Å –≤ —Ä–∞–∑–¥–µ–ª–µ "üí∞ –ë–∞–ª–∞–Ω—Å –∏ —Ç–∞—Ä–∏—Ñ—ã"
"""
        keyboard = [[InlineKeyboardButton("üí∞ –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å", callback_data="balance_menu")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(text, reply_markup=reply_markup)
        return
    
    # –¢—Ä–∞—Ç–∏–º –º–æ–Ω–µ—Ç—ã
    if wallet.spend_coins(feature_key):
        # –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å –≤ –ë–î
        db_manager.spend_coins(query.from_user.id, wallet.get_cost(feature_key), feature_key)
        
        text = f"""
‚úÖ –ú–æ–Ω–µ—Ç—ã —Å–ø–∏—Å–∞–Ω—ã!

–û—Å—Ç–∞—Ç–æ–∫: {wallet.get_balance()} –º–æ–Ω–µ—Ç

–ó–∞–≥—Ä—É–∑–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏.
"""
        await query.edit_message_text(text)
    else:
        await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–ø–∏—Å–∞–Ω–∏–∏ –º–æ–Ω–µ—Ç")

async def handle_tryon_action(query, wallet: WalletService):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–µ–π—Å—Ç–≤–∏–π —Å –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–π –ø—Ä–∏–º–µ—Ä–æ—á–Ω–æ–π"""
    feature_key = query.data
    
    if not wallet.can_afford(feature_key):
        cost = wallet.get_cost(feature_key)
        balance = wallet.get_balance()
        text = f"""
‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–æ–Ω–µ—Ç!

–ù—É–∂–Ω–æ: {cost} –º–æ–Ω–µ—Ç
–£ –≤–∞—Å: {balance} –º–æ–Ω–µ—Ç

–ü–æ–ø–æ–ª–Ω–∏—Ç–µ –±–∞–ª–∞–Ω—Å –≤ —Ä–∞–∑–¥–µ–ª–µ "üí∞ –ë–∞–ª–∞–Ω—Å –∏ —Ç–∞—Ä–∏—Ñ—ã"
"""
        keyboard = [[InlineKeyboardButton("üí∞ –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å", callback_data="balance_menu")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(text, reply_markup=reply_markup)
        return
    
    # –¢—Ä–∞—Ç–∏–º –º–æ–Ω–µ—Ç—ã
    if wallet.spend_coins(feature_key):
        # –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å –≤ –ë–î
        db_manager.spend_coins(query.from_user.id, wallet.get_cost(feature_key), feature_key)
        
        text = f"""
‚úÖ –ú–æ–Ω–µ—Ç—ã —Å–ø–∏—Å–∞–Ω—ã!

–û—Å—Ç–∞—Ç–æ–∫: {wallet.get_balance()} –º–æ–Ω–µ—Ç

–ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–æ—Ç–æ —á–µ–ª–æ–≤–µ–∫–∞ –∏ –æ–¥–µ–∂–¥—ã –¥–ª—è –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–π –ø—Ä–∏–º–µ—Ä–∫–∏.
"""
        await query.edit_message_text(text)
    else:
        await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–ø–∏—Å–∞–Ω–∏–∏ –º–æ–Ω–µ—Ç")

async def handle_tariff_action(query, wallet: WalletService):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–∫—É–ø–∫–∏ —Ç–∞—Ä–∏—Ñ–æ–≤"""
    tariff_name = query.data.replace("tariff_", "")
    
    # –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –ø–ª–∞—Ç–µ–∂–Ω–æ–π —Å–∏—Å—Ç–µ–º–æ–π
    # –ü–æ–∫–∞ –ø—Ä–æ—Å—Ç–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
    price = price_rub_for_tariff(tariff_name)
    coins = coins_for_tariff(tariff_name)
    
    text = f"""
üí≥ –¢–∞—Ä–∏—Ñ {tariff_name.title()}

–¶–µ–Ω–∞: {price}‚ÇΩ
–ú–æ–Ω–µ—Ç—ã: {coins}

‚ö†Ô∏è –ü–æ–∫—É–ø–∫–∞ —Ç–∞—Ä–∏—Ñ–æ–≤ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.
–î–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /add_coins [–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ]
"""
    
    keyboard = [[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="balance_menu")]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text(text, reply_markup=reply_markup)

async def add_coins_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –º–æ–Ω–µ—Ç (–¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)"""
    user_id = update.effective_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –∞–¥–º–∏–Ω (–∑–∞–≥–ª—É—à–∫–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)
    if user_id != 123456789:  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à Telegram ID
        await update.message.reply_text("‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º")
        return
    
    try:
        amount = int(context.args[0]) if context.args else 100
        wallet = get_user_wallet(user_id)
        wallet.add_coins(amount)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å –≤ –ë–î
        db_manager.update_user_balance(user_id, amount)
        db_manager.add_transaction(user_id, "purchase", amount, description="Test coins")
        
        await update.message.reply_text(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ {amount} –º–æ–Ω–µ—Ç. –ë–∞–ª–∞–Ω—Å: {wallet.get_balance()}")
    except (ValueError, IndexError):
        await update.message.reply_text("‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /add_coins [–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ]")

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    text = update.message.text
    user_id = update.effective_user.id
    
    if text and not text.startswith('/'):
        # –ó–¥–µ—Å—å –±—É–¥–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
        await update.message.reply_text("üìù –í–∞—à –∑–∞–ø—Ä–æ—Å –ø—Ä–∏–Ω—è—Ç! –§—É–Ω–∫—Ü–∏–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –±—É–¥—É—Ç –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ —Å–ª–µ–¥—É—é—â–∏—Ö –≤–µ—Ä—Å–∏—è—Ö.")

async def handle_photo(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö —Ñ–æ—Ç–æ"""
    user_id = update.effective_user.id
    
    # –ó–¥–µ—Å—å –±—É–¥–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
    await update.message.reply_text("üì∏ –§–æ—Ç–æ –ø–æ–ª—É—á–µ–Ω–æ! –§—É–Ω–∫—Ü–∏–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –±—É–¥—É—Ç –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ —Å–ª–µ–¥—É—é—â–∏—Ö –≤–µ—Ä—Å–∏—è—Ö.")

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
    log.info("–ó–∞–ø—É—Å–∫ Babka Bot...")
    
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    application = Application.builder().token(BOT_TOKEN).build()
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("add_coins", add_coins_command))
    application.add_handler(CallbackQueryHandler(handle_callback))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    application.add_handler(MessageHandler(filters.PHOTO, handle_photo))
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    log.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
    await application.run_polling()

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        log.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        log.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {e}")
        raise