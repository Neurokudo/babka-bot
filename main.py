# main.py ‚Äî –≤–µ—Ä—Å–∏—è —Å –¥–µ—Ç–∞–ª—å–Ω—ã–º–∏ —Å—Ç–∏–ª—è–º–∏ –∏ —Ä–∞–∑–¥–µ–ª–æ–º ¬´üßæ JSON (–¥–ª—è –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã—Ö)¬ª.
# –ö–ª—é—á–µ–≤—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è:
# 1) –ù–æ–≤—ã–π STYLE_HINTS + style_instructions() ‚Äî —Å—Ç–∏–ª–∏ –æ–ø–∏—Å–∞–Ω—ã –¥–ª—è –≥–µ—Ä–æ—è, –æ–¥–µ–∂–¥—ã, –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤, –æ–∫—Ä—É–∂–µ–Ω–∏—è, –ø–∞–ª–∏—Ç—Ä—ã, —Å–≤–µ—Ç–∞, –∫–∞–º–µ—Ä—ã, –ø–æ—Å—Ç–∞.
# 2) –í _rich_json_template() –¥–æ–±–∞–≤–ª–µ–Ω–∞ –∂—ë—Å—Ç–∫–∞—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è: ¬´–≤—Å—Ç—Ä–∞–∏–≤–∞–π style_directives –≤ subject.description, scene, lighting, mood –∏ shot¬ª.
# 3) –í –æ–±—ã—á–Ω—ã—Ö —Ä–µ–∂–∏–º–∞—Ö (–ø–æ–º–æ—â–Ω–∏–∫/–Ω–µ–π—Ä–æ–∫—É–¥–æ/–º–µ–º—ã) –ø–æ–∫–∞–∑ JSON –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –£–ë–†–ê–ù.
# 4) –î–æ–±–∞–≤–ª–µ–Ω –æ—Ç–¥–µ–ª—å–Ω—ã–π —Ä–∞–∑–¥–µ–ª ¬´üßæ JSON (–¥–ª—è –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã—Ö)¬ª: –≤–≤–æ–¥ —Ç–µ–∫—Å—Ç–∞ ‚Üí –≥–µ–Ω–µ—Ä–∞—Ü–∏—è JSON ‚Üí –≤—ã–±–æ—Ä –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏–∏ ‚Üí –∫–Ω–æ–ø–∫–∞ ¬´–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å¬ª.
# 5) –í—Å–µ –≥–ª–∞–≤–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ –ø—Ä–æ–¥—É–±–ª–∏—Ä–æ–≤–∞–Ω—ã –≤ Reply-–∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ (–≤–Ω–∏–∑—É, —Å SOS). –í –∏–Ω–ª–∞–π–Ω-–º–µ–Ω—é ‚Äî —Ç–µ –∂–µ –ø—É–Ω–∫—Ç—ã –ë–ï–ó SOS.
# 6) ¬´üëó –í–∏—Ä—Ç—É–∞–ª—å–Ω–∞—è –ø—Ä–∏–º–µ—Ä–æ—á–Ω–∞—è¬ª (VTO) + –ø–æ—Å—Ç-–¥–µ–π—Å—Ç–≤–∏—è: –¥—Ä—É–≥–∞—è –ø–æ–∑–∞/–¥—Ä—É–≥–∞—è –æ–¥–µ–∂–¥–∞/–Ω–æ–≤–∞—è –ª–æ–∫–∞—Ü–∏—è/–æ–ø–∏—Å–∞—Ç—å –ø–æ–∑—É.

import os
import json
import random
import asyncio
import logging
import smtplib
import time
from email.mime.text import MIMEText
from pathlib import Path
from typing import Optional, Dict, Any

from dotenv import load_dotenv
from telegram import (
    Update, InlineKeyboardButton, InlineKeyboardMarkup,
    ReplyKeyboardMarkup, KeyboardButton, InputMediaPhoto
)
from telegram.ext import (
    Application, CommandHandler, CallbackQueryHandler,
    MessageHandler, ContextTypes, filters
)

# –ò–º–ø–æ—Ä—Ç—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö –∏ –±–∏–ª–ª–∏–Ω–≥–æ–º
from database import db

# -----------------------------------------------------------------------------
# –û–ö–†–£–ñ–ï–ù–ò–ï / –õ–û–ì–ò
# -----------------------------------------------------------------------------
load_dotenv(dotenv_path=Path(__file__).with_name(".env"))
logging.basicConfig(level=logging.INFO, format="%(levelname)s:%(name)s:%(message)s")
log = logging.getLogger("babka-bot")

BOT_TOKEN = os.getenv("TELEGRAM_TOKEN") or os.getenv("BOT_TOKEN")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")

# SMTP –¥–ª—è —Ä–µ–ø–æ—Ä—Ç–æ–≤ (–Ω–∏–∂–Ω—è—è –∫–Ω–æ–ø–∫–∞ SOS)
SMTP_HOST = os.getenv("SMTP_HOST", "smtp.gmail.com")
SMTP_PORT = int(os.getenv("SMTP_PORT", "587"))
SMTP_USER = os.getenv("SMTP_USER", "")
SMTP_PASS = os.getenv("SMTP_PASS", "")
FROM_EMAIL = os.getenv("FROM_EMAIL") or SMTP_USER
SUPPORT_TO_EMAIL = "antonkudo.ai@gmail.com"

# (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ) –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–ø–æ—Ä—Ç–æ–≤ –≤ TG-—á–∞—Ç(—ã)
ADMIN_CHAT_RAW = os.getenv("ADMIN_CHAT_ID", "").strip()
ADMIN_CHAT_IDS = []
if ADMIN_CHAT_RAW:
    for piece in ADMIN_CHAT_RAW.split(","):
        piece = piece.strip()
        if piece:
            try:
                ADMIN_CHAT_IDS.append(int(piece))
            except:
                pass

# –î–æ—Å—Ç—É–ø —Ç–æ–ª—å–∫–æ –≤–ª–∞–¥–µ–ª—å—Ü—É –¥–æ —Ä–µ–ª–∏–∑–∞
ALLOWED_USERS = [5015100177]

OPENAI_MODEL = os.getenv("OPENAI_MODEL") or "gpt-4o-mini"
if "gemini" in (OPENAI_MODEL or "").lower():
    OPENAI_MODEL = "gpt-4o-mini"

DEFAULT_STYLE = "–ö–∏–Ω–æ"
DEFAULT_ORIENTATION = "9:16"  # –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –≤–µ—Ä—Ç–∏–∫–∞–ª–∫–∞
DEFAULT_AUDIO = True  # –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é —Å –∞—É–¥–∏–æ

# -----------------------------------------------------------------------------
# –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø –ò –ë–ò–õ–õ–ò–ù–ì
# -----------------------------------------------------------------------------
from config import (
    COST_VIDEO, COST_TRANSFORM, COST_TRANSFORM_PREMIUM, COST_TRYON,
    FREE_RETRY_PER_JOB, DAILY_CAP_VIDEOS, LOW_COINS_THRESHOLD,
    PLANS, TOP_UPS, ADDONS, IMG_SIZE, QUALITY
)
from payment_yookassa import create_payment_link, process_payment_webhook
from billing import (
    can_spend, hold_and_start, on_success, on_error, retry,
    check_daily_cap, inc_daily_video, get_daily_videos_left,
    check_low_coins, get_retry_cost, can_retry,
    has_video_bonus, has_photo_bonus, can_generate_video, can_generate_photo
)

# -----------------------------------------------------------------------------
# GPT
# -----------------------------------------------------------------------------
from openai import OpenAI
gpt: Optional[OpenAI] = None
if OPENAI_API_KEY:
    try:
        gpt = OpenAI(api_key=OPENAI_API_KEY)
        log.info("OpenAI GPT –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω. –ú–æ–¥–µ–ª—å: %s", OPENAI_MODEL)
    except Exception as e:
        log.error("OpenAI init error: %s", e)
        gpt = None
else:
    log.warning("OPENAI_API_KEY –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω - GPT —Ñ—É–Ω–∫—Ü–∏–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã")
    gpt = None

def _sanitize(text: str) -> str:
    if not text:
        return text
    for ch in ['‚Äî', '‚Äì', '¬´', '¬ª', '"', "'", '‚Äú', '‚Äù', '‚Äû', '‚Äü']:
        text = text.replace(ch, '')
    text = text.replace('-', '').replace('_', ' ')
    while "  " in text:
        text = text.replace("  ", " ")
    return text.strip()

def _clean_replica(text: str) -> str:
    """–û—á–∏—â–∞–µ—Ç —Ñ—Ä–∞–∑—É –æ—Ç –≤—Å–µ—Ö –≤–∏–¥–æ–≤ —Ç–∏—Ä–µ –∏ –¥–µ—Ñ–∏—Å–æ–≤"""
    if not text:
        return text
    # –£–¥–∞–ª—è–µ–º –≤—Å–µ –≤–∏–¥—ã —Ç–∏—Ä–µ –∏ –¥–µ—Ñ–∏—Å–æ–≤
    for ch in ['‚Äî', '‚Äì', '-']:
        text = text.replace(ch, '')
    # –£–¥–∞–ª—è–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã
    while "  " in text:
        text = text.replace("  ", " ")
    return text.strip()


def _gpt(system: str, user: str, temperature=0.65, max_tokens=220) -> Optional[str]:
    if not gpt:
        return None
    try:
        r = gpt.chat.completions.create(
            model=OPENAI_MODEL,
            messages=[{"role": "system", "content": system},
                      {"role": "user", "content": user}],
            temperature=temperature, max_tokens=max_tokens,
        )
        return _sanitize((r.choices[0].message.content or "").strip())
    except Exception as e:
        log.error("GPT error: %s", e)
        return None

# -----------------------------------------------------------------------------
# EMAIL + ADMIN NOTIFY
# -----------------------------------------------------------------------------
def _send_support_email(subject: str, body: str) -> bool:
    if not (SMTP_HOST and SMTP_USER and SMTP_PASS and FROM_EMAIL):
        log.warning("SMTP not configured; skipping email send")
        return False
    try:
        msg = MIMEText(body, _charset="utf-8")
        msg["Subject"] = subject
        msg["From"] = FROM_EMAIL
        msg["To"] = SUPPORT_TO_EMAIL

        with smtplib.SMTP(SMTP_HOST, SMTP_PORT) as s:
            s.starttls()
            s.login(SMTP_USER, SMTP_PASS)
            s.sendmail(FROM_EMAIL, [SUPPORT_TO_EMAIL], msg.as_string())
        return True
    except Exception as e:
        log.error("SMTP send failed: %s", e)
        return False

async def notify_admins(context: ContextTypes.DEFAULT_TYPE, text: str):
    for cid in ADMIN_CHAT_IDS:
        try:
            await context.bot.send_message(chat_id=cid, text=text)
        except Exception as e:
            logging.error("Failed to send report to %s: %s", cid, e)

# -----------------------------------------------------------------------------
# –î–ï–¢–ê–õ–ò–ó–ò–†–û–í–ê–ù–ù–´–ï –°–¢–ò–õ–ò
# -----------------------------------------------------------------------------
STYLE_HINTS = {
    "–ê–Ω–∏–º—ç": {
        "subject": "anime-style characters with cel-shaded outlines, exaggerated expressions, large eyes, simplified textures. Each object drawn in anime style with sharp outlines and flat shading.",
        "scene": "background like hand-painted anime background art with watercolor gradients, flat colors with subtle gradients, pastel palette with saturated highlights.",
        "lighting": "light bloom effects, stylized lighting without realistic shadows, clean highlights.",
        "mood": "Energetic, expressive, colorful.",
        "shot": "Cinematic anime shot, medium-wide, dolly-in, dynamic angles typical of anime films. Add falling petals, glowing city lights, stylized clouds."
    },
    "LEGO": {
        "subject": "EVERYTHING MUST BE MADE OF LEGO BRICKS: grandmother as LEGO minifigure with yellow skin, cylindrical hands, LEGO hair piece, brick-patterned clothing. All objects are LEGO blocks with visible studs and plastic texture.",
        "scene": "Complete LEGO world: ground made of LEGO baseplates, all buildings and objects constructed from LEGO bricks with visible studs and seams. No realistic textures allowed.",
        "lighting": "Bright studio lighting with strong plastic reflections, pure saturated colors typical of LEGO sets, no realistic shadows.",
        "mood": "Playful, toy-like, artificial.",
        "shot": "Low angle as if filming miniatures, smooth camera movements, shallow depth of field to emphasize toy scale."
    },
}

def style_instructions(style_name: Optional[str]) -> str:
    if not style_name or style_name not in STYLE_HINTS:
        return ""
    s = STYLE_HINTS[style_name]
    # –ö–æ–º–ø–∞–∫—Ç–Ω–∞—è –¥–∏—Ä–µ–∫—Ç–∏–≤–∞ —Å—Ç–∏–ª—è –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º –¥–ª—è Veo
    return (
        f"{s['subject']} "
        f"{s['scene']} "
        f"Lighting: {s['lighting']}. "
        f"Mood: {s['mood']}. "
        f"Shot: {s['shot']}."
    )

# -----------------------------------------------------------------------------
# –°–¶–ï–ù–ê–†–ù–´–ï –•–ï–õ–ü–ï–†–´
# -----------------------------------------------------------------------------
def improve_scene(user_text: str, mode: str = "normal") -> str:
    style = {
        "normal": "–°–¥–µ–ª–∞–π —Ä–∞–±–æ—á—É—é —Å—Ü–µ–Ω—É.",
        "complex": "–î–æ–±–∞–≤—å –¥–µ—Ç–∞–ª–µ–π, —Å–¥–µ–ª–∞–π —Å—Ü–µ–Ω—É –Ω–∞—Å—ã—â–µ–Ω–Ω–µ–µ –∏ –≤–∏–∑—É–∞–ª—å–Ω–æ —Å–ª–æ–∂–Ω–µ–µ.",
        "simple": "–£–ø—Ä–æ—Å—Ç–∏ —Å—Ü–µ–Ω—É, –æ—Å—Ç–∞–≤—å —Ç–æ–ª—å–∫–æ –≥–ª–∞–≤–Ω–æ–µ.",
        "absurd": "–°–¥–µ–ª–∞–π —Å—Ü–µ–Ω—É –±–æ–ª–µ–µ –∞–±—Å—É—Ä–¥–Ω–æ–π –∏ —Å–º–µ—à–Ω–æ–π."
    }.get(mode, "–°–¥–µ–ª–∞–π —Ä–∞–±–æ—á—É—é —Å—Ü–µ–Ω—É.")
    sys = (
        "–¢—ã —Ä–µ–¥–∞–∫—Ç–æ—Ä –∫–æ—Ä–æ—Ç–∫–∏—Ö –≤–∏–¥–µ–æ—Å—Ü–µ–Ω. –§–æ—Ä–º—É–ª–∏—Ä—É–π –∏–º–µ–Ω–Ω–æ –û–î–ù–£ –°–¶–ï–ù–£: –∫—Ç–æ –≥–¥–µ —á—Ç–æ –¥–µ–ª–∞–µ—Ç. "
        "–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å ~8 —Å–µ–∫—É–Ω–¥, –û–î–ù–ê —Å—Ü–µ–Ω–∞ –±–µ–∑ —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è –Ω–∞ —á–∞—Å—Ç–∏. –ë–µ–∑ –ø–æ—ç–∑–∏–∏/–æ—Ü–µ–Ω–æ–∫. "
        "–°—É–±—Ç–∏—Ç—Ä—ã –∏ —Ç–µ–∫—Å—Ç –≤ –∫–∞–¥—Ä–µ –∑–∞–ø—Ä–µ—â–µ–Ω—ã. –ù–µ –∏—Å–ø–æ–ª—å–∑—É–π –∫–∞–≤—ã—á–∫–∏ –∏ —Ç–∏—Ä–µ. "
        "–ù–ï —Å–æ–∑–¥–∞–≤–∞–π –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å—Ü–µ–Ω –∏–ª–∏ —Å—Ü–µ–Ω 1/2. –¢–æ–ª—å–∫–æ –û–î–ù–ê —Ü–µ–ª—å–Ω–∞—è —Å—Ü–µ–Ω–∞. "
        f"{style} –ù–∞–ø–∏—à–∏ 1‚Äì2 –∫–æ—Ä–æ—Ç–∫–∏—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è, –æ–ø–∏—Å—ã–≤–∞—é—â–∏—Ö –û–î–ù–£ —Å—Ü–µ–Ω—É."
    )
    temp = {"normal": 0.65, "complex": 0.85, "simple": 0.55, "absurd": 0.9}[mode]
    return _gpt(sys, user_text, temperature=temp, max_tokens=140) or _sanitize(user_text)

def improve_scene_with_phrase(scene_text: str, phrase: str, mode: str = "complex") -> str:
    """–£–ª—É—á—à–∞–µ—Ç —Å—Ü–µ–Ω—É, —Å–æ—Ö—Ä–∞–Ω—è—è —Ñ—Ä–∞–∑—É"""
    if not phrase:
        return improve_scene(scene_text, mode)
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ñ—Ä–∞–∑—É –∏–∑ —Å—Ü–µ–Ω—ã, –µ—Å–ª–∏ –æ–Ω–∞ —Ç–∞–º –µ—Å—Ç—å
    import re
    # –ò—â–µ–º —Ñ—Ä–∞–∑—É –≤ –∫–∞–≤—ã—á–∫–∞—Ö
    quote_pattern = r'"[^"]*"'
    scene_without_phrase = re.sub(quote_pattern, '', scene_text).strip()
    
    # –£–ª—É—á—à–∞–µ–º —Å—Ü–µ–Ω—É –±–µ–∑ —Ñ—Ä–∞–∑—ã
    improved_scene = improve_scene(scene_without_phrase, mode)
    
    # –í—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Ñ—Ä–∞–∑—É –æ–±—Ä–∞—Ç–Ω–æ
    embed_prompt = (
        f"–í—Å—Ç—Ä–æ–π —Ñ—Ä–∞–∑—É –≤ —É–ª—É—á—à–µ–Ω–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Å—Ü–µ–Ω—ã –∫–∞–∫ —Ä–µ—á—å –ø–µ—Ä—Å–æ–Ω–∞–∂–∞.\n\n"
        f"–£–ª—É—á—à–µ–Ω–Ω–∞—è —Å—Ü–µ–Ω–∞: {improved_scene}\n"
        f"–§—Ä–∞–∑–∞: {phrase}\n\n"
        f"–¢–†–ï–ë–û–í–ê–ù–ò–Ø:\n"
        f"- –í—Å—Ç—Ä–æ–π —Ñ—Ä–∞–∑—É –∫–∞–∫ –ø—Ä—è–º—É—é —Ä–µ—á—å –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –≤ –∫–∞–≤—ã—á–∫–∞—Ö\n"
        f"- –î–æ–±–∞–≤—å —Å–ª–æ–≤–∞ –∞–≤—Ç–æ—Ä–∞ —Ç–∏–ø–∞ '–≥–æ–≤–æ—Ä–∏—Ç', '–≤–æ—Å–∫–ª–∏—Ü–∞–µ—Ç', '—à–µ–ø—á–µ—Ç' –∏ —Ç.–¥.\n"
        f"- –§—Ä–∞–∑–∞ –¥–æ–ª–∂–Ω–∞ –∑–≤—É—á–∞—Ç—å –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ —Å—Ü–µ–Ω—ã\n"
        f"- –°—Ü–µ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –æ—Å—Ç–∞—Ç—å—Å—è —Ü–µ–ª–æ—Å—Ç–Ω–æ–π –∏ –ª–æ–≥–∏—á–Ω–æ–π\n"
        f"- –ù–ï –¥–æ–±–∞–≤–ª—è–π –Ω–∏–∫–∞–∫–∏—Ö —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –¥–µ—Ç–∞–ª–µ–π, —Å—Ç–∏–ª–µ–π, –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏–π\n"
        f"- –ù–ï –¥–æ–±–∞–≤–ª—è–π —Å—Ç—Ä–æ–∫–∏ —Ç–∏–ø–∞ 'Style:', 'Replica:', 'Orientation:'\n\n"
        f"–í–µ—Ä–Ω–∏ –¢–û–õ–¨–ö–û –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Å—Ü–µ–Ω—ã –±–µ–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤."
    )
    
    try:
        if not gpt:

            replica = "–î–∞ —Å–∞–º–∞ –¥–æ–≤–µ–∑—É –±–µ–∑ –ø—Ä–∏–Ω—Ü–µ–≤ –æ–±–æ–π–¥—É—Å—å!"

        else:

            resp = gpt.chat.completions.create(
            model=OPENAI_MODEL,
            messages=[{"role": "user", "content": embed_prompt}],
            max_tokens=200,
            temperature=0.7,
        )
        result = resp.choices[0].message.content.strip() if resp else ""
        
        # –û—á–∏—â–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ç –ª–∏—à–Ω–∏—Ö —Å—Ç—Ä–æ–∫
        lines = result.split('\n')
        cleaned_lines = []
        for line in lines:
            line = line.strip()
            # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å—Ç—Ä–æ–∫–∏ —Å —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–º–∏ –¥–µ—Ç–∞–ª—è–º–∏
            if (line.startswith('- Style:') or 
                line.startswith('- Replica:') or 
                line.startswith('- Orientation:') or
                line.startswith('Style:') or 
                line.startswith('Replica:') or 
                line.startswith('Orientation:') or
                line == '-' or
                line == ''):
                continue
            cleaned_lines.append(line)
        
        return '\n'.join(cleaned_lines).strip()
    except Exception as e:
        # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –≤—Å—Ç—Ä–æ–∏—Ç—å —á–µ—Ä–µ–∑ GPT, –ø—Ä–æ—Å—Ç–æ –¥–æ–±–∞–≤–ª—è–µ–º –≤ –∫–æ–Ω–µ—Ü
        return f"{improved_scene}\n\n–ë–∞–±—É—à–∫–∞ –≥–æ–≤–æ—Ä–∏—Ç: {phrase}"

def suggest_replica(scene: str) -> Optional[str]:
    sys = ("–ü—Ä–∏–¥—É–º–∞–π –∫–æ—Ä–æ—Ç–∫—É—é —Ñ—Ä–∞–∑—É –≥–µ—Ä–æ—è –∫ —Å—Ü–µ–Ω–µ, 4‚Äì10 —Å–ª–æ–≤. –¢–æ–ª—å–∫–æ —Å–∞–º–∞ —Ñ—Ä–∞–∑–∞. "
           "–ó–∞–ø—Ä–µ—â–µ–Ω—ã –∫–∞–≤—ã—á–∫–∏/—Ç–∏—Ä–µ/–¥–≤–æ–µ—Ç–æ—á–∏—è/—Ç–æ—á–∫–∞ —Å –∑–∞–ø—è—Ç–æ–π.")
    return _gpt(sys, scene, temperature=0.9, max_tokens=35)

# -----------------------------------------------------------------------------
# NEUROKUDO
# -----------------------------------------------------------------------------
def generate_nkudo_single_scene() -> str:
    sys = (
        "–¢—ã ‚Äî –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä –æ–¥–Ω–æ—Å—Ü–µ–Ω–æ–≤—ã—Ö –≤–∏–¥–µ–æ (—Ä–æ–≤–Ω–æ 8 —Å–µ–∫—É–Ω–¥) –≤ —Å—Ç–∏–ª–µ Neurokudo: —Ç—ë–ø–ª—ã–π –¥–µ—Ä–µ–≤–µ–Ω—Å–∫–∏–π —Ä–µ–∞–ª–∏–∑–º + –æ–¥–Ω–∞ –∞–±—Å—É—Ä–¥–Ω–∞—è –¥–µ—Ç–∞–ª—å.\n"
        "–í—Å–µ–≥–¥–∞ –≤—ã–¥–∞–π –æ–¥–Ω—É —Å—Ü–µ–Ω—É –Ω–∞ —Ä—É—Å—Å–∫–æ–º –≤ –ü–û–í–ï–°–¢–í–û–í–ê–¢–ï–õ–¨–ù–û–ú —Ñ–æ—Ä–º–∞—Ç–µ (–Ω–∏–∫–∞–∫–æ–≥–æ JSON, –Ω–∏–∫–∞–∫–∏—Ö –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤).\n"
        "–ó–∞–ø—Ä–µ—Ç—ã: –Ω–µ—Ç —Ä–µ–ø–æ—Ä—Ç—ë—Ä–æ–≤, –Ω–µ—Ç –º–∏–∫—Ä–æ—Ñ–æ–Ω–æ–≤, –Ω–µ—Ç —Ç–∏—Ç—Ä–æ–≤/–≤–æ–¥—è–Ω—ã—Ö –∑–Ω–∞–∫–æ–≤/–ª–æ–≥–æ—Ç–∏–ø–æ–≤; –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–π —Å–ª–æ–≤–æ ¬´–ó–∞–ª—É–ø–∏–Ω—Å–∫¬ª.\n"
        "–°—Ü–µ–Ω–∞ = –±–∞–±–∫–∞, –æ–±—ä–µ–∫—Ç, –ø—Ä–æ—Å—Ç–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ, –æ–¥–Ω–∞ –∫–æ—Ä–æ—Ç–∫–∞—è —Ñ—Ä–∞–∑–∞. –•—É–∫ –≤–∏–¥–µ–Ω –≤ –ø–µ—Ä–≤—ã–µ 2-3 —Å–µ–∫—É–Ω–¥—ã.\n"
        "–ö–∞–º–µ—Ä–∞: handheld, –Ω–∞ —É—Ä–æ–≤–Ω–µ –ø–ª–µ—á, –ª—ë–≥–∫–∞—è –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–∞—è —Ç—Ä—è—Å–∫–∞. –°–≤–µ—Ç –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—ã–π. –ú—É–∑—ã–∫–∏ –Ω–µ—Ç; —Ç–æ–ª—å–∫–æ –¥–µ—Ä–µ–≤–µ–Ω—Å–∫–∏–π –∞–º–±–∏–µ–Ω—Ç + –∑–≤—É–∫–∏ –¥–µ–π—Å—Ç–≤–∏—è.\n"
        "–ì–µ—Ä–æ–∏–Ω—è: –ø–æ–∂–∏–ª–∞—è –∂–µ–Ω—â–∏–Ω–∞ 75-80 –ª–µ—Ç, –¥–µ—Ä–µ–≤–µ–Ω—Å–∫–∞—è, 1-2 —É–∑–Ω–∞–≤–∞–µ–º—ã—Ö –∞—Ç—Ä–∏–±—É—Ç–∞ (—Ö–∞–ª–∞—Ç/–ø–ª–∞—Ç–æ–∫/—Å–∞–ø–æ–≥–∏/—ç–º–∞–ª–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –≤–µ–¥—Ä–æ).\n"
        "–†–µ—á—å: –¥–æ 20-25 —Å–ª–æ–≤, —Ä–∞–∑–≥–æ–≤–æ—Ä–Ω–∞—è, —Å –∫–æ—Ä–æ—Ç–∫–∏–º –ø—É–∞–Ω—Ç–æ–º –Ω–∞ –∫–æ–Ω—Ü–µ.\n"
        "–û–¥–Ω–∞ –∑–∞–¥–∞—á–∞ –≤ –∫–∞–¥—Ä–µ, –±–µ–∑ –º–æ–Ω—Ç–∞–∂–Ω—ã—Ö —Å–∫–ª–µ–µ–∫ –∏ –±–µ–∑ –∞–∫—Ä–æ–±–∞—Ç–∏–∫–∏ –∫–∞–º–µ—Ä–∞–º–∏.\n\n"
        "–§–û–†–ú–ê–¢ –û–¢–í–ï–¢–ê: –ü–æ–≤–µ—Å—Ç–≤–æ–≤–∞—Ç–µ–ª—å–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Å—Ü–µ–Ω—ã –≤ –æ–¥–Ω–æ–º –∞–±–∑–∞—Ü–µ.\n\n"
        "–ü—Ä–∏–º–µ—Ä—ã (–∫–∞–∫ –¥–æ–ª–∂–µ–Ω –æ—Ç–≤–µ—á–∞—Ç—å GPT):\n\n"
        "–ü—Ä–∏–º–µ—Ä 1\n"
        "–ü–µ–Ω—Å–∏–æ–Ω–µ—Ä–∫–∞ –≤–æ –¥–≤–æ—Ä–µ –¥–µ—Ä–µ–≤–µ–Ω—Å–∫–æ–≥–æ –¥–æ–º–∞ —Ç–æ–ª–∫–∞–µ—Ç –≥–∏–≥–∞–Ω—Ç—Å–∫—É—é —Ç—ã–∫–≤—É-¬´–∫–∞—Ä–µ—Ç—É¬ª, –ø–æ–ø—Ä–∞–≤–ª—è–µ—Ç –ø–ª–∞—Ç–æ–∫ –∏ —Ö–º—ã–∫–∞–µ—Ç: ¬´–î–∞ —Å–∞–º–∞ –¥–æ–≤–µ–∑—É –±–µ–∑ –ø—Ä–∏–Ω—Ü–µ–≤ –æ–±–æ–π–¥—É—Å—å!¬ª. –¢—ã–∫–≤–∞ –∫—Ä–µ–Ω–∏—Ç—Å—è –Ω–∞ –±–æ–∫, –∏ –±–∞–±–∫–∞ –µ–¥–≤–∞ –Ω–µ –ø–∞–¥–∞–µ—Ç.\n\n"
        "–ü—Ä–∏–º–µ—Ä 2\n"
        "–°—Ç–∞—Ä—É—à–∫–∞ –≤ –∫–ª–µ—Ç—á–∞—Ç–æ–º —Ö–∞–ª–∞—Ç–µ —Å—Ç–æ–∏—Ç —É –æ–≥–æ—Ä–æ–¥–∞ —Ä—è–¥–æ–º —Å –æ–≥—Ä–æ–º–Ω—ã–º –±–ª–µ—Å—Ç—è—â–∏–º —Å–∞–º–æ–≤–∞—Ä–æ–º, –Ω–∞—Ç–∏—Ä–∞–µ—Ç –µ–≥–æ —â—ë—Ç–∫–æ–π –∏ –≤–æ—Ä—á–∏—Ç: ¬´–ß–∞–π–∫—É –Ω–∞–∫–∏–ø—è—á—É –¥—É—à—É —Å–æ–≥—Ä–µ—é, –Ω–µ —Å–ø–∏–Ω—É¬ª. –°–∞–º–æ–≤–∞—Ä –≤–Ω–µ–∑–∞–ø–Ω–æ –≥—Ä–æ–º–∫–æ —Å–≤–∏—Å—Ç–∏—Ç, –±–∞–±–∫–∞ –æ—Ç—Å–∫–∞–∫–∏–≤–∞–µ—Ç.\n\n"
        "–ü—Ä–∏–º–µ—Ä 3\n"
        "–ü–æ–∂–∏–ª–∞—è –∂–µ–Ω—â–∏–Ω–∞ –≤ —Å–ø–æ—Ä—Ç–∏–≤–Ω—ã—Ö —à—Ç–∞–Ω–∞—Ö –∏ –∂–∏–ª–µ—Ç–∫–µ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –≤–æ–¥—É –≤ –Ω–∞–¥—É–≤–Ω–æ–º –±–∞—Å—Å–µ–π–Ω–µ, –≥–¥–µ –ø–ª–∞–≤–∞–µ—Ç —Ä–æ–∑–æ–≤—ã–π —Ñ–ª–∞–º–∏–Ω–≥–æ —Ä–∞–∑–º–µ—Ä–æ–º —Å –ª–æ–¥–∫—É. –û–Ω–∞ —É—Å–º–µ—Ö–∞–µ—Ç—Å—è: ¬´–ö—Ç–æ –±–µ–∑ –∫—Ä—É–≥–∞ —Ç–æ—Ç —Å –≥–æ—Ä–¥–æ—Å—Ç—å—é –ø–ª—ã–≤—ë—Ç!¬ª. –§–ª–∞–º–∏–Ω–≥–æ —Ä–µ–∑–∫–æ –Ω–∞–∫–ª–æ–Ω—è–µ—Ç—Å—è, –∏ –±–∞–±–∫–∞ —á—É—Ç—å –Ω–µ –ø–∞–¥–∞–µ—Ç –≤ –≤–æ–¥—É.\n\n"
        "–°–æ–∑–¥–∞–π –Ω–æ–≤—É—é —Å—Ü–µ–Ω—É –≤ —Å—Ç–∏–ª–µ NEUROKUDO –≤ –ø–æ–≤–µ—Å—Ç–≤–æ–≤–∞—Ç–µ–ª—å–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ:"
    )
    return _gpt(sys, "–°–æ–∑–¥–∞–π –Ω–æ–≤—É—é —Å—Ü–µ–Ω—É –≤ —Å—Ç–∏–ª–µ NEUROKUDO –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ", temperature=0.75, max_tokens=200) or \
           "–ü–µ–Ω—Å–∏–æ–Ω–µ—Ä–∫–∞ –≤–æ –¥–≤–æ—Ä–µ –¥–µ—Ä–µ–≤–µ–Ω—Å–∫–æ–≥–æ –¥–æ–º–∞ —Ç–æ–ª–∫–∞–µ—Ç –≥–∏–≥–∞–Ω—Ç—Å–∫—É—é —Ç—ã–∫–≤—É-¬´–∫–∞—Ä–µ—Ç—É¬ª, –ø–æ–ø—Ä–∞–≤–ª—è–µ—Ç –ø–ª–∞—Ç–æ–∫ –∏ —Ö–º—ã–∫–∞–µ—Ç: ¬´–î–∞ —Å–∞–º–∞ –¥–æ–≤–µ–∑—É –±–µ–∑ –ø—Ä–∏–Ω—Ü–µ–≤ –æ–±–æ–π–¥—É—Å—å!¬ª. –¢—ã–∫–≤–∞ –∫—Ä–µ–Ω–∏—Ç—Å—è –Ω–∞ –±–æ–∫, –∏ –±–∞–±–∫–∞ –µ–¥–≤–∞ –Ω–µ –ø–∞–¥–∞–µ—Ç."

def generate_nkudo_reportage_scene1() -> str:
    sys = (
        "–†–µ–ø–æ—Ä—Ç–∞–∂. –°—Ü–µ–Ω–∞ 1 (8 —Å–µ–∫): —Ä—É—Å—Å–∫–æ—è–∑—ã—á–Ω–∞—è –∂—É—Ä–Ω–∞–ª–∏—Å—Ç–∫–∞ (–∂–µ–Ω—â–∏–Ω–∞, 25‚Äì40) –≤ –¥–µ—Ä–µ–≤–µ–Ω—Å–∫–æ–º –¥–≤–æ—Ä–µ, "
        "–≥–æ–≤–æ—Ä–∏—Ç –∫–æ—Ä–æ—Ç–∫—É—é —Ñ—Ä–∞–∑—É –≤ –ö–ê–ú–ï–†–£ –ø–æ-—Ä—É—Å—Å–∫–∏. –ù–∞ –∑–∞–¥–Ω–µ–º –ø–ª–∞–Ω–µ –±–∞–±—É—à–∫–∞ —Å –∂–∏–≤–æ—Ç–Ω—ã–º, "
        "–∫–æ—Ç–æ—Ä–æ–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç –ü–†–û–°–¢–´–ï –¥–µ–π—Å—Ç–≤–∏—è: —Å—Ç–æ–∏—Ç, —Å–∏–¥–∏—Ç, –µ—Å—Ç, —Å–ø–∏—Ç, –ø–ª–∞–≤–∞–µ—Ç, —Ö–æ–¥–∏—Ç. "
        "–ñ–∏–≤–æ—Ç–Ω—ã–µ –ë–ï–ó –û–î–ï–ñ–î–´, —Ç–æ–ª—å–∫–æ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è. 1‚Äì2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è. –ë–µ–∑ –∫–∞–≤—ã—á–µ–∫/—Ç–∏—Ä–µ."
    )
    return _gpt(sys, "–°–æ–∑–¥–∞–π —Å—Ü–µ–Ω—É 1", temperature=0.7, max_tokens=100) or \
           "–ñ—É—Ä–Ω–∞–ª–∏—Å—Ç–∫–∞ –≤ –¥–µ—Ä–µ–≤–µ–Ω—Å–∫–æ–º –¥–≤–æ—Ä–µ –≥–æ–≤–æ—Ä–∏—Ç –≤ –∫–∞–º–µ—Ä—É. –ù–∞ —Ñ–æ–Ω–µ –±–∞–±—É—à–∫–∞ —Ä–∞—Å—á—ë—Å—ã–≤–∞–µ—Ç –µ–Ω–æ—Ç–∞"

def generate_nkudo_reportage_scene2(context_scene1: str) -> tuple[str, str]:
    sys = (
        "–†–µ–ø–æ—Ä—Ç–∞–∂. –°—Ü–µ–Ω–∞ 2 (8 —Å–µ–∫): –∫—Ä—É–ø–Ω—ã–π –ø–ª–∞–Ω –¢–û–ô –ñ–ï –±–∞–±—É—à–∫–∏. –û–Ω–∞ –æ—Ç–≤–µ—á–∞–µ—Ç –ø–æ-—Ä—É—Å—Å–∫–∏ –∏ –≤ –∫–æ–Ω—Ü–µ "
        "–≥–æ–≤–æ—Ä–∏—Ç –∫–æ—Ä–æ—Ç–∫—É—é —Ñ–∏–Ω–∞–ª—å–Ω—É—é —Ñ—Ä–∞–∑—É-–±–æ–º–±—É (3‚Äì6 —Å–ª–æ–≤). "
        "–í–ò–ó–£–ê–õ–¨–ù–ê–Ø –ö–û–ù–¢–ò–ù–£–ò–¢–ò: —Ç–µ –∂–µ –ª—é–¥–∏, –æ–¥–µ–∂–¥–∞, –¥–≤–æ—Ä, –ø—Ä–µ–¥–º–µ—Ç—ã/–∂–∏–≤–æ—Ç–Ω–æ–µ ‚Äî –ø–æ–≤—Ç–æ—Ä–∏—Ç—å. "
        "–ñ–∏–≤–æ—Ç–Ω—ã–µ –≤—ã–ø–æ–ª–Ω—è—é—Ç –ü–†–û–°–¢–´–ï –¥–µ–π—Å—Ç–≤–∏—è: —Å—Ç–æ–∏—Ç, —Å–∏–¥–∏—Ç, –µ—Å—Ç, —Å–ø–∏—Ç, –ø–ª–∞–≤–∞–µ—Ç, —Ö–æ–¥–∏—Ç. "
        "–°–¢–†–û–ì–û –ó–ê–ü–†–ï–©–ï–ù–û: –Ω–∏–∫–∞–∫–∏—Ö —Ç–∏—Ä–µ, –¥–µ—Ñ–∏—Å–æ–≤ –∏–ª–∏ –¥–ª–∏–Ω–Ω—ã—Ö —Ç–∏—Ä–µ (‚Äî, -, ‚Äì) –≤ —Ñ—Ä–∞–∑–µ!"
    )
    s2 = _gpt(sys, f"–ö–æ–Ω—Ç–µ–∫—Å—Ç (—Å—Ü–µ–Ω–∞ 1): {context_scene1}", temperature=0.75, max_tokens=120) or \
         "–ë–∞–±—É—à–∫–∞ –≤ —Ç–æ–º –∂–µ –¥–≤–æ—Ä–µ, —Ä—è–¥–æ–º –µ–Ω–æ—Ç; –æ—Ç–≤–µ—á–∞–µ—Ç —É–≤–µ—Ä–µ–Ω–Ω–æ –∏ –≥–æ–≤–æ—Ä–∏—Ç: –í–æ—Ç –∏ –≤–µ—Å—å —Å–∫–∞–∑"
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ñ—Ä–∞–∑—É –æ—Ç–¥–µ–ª—å–Ω–æ —Å –∑–∞–ø—Ä–µ—Ç–æ–º –Ω–∞ —Ç–∏—Ä–µ
    replica_sys = "–ö–æ—Ä–æ—Ç–∫–∞—è —Ñ–∏–Ω–∞–ª—å–Ω–∞—è —Ñ—Ä–∞–∑–∞ –±–∞–±—É—à–∫–∏ (–û–î–ù–û –ø–æ–ª–Ω–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ, –º–∞–∫—Å–∏–º—É–º 20 —Å–ª–æ–≤). –ë–µ–∑ –∫–∞–≤—ã—á–µ–∫, —Ç–∏—Ä–µ, –¥–µ—Ñ–∏—Å–æ–≤, –¥–ª–∏–Ω–Ω—ã—Ö —Ç–∏—Ä–µ (‚Äî, -, ‚Äì) –∏ –¥–≤–æ–µ—Ç–æ—á–∏–π."
    short = _gpt(replica_sys, f"–ö–æ–Ω—Ç–µ–∫—Å—Ç —Å—Ü–µ–Ω—ã: {s2}", temperature=0.8, max_tokens=35) or "–í–æ—Ç –∏ –≤–µ—Å—å —Å–∫–∞–∑"
    short = _clean_replica(short)
    
    return s2, short

def generate_nkudo_reportage() -> tuple[str, str, str]:
    s1 = generate_nkudo_reportage_scene1()
    s2, rep = generate_nkudo_reportage_scene2(s1)
    return s1, s2, rep

# LEGO —Ñ—É–Ω–∫—Ü–∏–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
def generate_lego_single_scene() -> str:
    sys = (
        "–¢—ã ‚Äî –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä –æ–¥–Ω–æ—Å—Ü–µ–Ω–æ–≤—ã—Ö –≤–∏–¥–µ–æ (—Ä–æ–≤–Ω–æ 8 —Å–µ–∫—É–Ω–¥) –≤ —Å—Ç–∏–ª–µ LEGO: —è—Ä–∫–∏–µ –ø–ª–∞—Å—Ç–∏–∫–æ–≤—ã–µ —Ñ–∏–≥—É—Ä–∫–∏, "
        "–±–ª–æ—á–Ω–∞—è —ç—Å—Ç–µ—Ç–∏–∫–∞, –¥–µ—Ç—Å–∫–∞—è –ø—Ä–æ—Å—Ç–æ—Ç–∞ + –æ–¥–Ω–∞ –∞–±—Å—É—Ä–¥–Ω–∞—è –¥–µ—Ç–∞–ª—å.\n"
        "–í—Å–µ–≥–¥–∞ –≤—ã–¥–∞–π –æ–¥–Ω—É —Å—Ü–µ–Ω—É –Ω–∞ —Ä—É—Å—Å–∫–æ–º –≤ –ü–û–í–ï–°–¢–í–û–í–ê–¢–ï–õ–¨–ù–û–ú —Ñ–æ—Ä–º–∞—Ç–µ (–Ω–∏–∫–∞–∫–æ–≥–æ JSON, –Ω–∏–∫–∞–∫–∏—Ö –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤).\n"
        "–ó–∞–ø—Ä–µ—Ç—ã: –Ω–µ—Ç —Ä–µ–ø–æ—Ä—Ç—ë—Ä–æ–≤, –Ω–µ—Ç –º–∏–∫—Ä–æ—Ñ–æ–Ω–æ–≤, –Ω–µ—Ç —Ç–∏—Ç—Ä–æ–≤/–≤–æ–¥—è–Ω—ã—Ö –∑–Ω–∞–∫–æ–≤/–ª–æ–≥–æ—Ç–∏–ø–æ–≤.\n"
        "–°—Ü–µ–Ω–∞ = LEGO —Ñ–∏–≥—É—Ä–∫–∞ –±–∞–±—É—à–∫–∏, LEGO –æ–±—ä–µ–∫—Ç, –ø—Ä–æ—Å—Ç–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ, –æ–¥–Ω–∞ –∫–æ—Ä–æ—Ç–∫–∞—è —Ñ—Ä–∞–∑–∞. –•—É–∫ –≤–∏–¥–µ–Ω –≤ –ø–µ—Ä–≤—ã–µ 2-3 —Å–µ–∫—É–Ω–¥—ã.\n"
        "–°—Ç–∏–ª—å: –ø–ª–∞—Å—Ç–∏–∫–æ–≤—ã–π, –±–ª–æ—á–Ω—ã–π, —è—Ä–∫–∏–π, –¥–µ—Ç—Å–∫–∏–π, –Ω–æ —Å —é–º–æ—Ä–æ–º –¥–ª—è –≤–∑—Ä–æ—Å–ª—ã—Ö.\n"
        "–ü—Ä–∏–º–µ—Ä—ã: 'LEGO –±–∞–±—É—à–∫–∞ –≤ —è—Ä–∫–æ–º –ø–ª–∞—Ç–∫–µ –ø–æ–ª–∏–≤–∞–µ—Ç LEGO —Ü–≤–µ—Ç—ã –∏–∑ LEGO –ª–µ–π–∫–∏, –≤ –∫–æ—Ç–æ—Ä–æ–π –≤–º–µ—Å—Ç–æ –≤–æ–¥—ã LEGO –∫–æ–Ω—Ñ–µ—Ç—Ç–∏'"
    )
    return _gpt(sys, "", temperature=0.8, max_tokens=150) or "LEGO –±–∞–±—É—à–∫–∞ —Å—Ç—Ä–æ–∏—Ç LEGO –¥–æ–º –∏–∑ LEGO –∫–∏—Ä–ø–∏—á–µ–π, –Ω–æ –≤–º–µ—Å—Ç–æ —Ü–µ–º–µ–Ω—Ç–∞ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç LEGO –∫–ª–µ–π."

def generate_lego_reportage_scene1() -> str:
    sys = (
        "LEGO —Ä–µ–ø–æ—Ä—Ç–∞–∂. –°—Ü–µ–Ω–∞ 1 (8 —Å–µ–∫): LEGO –∂—É—Ä–Ω–∞–ª–∏—Å—Ç–∫–∞ (–∂–µ–Ω—â–∏–Ω–∞, 25‚Äì40) –≤ LEGO –¥–≤–æ—Ä–µ, "
        "–≥–æ–≤–æ—Ä–∏—Ç –∫–æ—Ä–æ—Ç–∫—É—é —Ñ—Ä–∞–∑—É –≤ –ö–ê–ú–ï–†–£ –ø–æ-—Ä—É—Å—Å–∫–∏. –ù–∞ –∑–∞–¥–Ω–µ–º –ø–ª–∞–Ω–µ LEGO –±–∞–±—É—à–∫–∞ —Å LEGO –∂–∏–≤–æ—Ç–Ω—ã–º, "
        "–∫–æ—Ç–æ—Ä–æ–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç –ü–†–û–°–¢–´–ï –¥–µ–π—Å—Ç–≤–∏—è: —Å—Ç–æ–∏—Ç, —Å–∏–¥–∏—Ç, –µ—Å—Ç, —Å–ø–∏—Ç, –ø–ª–∞–≤–∞–µ—Ç, —Ö–æ–¥–∏—Ç. "
        "LEGO –∂–∏–≤–æ—Ç–Ω—ã–µ –ë–ï–ó –û–î–ï–ñ–î–´, —Ç–æ–ª—å–∫–æ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è. 1‚Äì2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è. –ë–µ–∑ –∫–∞–≤—ã—á–µ–∫/—Ç–∏—Ä–µ."
    )
    return _gpt(sys, "", temperature=0.8, max_tokens=100) or "LEGO –∂—É—Ä–Ω–∞–ª–∏—Å—Ç–∫–∞ –≤ LEGO –¥–≤–æ—Ä–µ —Ä–∞—Å—Å–∫–∞–∑—ã–≤–∞–µ—Ç –æ LEGO –±–∞–±—É—à–∫–µ —Å LEGO –∫–æ—Ç–∏–∫–æ–º."

def generate_lego_reportage_scene2(context_scene1: str) -> tuple[str, str]:
    sys = (
        "LEGO —Ä–µ–ø–æ—Ä—Ç–∞–∂. –°—Ü–µ–Ω–∞ 2 (8 —Å–µ–∫): –∫—Ä—É–ø–Ω—ã–π –ø–ª–∞–Ω –¢–û–ô –ñ–ï LEGO –±–∞–±—É—à–∫–∏. –û–Ω–∞ –æ—Ç–≤–µ—á–∞–µ—Ç –ø–æ-—Ä—É—Å—Å–∫–∏ –∏ –≤ –∫–æ–Ω—Ü–µ "
        "–≥–æ–≤–æ—Ä–∏—Ç –∫–æ—Ä–æ—Ç–∫—É—é —Ñ–∏–Ω–∞–ª—å–Ω—É—é —Ñ—Ä–∞–∑—É-–±–æ–º–±—É (3‚Äì6 —Å–ª–æ–≤). "
        "–í–ò–ó–£–ê–õ–¨–ù–ê–Ø –ö–û–ù–¢–ò–ù–£–ò–¢–ò: —Ç–µ –∂–µ LEGO –ª—é–¥–∏, LEGO –æ–¥–µ–∂–¥–∞, LEGO –¥–≤–æ—Ä, LEGO –ø—Ä–µ–¥–º–µ—Ç—ã/–∂–∏–≤–æ—Ç–Ω–æ–µ ‚Äî –ø–æ–≤—Ç–æ—Ä–∏—Ç—å. "
        "LEGO –∂–∏–≤–æ—Ç–Ω—ã–µ –≤—ã–ø–æ–ª–Ω—è—é—Ç –ü–†–û–°–¢–´–ï –¥–µ–π—Å—Ç–≤–∏—è: —Å—Ç–æ–∏—Ç, —Å–∏–¥–∏—Ç, –µ—Å—Ç, —Å–ø–∏—Ç, –ø–ª–∞–≤–∞–µ—Ç, —Ö–æ–¥–∏—Ç. "
        "–§–æ—Ä–º–∞—Ç: –æ–ø–∏—Å–∞–Ω–∏–µ —Å—Ü–µ–Ω—ã + —Ñ—Ä–∞–∑–∞ –±–∞–±—É—à–∫–∏ –≤ –∫–∞–≤—ã—á–∫–∞—Ö. –ë–µ–∑ —Ç–∏—Ä–µ/–¥–≤–æ–µ—Ç–æ—á–∏–π."
    )
    result = _gpt(sys, f"–ö–æ–Ω—Ç–µ–∫—Å—Ç —Å—Ü–µ–Ω—ã 1: {context_scene1}", temperature=0.8, max_tokens=120)
    if not result:
        return "LEGO –±–∞–±—É—à–∫–∞ —Å–∏–¥–∏—Ç –Ω–∞ LEGO –ª–∞–≤–æ—á–∫–µ —Å LEGO –∫–æ—Ç–∏–∫–æ–º", "–í–æ—Ç –º–æ–∏ LEGO –ø–∏—Ç–æ–º—Ü—ã"
    
    # –ü–∞—Ä—Å–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Ñ—Ä–∞–∑–∏
    if '"' in result:
        parts = result.split('"')
        if len(parts) >= 2:
            scene = parts[0].strip()
            replica = parts[1].strip()
            return scene, replica
    
    return result, "–í–æ—Ç –º–æ–∏ LEGO –ø–∏—Ç–æ–º—Ü—ã"

def generate_lego_reportage() -> tuple[str, str, str]:
    s1 = generate_lego_reportage_scene1()
    s2, rep = generate_lego_reportage_scene2(s1)
    return s1, s2, rep

# -----------------------------------------------------------------------------
# –í–ò–î–ï–û (VEO)
# -----------------------------------------------------------------------------
from veo_client import generate_video_sync

# -----------------------------------------------------------------------------
# –í–ò–†–¢–£–ê–õ–¨–ù–ê–Ø –ü–†–ò–ú–ï–†–û–ß–ù–ê–Ø (VTO + Nano Banana –¥–ª—è ¬´–ø–µ—Ä–µ-–ø–æ—Å—Ç–∞–Ω–æ–≤–∫–∏¬ª)
# -----------------------------------------------------------------------------
from tryon_client import virtual_tryon   # –æ—Å—Ç–∞–≤—å —Ñ–∞–π–ª, –∫–∞–∫ –ø—Ä–∏—Å—ã–ª–∞–ª —Ä–∞–Ω–µ–µ
from nano_client import repose_or_relocate  # –æ—Å—Ç–∞–≤—å —Ñ–∞–π–ª, –∫–∞–∫ –ø—Ä–∏—Å—ã–ª–∞–ª —Ä–∞–Ω–µ–µ

# -----------------------------------------------------------------------------
# –¢–†–ê–ù–°–§–û–†–ú–ê–¶–ò–ò –ò–ó–û–ë–†–ê–ñ–ï–ù–ò–ô
# -----------------------------------------------------------------------------
from transforms_client import process_transform

# -----------------------------------------------------------------------------
# –ì–ï–ù–ï–†–ê–¶–ò–Ø ¬´–ë–û–ì–ê–¢–û–ì–û¬ª JSON –î–õ–Ø VEO
# -----------------------------------------------------------------------------
def _rich_json_template(scene: str, style: Optional[str], replica: Optional[str],
                        mode: Optional[str], aspect_ratio: str, context: Optional[str]) -> str:
    """
    –°–æ–±–∏—Ä–∞–µ–º –ø—Ä–æ–º—Ç-–¥–∏—Ä–µ–∫—Ç–∏–≤—É –¥–ª—è GPT, —á—Ç–æ–±—ã –æ–Ω –≤–µ—Ä–Ω—É–ª –ì–û–¢–û–í–´–ô JSON –ø–æ–¥ Veo.
    –í–ê–ñ–ù–û: –º—ã –ø—Ä–æ—Å–∏–º –í–°–¢–†–ê–ò–í–ê–¢–¨ style_directives –≤ subject.description, scene, lighting, mood –∏ shot.
    """
    style_text = style_instructions(style)

    rep_rules = ""
    if mode == "reportage":
        rep_rules = (
            "Reporter must be Russian-speaking female, speak Russian. "
            "No English lines. Scene 1: reporter speaks to camera; grandmother with object/animal behind. "
            "Scene 2: CLOSE on the SAME grandmother in the SAME yard/clothes/object ‚Äî strict visual continuity; "
            "repeat characters/props/background from scene 1."
        )

    base_rules = (
        "Return VALID JSON only (no comments). "
        "Prohibit any on-screen text/subtitles/logos/watermarks. "
        "Duration strictly 8 seconds. "
        "IMPORTANT: If the scene involves a grandmother (–±–∞–±—É—à–∫–∞/–±–∞–±–∫–∞), the voice must be described as 'old female voice, 65-80 years old, warm and experienced tone' in the voiceover section."
    )
    
    # –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –ø—Ä–∞–≤–∏–ª–∞ –¥–ª—è —Ä–µ–∂–∏–º–∞ NEUROKUDO
    nkudo_rules = ""
    if mode == "nkudo":
        nkudo_rules = (
            "NEUROKUDO STYLE RULES - Use these EXACT examples:\n"
            "LOCATIONS: 'Zalupinsk backyard', 'Soviet kitchen with green wallpaper', 'chicken coop interior', 'muddy yard with puddles'\n"
            "GRANDMOTHER: 'elderly (~75-85 y.o.)', 'blue floral housecoat', 'red headscarf tied under chin', 'rubber boots', 'quilted jacket'\n"
            "CREATURES: SIMPLE and REALISTIC actions only - animals can walk, run, swim, eat, sleep, stand, sit\n"
            "NO CLOTHING on animals - they are naked/natural\n"
            "NO COMPLEX ACTIONS - no acrobatics, dancing, rolling, complex movements\n"
            "GOOD examples: 'whales swimming in pool', 'elephants eating grass', 'crocodiles sleeping', 'penguins standing'\n"
            "BAD examples: 'penguins in boots', 'crocodiles doing acrobatics', 'elephants wearing clothes'\n"
            "DIALOGUE TONE: 'calm, matter-of-fact', 'proud explanation', 'as if normal', 'village accent'\n"
            "VISUAL DETAILS: 'rusty metal frame', 'wooden fence', 'enamel kettle', 'wicker basket', 'straw on floor', 'muddy ground'\n"
            "CAMERA: 'handheld documentary', 'shaky realism', 'close-up on grandmother's face', 'wide shot showing scale'\n"
            "EXAMPLES:\n"
            "- 'elderly Russian grandmother (~78 y.o.) stands proudly in rubber boots, holding metal bucket, gesturing toward whales swimming'\n"
            "- 'grandmother in blue housecoat feeds velociraptors in chicken coop like regular chickens'\n"
            "- 'babushka in quilted jacket calmly explains about dinosaurs standing in her backyard'\n"
    )

    sys = (
        "You are a prompt engineer for Google Veo 3.0.\n"
        f"{base_rules} {rep_rules} {nkudo_rules}\n"
        "CRITICAL: Apply visual styling STRICTLY to ALL visual elements. "
        "Insert style_directives content into these fields: "
        "subject.description, scene.location, lighting, mood and shot (camera).\n"
        "The style MUST be visible in the final video - this is the most important requirement!\n"
        "Apply the style consistently across all visual elements.\n"
        "Use this schema (keys in English; values can be Russian):\n"
        "{\n"
        '  "model": "veo-3.0-fast",\n'
        '  "duration": 8,\n'
        '  "aspect_ratio": "9:16|16:9",\n'
        '  "style_directives": "–∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —É–∫–∞–∑–∞–Ω–∏—è –ø–æ –≤–∏–¥—É –≥–µ—Ä–æ—è/–æ–¥–µ–∂–¥—ã/–º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤/–æ–∫—Ä—É–∂–µ–Ω–∏—è/–ø–∞–ª–∏—Ç—Ä—ã/—Å–≤–µ—Ç–∞/–∫–∞–º–µ—Ä—ã/–ø–æ—Å—Ç–∞",\n'
        '  "shot": {"composition": "...", "camera_motion": "...", "lens": "35mm", "frame_rate": "24fps", "film_grain": "subtle"},\n'
        '  "subject": {"description": "... (—Å–æ —Å—Ç–∏–ª–µ–º)", "voice_sync": false},\n'
        '  "scene": {"location": "... (—Å–æ —Å—Ç–∏–ª–µ–º)", "time_of_day": "..."},\n'
        '  "action": "what happens in 8s concisely",\n'
        '  "voiceover": {"voice": "...", "line": "..."},\n'
        '  "characters": [{"name":"...", "position":"...", "appearance":"... (—Å–æ —Å—Ç–∏–ª–µ–º)", "action":"..."}],\n'
        '  "ambient": "fx list",\n'
        '  "lighting": "–æ—Å–≤–µ—â–µ–Ω–∏–µ —Å —É—á—ë—Ç–æ–º —Å—Ç–∏–ª—è",\n'
        '  "mood": "–Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ, –≤—ã—Ç–µ–∫–∞—é—â–µ–µ –∏–∑ —Å—Ç–∏–ª—è",\n'
        '  "restrictions": "No text or logos."\n'
        "}\n"
        "Always keep the JSON compact and consistent."
    )

    usr = (
        f"scene_text: {scene}\n"
        f"replica: {replica or ''}\n"
        f"aspect_ratio: {aspect_ratio}\n"
    )
    if style_text:
        usr += f"IMPORTANT: Apply this style to ALL visual elements: {style_text}\n"
        usr += f"Make sure the style is embedded in subject.description, scene.location, lighting, mood, and shot fields.\n"
    if context:
        usr += f"context_for_continuity: {context}\n"

    try:
        r = gpt.chat.completions.create(
            model=OPENAI_MODEL,
            messages=[{"role": "system", "content": sys},
                      {"role": "user", "content": usr}],
            temperature=0.55,
            max_tokens=1300,
        )
        return (r.choices[0].message.content or "").strip()
    except Exception as e:
        log.error("GPT JSON convert error: %s", e)
        # fallback –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ —á–µ—Å—Ç–Ω—ã–π –∏ –ø—Ä–æ—Å—Ç–æ–π
        style_stub = style_text or ""
        return json.dumps({
            "model": "veo-3.0-fast",
            "duration": 8,
            "aspect_ratio": aspect_ratio,
            "style_directives": style_stub,
            "shot": {"composition": "medium shot (—Å–æ —Å—Ç–∏–ª–µ–º)", "camera_motion": "static (—Å–æ —Å—Ç–∏–ª–µ–º)",
                     "lens": "35mm", "frame_rate": "24fps", "film_grain": "subtle"},
            "subject": {"description": f"{_sanitize(scene)} (—Å–æ —Å—Ç–∏–ª–µ–º: {style_stub})", "voice_sync": False},
            "scene": {"location": "rural yard (—Å–æ —Å—Ç–∏–ª–µ–º)", "time_of_day": "day"},
            "action": "simple 8 second action",
            "voiceover": {"voice": "female", "line": _sanitize(replica or "")},
            "characters": [],
            "ambient": "light wind, birds",
            "lighting": "natural daylight (—Å —É—á—ë—Ç–æ–º —Å—Ç–∏–ª—è)",
            "mood": "grounded (—Å —É—á—ë—Ç–æ–º —Å—Ç–∏–ª—è)",
            "restrictions": "No text or logos"
        }, ensure_ascii=False)

def _neurokudo_json_parser(scene: str, style: Optional[str], replica: Optional[str],
                          mode: Optional[str], aspect_ratio: str, context: Optional[str] = None) -> str:
    """
    –ù–æ–≤—ã–π JSON-–ø–∞—Ä—Å–µ—Ä –¥–ª—è Veo 3 –≤ —Ñ–æ—Ä–º–∞—Ç–µ, –∫–æ—Ç–æ—Ä—ã–π —Ç–æ—á–Ω–æ —Ä–∞–±–æ—Ç–∞–µ—Ç.
    –ü–∞—Ä—Å–∏—Ç —Ä—É—Å—Å–∫–∏–π —Ç–µ–∫—Å—Ç —Å—Ü–µ–Ω—ã –∏ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç –≤ —Å—Ç—Ä–æ–≥–∏–π JSON —Ñ–æ—Ä–º–∞—Ç –¥–ª—è VEO 3.
    """
    sys_prompt = (
        "You are a strict parser for Veo 3 video generation.\n"
        "Input: one short paragraph in Russian that describes a single 8-second scene.\n"
        "Output: only valid JSON in English (no explanations, no comments, no text outside JSON).\n\n"
        "JSON Output Format (exactly as shown):\n"
        "{\n"
        '  "shot": {\n'
        '    "composition": "detailed description of the shot composition",\n'
        '    "camera_motion": "tripod-stable, light breeze moving clothing and trees",\n'
        '    "lens": "35mm",\n'
        '    "frame_rate": "24fps",\n'
        '    "film_grain": "clean digital"\n'
        '  },\n'
        '  "environment": {\n'
        '    "location": "Exterior ‚Äî description of the place",\n'
        '    "time_of_day": "afternoon",\n'
        '    "weather": "sunny, warm, clear skies, gentle breeze"\n'
        '  },\n'
        '  "characters": [\n'
        '    {\n'
        '      "name": "Character name",\n'
        '      "position": "position in frame",\n'
        '      "appearance": "detailed appearance description",\n'
        '      "action": "specific action being performed"\n'
        '    }\n'
        '  ],\n'
        '  "dialogue": [\n'
        '    {\n'
        '      "character": "Character name",\n'
        '      "voice": "voice description",\n'
        '      "line": "Russian dialogue text"\n'
        '    }\n'
        '  ],\n'
        '  "constraints": "Clear video without text or subtitles"\n'
        '}\n\n'
        "Strict Rules:\n"
        "- Always return valid JSON, nothing else\n"
        "- Composition must be detailed and specific (e.g., 'medium wide street-level shot of...')\n"
        "- Characters array must include all people mentioned\n"
        "- Dialogue array must include all speech mentioned\n"
        "- Russian dialogue goes in 'line' field\n"
        "- Maximum 2500 characters total\n"
        "- Extract all objects, actions, and details mentioned\n"
        "- If no dialogue mentioned, use empty dialogue array\n"
        "- Always include constraints field\n\n"
        "Example:\n"
        "Input: ¬´–°—Ç–∞—Ä—É—à–∫–∞ –≤ —è—Ä–∫–æ–º –ø–ª–∞—Ç–∫–µ –ø–æ–ª–∏–≤–∞–µ—Ç —Ü–≤–µ—Ç—ã –∏–∑ —Å—Ç–∞—Ä–æ–≥–æ –≤–µ–¥—Ä–∞, —Ä—è–¥–æ–º —Å –Ω–µ–π —Å—Ç–æ–∏—Ç –≥–∏–≥–∞–Ω—Ç—Å–∫–∞—è —Ä–æ–∑–æ–≤–∞—è –≥—É—Å–µ–Ω–∏—Ü–∞, –ø–æ—Ö–æ–∂–∞—è –Ω–∞ –º—è–≥–∫—É—é –∏–≥—Ä—É—à–∫—É. –û–Ω–∞ —Å —É–ª—ã–±–∫–æ–π –≥–æ–≤–æ—Ä–∏—Ç: \"–í–æ—Ç, –ø–æ–ª–∏–≤–∞—é —Ü–≤–µ—Ç–æ—á–∫–∏, —Å–∫–æ—Ä–æ –∑–∞—Ü–≤–µ—Ç—É—Ç, –∞ —Ç—ã, –ì—Ä–∏—à–∫–∞, –Ω–µ –ø—Ä–æ–±—É–π –∏—Ö, –æ–Ω–∏ –¥–ª—è –∫—Ä–∞—Å–æ—Ç—ã!\" –ì—É—Å–µ–Ω–∏—Ü–∞ –≤–¥—Ä—É–≥ –∏–∑–¥–∞–µ—Ç –∑–∞–±–∞–≤–Ω—ã–π –∑–≤—É–∫, –∏ –±–∞–±–∫–∞ —á—É—Ç—å –Ω–µ —Ä–∞—Å–ø–ª–µ—Å–∫–∏–≤–∞–µ—Ç –≤–æ–¥—É.¬ª\n"
        "Output: {\n"
        '  "shot": {\n'
        '    "composition": "medium shot of elderly woman in bright headscarf watering flowers from old bucket, with giant pink caterpillar resembling soft toy standing nearby in rural yard",\n'
        '    "camera_motion": "tripod-stable, light breeze moving clothing and trees",\n'
        '    "lens": "35mm",\n'
        '    "frame_rate": "24fps",\n'
        '    "film_grain": "clean digital"\n'
        '  },\n'
        '  "environment": {\n'
        '    "location": "Exterior ‚Äî rural yard with flowers",\n'
        '    "time_of_day": "afternoon",\n'
        '    "weather": "sunny, warm, clear skies, gentle breeze"\n'
        '  },\n'
        '  "characters": [\n'
        '    {\n'
        '      "name": "Elderly Woman",\n'
        '      "position": "center of frame",\n'
        '      "appearance": "elderly woman (~75-80 y.o.), bright headscarf, old bucket",\n'
        '      "action": "watering flowers, smiling"\n'
        '    },\n'
        '    {\n'
        '      "name": "Giant Pink Caterpillar",\n'
        '      "position": "next to elderly woman",\n'
        '      "appearance": "giant pink caterpillar resembling soft toy",\n'
        '      "action": "standing nearby, making funny sound"\n'
        '    }\n'
        '  ],\n'
        '  "dialogue": [\n'
        '    {\n'
        '      "character": "Elderly Woman",\n'
        '      "voice": "female (~75-80 y.o.), warm, cheerful tone",\n'
        '      "line": "–í–æ—Ç, –ø–æ–ª–∏–≤–∞—é —Ü–≤–µ—Ç–æ—á–∫–∏, —Å–∫–æ—Ä–æ –∑–∞—Ü–≤–µ—Ç—É—Ç, –∞ —Ç—ã, –ì—Ä–∏—à–∫–∞, –Ω–µ –ø—Ä–æ–±—É–π –∏—Ö, –æ–Ω–∏ –¥–ª—è –∫—Ä–∞—Å–æ—Ç—ã!"\n'
        '    }\n'
        '  ],\n'
        '  "constraints": "Clear video without text or subtitles"\n'
        '}'
    )
    
    # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –≤—Ö–æ–¥–Ω–æ–π —Ç–µ–∫—Å—Ç
    input_text = scene
    if replica:
        input_text += f"\n–§—Ä–∞–∑–∞: {replica}"
    
    try:
        response = gpt.chat.completions.create(
            model=OPENAI_MODEL,
            messages=[
                {"role": "system", "content": sys_prompt},
                {"role": "user", "content": input_text}
            ],
            temperature=0.3,
            max_tokens=1000,
        )
        
        json_text = response.choices[0].message.content.strip()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —ç—Ç–æ –≤–∞–ª–∏–¥–Ω—ã–π JSON
        parsed_json = json.loads(json_text)
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º JSON –≤ –Ω–æ–≤–æ–º —Ñ–æ—Ä–º–∞—Ç–µ Veo 3
        return json.dumps(parsed_json, ensure_ascii=False)
        
    except Exception as e:
        log.error("Veo 3 JSON parser error: %s", e)
        # Fallback –∫ —Å—Ç–∞—Ä–æ–º—É –º–µ—Ç–æ–¥—É
        return _rich_json_template(scene, style, replica, mode, aspect_ratio, context)

def to_json_prompt(scene: str, style: Optional[str], replica: Optional[str],
                   mode: Optional[str], aspect_ratio: str, context: Optional[str] = None) -> str:
    # –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–∏—Å–ª–∞–ª —É–∂–µ JSON ‚Äî –∏—Å–ø–æ–ª—å–∑—É–µ–º –∫–∞–∫ –µ—Å—Ç—å
    try:
        json.loads(scene)
        return scene
    except Exception:
        pass
    
    if not gpt:
        # fallback JSON –µ—Å–ª–∏ GPT –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω
        return json.dumps({
            "model": "veo-3.0-fast",
            "duration": 8,
            "aspect_ratio": aspect_ratio,
            "style_directives": style_instructions(style),
            "shot": {"composition": "medium shot", "camera_motion": "static",
                     "lens": "35mm", "frame_rate": "24fps", "film_grain": "subtle"},
            "subject": {"description": _sanitize(scene), "voice_sync": False},
            "scene": {"location": "generic", "time_of_day": "day"},
            "action": "8s action",
            "voiceover": {"voice": "female", "line": _sanitize(replica or "")},
            "characters": [],
            "ambient": "light fx",
            "lighting": "natural",
            "mood": "neutral",
            "restrictions": "No text or logos"
        }, ensure_ascii=False)
    
    # –ù–æ–≤—ã–π JSON-–ø–∞—Ä—Å–µ—Ä –¥–ª—è NEUROKUDO —Å—Ç–∏–ª—è
    return _neurokudo_json_parser(scene, style, replica, mode, aspect_ratio, context)

# -----------------------------------------------------------------------------
# –°–û–°–¢–û–Ø–ù–ò–ï
# -----------------------------------------------------------------------------
State = Dict[str, Any]
users: Dict[int, State] = {}

def _ensure(uid: int):
    if uid not in users:
        # –°–Ω–∞—á–∞–ª–∞ –ø—ã—Ç–∞–µ–º—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        user_data = db.get_user(uid)
        
        if user_data:
            # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
            user_data["user_id"] = uid  # –î–æ–±–∞–≤–ª—è–µ–º user_id
            users[uid] = user_data
        else:
            # –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å - —Å–æ–∑–¥–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            users[uid] = {
                "user_id": uid,  # –î–æ–±–∞–≤–ª—è–µ–º user_id –¥–ª—è —Å–≤—è–∑–∏ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
                "mode": None,
                "source_text": None,
                "scene": None,
                "style": None,
                "replica": None,
                "awaiting_scene": False,
                "awaiting_scene_edit": False,
                "awaiting_support": False,
                # JSON advanced
                "jsonpro": {
                    "await_text": False,
                    "last_json": None,
                    "orientation": DEFAULT_ORIENTATION,
                },
                # NKudo
                "nkudo_type": None,
                "nkudo_scene1": None,
                "nkudo_scene2": None,
                # –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏—è
                "orientation": DEFAULT_ORIENTATION,
                "with_audio": DEFAULT_AUDIO,  # –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –∞—É–¥–∏–æ
                # –º–æ–Ω–µ—Ç—ã –∏ –±–∏–ª–ª–∏–Ω–≥
                "coins": 0,  # –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–æ–Ω–µ—Ç
                "video_bonus": 2,  # –±–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –≤–∏–¥–µ–æ –¥–ª—è –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
                "photo_bonus": 3,  # –±–µ—Å–ø–ª–∞—Ç–Ω—ã–µ —Ñ–æ—Ç–æ –¥–ª—è –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
                "tryon_bonus": 1,  # –±–µ—Å–ø–ª–∞—Ç–Ω–∞—è –ø—Ä–∏–º–µ—Ä–æ—á–Ω–∞—è –¥–ª—è –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
                "plan": "lite",  # —Ç–∞—Ä–∏—Ñ–Ω—ã–π –ø–ª–∞–Ω
                "jobs": {},  # –∏—Å—Ç–æ—Ä–∏—è –∑–∞–¥–∞—á
                "daily": {"date": "", "videos": 0},  # –¥–Ω–µ–≤–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
                "videos_left": 0,  # –æ—Å—Ç–∞–≤—à–∏–µ—Å—è —Ä–æ–ª–∏–∫–∏
                "photos_left": 0,  # –æ—Å—Ç–∞–≤—à–∏–µ—Å—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏
                "processed_payments": set(),  # –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –ø–ª–∞—Ç–µ–∂–∏ –¥–ª—è –∏–¥–µ–º–ø–æ—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏
                # —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
                "awaiting_transform": False,  # –æ–∂–∏–¥–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É —Ñ–æ—Ç–æ
                "transform_type": None,  # —Ç–∏–ø —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–∏
                "transform_quality": "basic",  # –∫–∞—á–µ—Å—Ç–≤–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏
                "transform_images": [],  # –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
                "transform_text": None,  # —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–∏
                "current_job_id": None,  # ID —Ç–µ–∫—É—â–µ–π –∑–∞–¥–∞—á–∏
                # –ø—Ä–∏–º–µ—Ä–æ—á–Ω–∞—è
                "tryon": {
                    "stage": "idle",          # idle | await_person | await_garment | confirm | after
                    "person": None,           # bytes
                    "garment": None,          # bytes
                    "dressed": None,          # bytes (–ø–æ—Å–ª–µ–¥–Ω–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç VTO)
                    "await_bg": False,        # –∂–¥—ë–º —Ñ–æ–Ω –¥–ª—è —Ä–µ–ª–æ–∫–∞—Ü–∏–∏
                    "await_prompt": False,    # –∂–¥—ë–º —Ç–µ–∫—Å—Ç –æ–ø–∏—Å–∞–Ω–∏—è –ø–æ–∑—ã/–ª–æ–∫–∞—Ü–∏–∏
                },
            }
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        db.save_user(uid, users[uid])

# -----------------------------------------------------------------------------
# –ö–õ–ê–í–ò–ê–¢–£–†–´
# -----------------------------------------------------------------------------
def reply_main_kb():
    # –ù–∏–∂–Ω–µ–µ reply-–º–µ–Ω—é ‚Äî —Ç–æ–ª—å–∫–æ SOS, –∫–Ω–æ–ø–∫–∞ ¬´–ú–µ–Ω—é¬ª –∏ ¬´–ù–µ –≤–∏–¥–Ω–æ –∫–Ω–æ–ø–∫–∏¬ª
    return ReplyKeyboardMarkup(
        [
            [KeyboardButton("üè† –ú–µ–Ω—é")],
            [KeyboardButton("üÜò –í–æ–∑–Ω–∏–∫–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã")],
            [KeyboardButton("üåì –ù–µ –≤–∏–¥–Ω–æ –∫–Ω–æ–ø–∫–∏")],
        ],
        resize_keyboard=True,
        one_time_keyboard=False
    )

def kb_home_inline():
    # –ò–Ω–ª–∞–π–Ω-–º–µ–Ω—é –ë–ï–ó SOS (–ø–æ –ø—Ä–æ—Å—å–±–µ)
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("üé¨ –°–æ–∑–¥–∞–Ω–∏–µ –≤–∏–¥–µ–æ", callback_data="menu_make")],
        [InlineKeyboardButton("üß±LEGO –º—É–ª—å—Ç–∏–∫–∏", callback_data="menu_lego")],
        [InlineKeyboardButton("üì∏ –ò–∑–º–µ–Ω–∏—Ç—å —Ñ–æ—Ç–æ", callback_data="menu_transforms")],
        [InlineKeyboardButton("üëó –í–∏—Ä—Ç—É–∞–ª—å–Ω–∞—è –ø—Ä–∏–º–µ—Ä–æ—á–Ω–∞—è", callback_data="menu_tryon")],
        [InlineKeyboardButton("üßæ JSON (–¥–ª—è –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã—Ö)", callback_data="menu_jsonpro")],
        [InlineKeyboardButton("üìö –ì–∞–π–¥—ã / –û–ø–ª–∞—Ç–∞", callback_data="menu_guides")],
        [InlineKeyboardButton("üë§ –ü—Ä–æ—Ñ–∏–ª—å / –ë–∞–ª–∞–Ω—Å", callback_data="menu_profile")],
    ])

def kb_modes():
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("üß†‚ú® –£–º–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫", callback_data="mode_helper")],
        [InlineKeyboardButton("üîÆ –ö–∞–∫ —É NEUROKUDO", callback_data="mode_nkudo")],
        [InlineKeyboardButton("‚úèÔ∏è –Ø —Å–∞–º –Ω–∞–ø–∏—à—É –ø—Ä–æ–º—Ç", callback_data="mode_manual")],
        [InlineKeyboardButton("üé≤ –ú–µ–º–Ω—ã–π —Ä–µ–∂–∏–º", callback_data="mode_meme")],
        [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="back_home")],
    ])

def kb_back_only():
    return InlineKeyboardMarkup([[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_modes")]])

def kb_back_transforms():
    return InlineKeyboardMarkup([[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="menu_transforms")]])

def kb_variants():
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("üîç –£—Å–ª–æ–∂–Ω–∏", callback_data="var_complex"),
         InlineKeyboardButton("‚úÇÔ∏è –£–ø—Ä–æ—Å—Ç–∏", callback_data="var_simple")],
        [InlineKeyboardButton("üí¨ –ü—Ä–∏–¥—É–º–∞—Ç—å —Ñ—Ä–∞–∑—É", callback_data="generate_replica"),
         InlineKeyboardButton("‚úçÔ∏è –í–≤–µ—Å—Ç–∏ —Ñ—Ä–∞–∑—É –≤—Ä—É—á–Ω—É—é", callback_data="manual_replica")],
        [InlineKeyboardButton("üîÑ –ó–∞–Ω–æ–≤–æ", callback_data="var_again"),
         InlineKeyboardButton("‚û°Ô∏è –î–∞–ª—å—à–µ", callback_data="go_next")],
        [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_modes")],
    ])

def kb_variants_with_phrase():
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("üîç –£—Å–ª–æ–∂–Ω–∏", callback_data="var_complex"),
         InlineKeyboardButton("‚úÇÔ∏è –£–ø—Ä–æ—Å—Ç–∏", callback_data="var_simple")],
        [InlineKeyboardButton("üí¨ –î—Ä—É–≥–∞—è —Ñ—Ä–∞–∑–∞", callback_data="generate_replica"),
         InlineKeyboardButton("‚úçÔ∏è –ù–∞–ø–∏—Å–∞—Ç—å —Ñ—Ä–∞–∑—É", callback_data="manual_replica")],
        [InlineKeyboardButton("üîÑ –ó–∞–Ω–æ–≤–æ", callback_data="var_again"),
         InlineKeyboardButton("‚û°Ô∏è –î–∞–ª—å—à–µ", callback_data="go_next")],
        [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_modes")],
    ])

def kb_nkudo_menu():
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("üîÆ –°–æ–∑–¥–∞—Ç—å –∫–∞–∫ —É Neurokudo", callback_data="nkudo_single")],
        [InlineKeyboardButton("üé§ –†–µ–ø–æ—Ä—Ç–∞–∂ –∏–∑ –¥–µ—Ä–µ–≤–Ω–∏", callback_data="nkudo_reportage")],
        [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —Ä–µ–∂–∏–º–∞–º", callback_data="back_modes")],
    ])

def kb_lego_menu():
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("üß± LEGO —Å—Ü–µ–Ω–∞", callback_data="lego_single")],
        [InlineKeyboardButton("üé§ LEGO —Ä–µ–ø–æ—Ä—Ç–∞–∂", callback_data="lego_reportage")],
        [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —Ä–µ–∂–∏–º–∞–º", callback_data="back_modes")],
    ])

def kb_nkudo_single():
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("üîÑ –î—Ä—É–≥–∞—è —Å—Ü–µ–Ω–∞", callback_data="nkudo_regenerate_single")],
        [InlineKeyboardButton("üí¨ –î—Ä—É–≥–∞—è —Ñ—Ä–∞–∑–∞", callback_data="nkudo_embed_replica")],
        [InlineKeyboardButton("üß†‚ú® –£–ª—É—á—à–∏—Ç—å –ø–æ–º–æ—â–Ω–∏–∫–æ–º", callback_data="nkudo_improve_single")],
        [InlineKeyboardButton("‚û°Ô∏è –î–∞–ª–µ–µ –∫ —Å—Ç–∏–ª—è–º", callback_data="go_next")],
        [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="nkudo_menu_back")],
    ])

def kb_lego_single():
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("üîÑ –î—Ä—É–≥–∞—è —Å—Ü–µ–Ω–∞", callback_data="lego_regenerate_single")],
        [InlineKeyboardButton("üí¨ –î—Ä—É–≥–∞—è —Ñ—Ä–∞–∑–∞", callback_data="lego_embed_replica")],
        [InlineKeyboardButton("üß†‚ú® –£–ª—É—á—à–∏—Ç—å –ø–æ–º–æ—â–Ω–∏–∫–æ–º", callback_data="lego_improve_single")],
        [InlineKeyboardButton("‚û°Ô∏è –î–∞–ª–µ–µ –∫ –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏–∏", callback_data="go_orientation")],
        [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="lego_menu_back")],
    ])

def kb_nkudo_reportage_edit():
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("üé≤ –ö—Ä—É—Ç–∏—Ç—å —Å—Ü–µ–Ω—É 1", callback_data="nkudo_reroll_scene1")],
        [InlineKeyboardButton("üé≤ –ö—Ä—É—Ç–∏—Ç—å —Å—Ü–µ–Ω—É 2", callback_data="nkudo_reroll_scene2")],
        [InlineKeyboardButton("‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å —Å—Ü–µ–Ω—É 1", callback_data="nkudo_edit_scene1")],
        [InlineKeyboardButton("‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å —Å—Ü–µ–Ω—É 2", callback_data="nkudo_edit_scene2")],
        [InlineKeyboardButton("üîÑ –í—Å—ë –∑–∞–Ω–æ–≤–æ", callback_data="nkudo_regenerate_report")],
        [InlineKeyboardButton("üß†‚ú® –£–ª—É—á—à–∏—Ç—å –ø–æ–º–æ—â–Ω–∏–∫–æ–º", callback_data="nkudo_improve_report")],
        [InlineKeyboardButton("‚û°Ô∏è –î–∞–ª–µ–µ –∫ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏", callback_data="nkudo_approve")],
        [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="nkudo_menu_back")],
    ])

def kb_scene_edit():
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("‚úÖ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å", callback_data="scene_save")],
        [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="scene_cancel")],
    ])

def kb_styles():
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("üáØüáµ –ê–Ω–∏–º—ç", callback_data="style_–ê–Ω–∏–º—ç")],
        [InlineKeyboardButton("üß± LEGO", callback_data="style_LEGO")],
        [InlineKeyboardButton("‚è© –ë–µ–∑ —Å—Ç–∏–ª—è ‚Äì –¥–∞–ª–µ–µ", callback_data="style_None")],
    ])

def kb_after_style():
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("üí¨ –ü—Ä–∏–¥—É–º–∞—Ç—å —Ñ—Ä–∞–∑—É", callback_data="generate_replica")],
        [InlineKeyboardButton("‚û°Ô∏è –î–∞–ª–µ–µ", callback_data="go_orientation")],
        [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_modes")],
    ])

def kb_after_replica():
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("‚úçÔ∏è –í–≤–µ—Å—Ç–∏ —Ñ—Ä–∞–∑—É –≤—Ä—É—á–Ω—É—é", callback_data="manual_replica")],
        [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="go_next")],
        [InlineKeyboardButton("‚û°Ô∏è –î–∞–ª–µ–µ", callback_data="go_orientation")]
    ])

def kb_final_prompt():
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("üöÄ –°–æ–∑–¥–∞—Ç—å –≤–∏–¥–µ–æ", callback_data="generate_now")],
        [InlineKeyboardButton("üîÑ –ü–µ—Ä–µ–¥–µ–ª–∞—Ç—å", callback_data="go_next")],
    ])

def kb_orientation():
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("üì± –í–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–æ–µ (9:16)", callback_data="ori_916")],
        [InlineKeyboardButton("üñ• –ì–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–æ–µ (16:9)", callback_data="ori_169")],
    ])

def kb_audio_choice():
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("üîä –° –∞—É–¥–∏–æ (–¥–æ—Ä–æ–∂–µ)", callback_data="audio_on")],
        [InlineKeyboardButton("üîá –ë–µ–∑ –∞—É–¥–∏–æ (–¥–µ—à–µ–≤–ª–µ)", callback_data="audio_off")],
    ])

def kb_meme():
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("üé≤ –ö—Ä—É—Ç–∏—Ç—å –µ—â—ë", callback_data="meme_again")],
        [InlineKeyboardButton("üß†‚ú® –£–ª—É—á—à–∏—Ç—å —Å –ø–æ–º–æ—â–Ω–∏–∫–æ–º", callback_data="meme_to_helper")],
        [InlineKeyboardButton("‚û°Ô∏è –î–∞–ª—å—à–µ", callback_data="go_next")],
        [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_modes")],
    ])

def kb_after_video():
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("üîß –î–æ—Ä–∞–±–æ—Ç–∞—Ç—å –ø—Ä–æ–º—Ç", callback_data="refine_prompt")],
        [InlineKeyboardButton("üîÑ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –µ—â—ë", callback_data="menu_make")],
        [InlineKeyboardButton("üè† –í –º–µ–Ω—é", callback_data="back_home")],
    ])

# --- –ü—Ä–∏–º–µ—Ä–æ—á–Ω–∞—è: –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã ---
def kb_tryon_start():
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_home")],
    ])

def kb_tryon_need_garment():
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("‚ùå –°–±—Ä–æ—Å–∏—Ç—å", callback_data="tryon_reset")],
    ])

def kb_tryon_confirm(forward="‚ë° ‚Üí ‚ë†", tryon_bonus=0):
    if tryon_bonus > 0:
        button_text = "‚ú® –ü—Ä–∏–º–µ—Ä–∏—Ç—å (–±–µ—Å–ø–ª–∞—Ç–Ω–æ)"
    else:
        button_text = "‚ú® –ü—Ä–∏–º–µ—Ä–∏—Ç—å (‚àí5 –º–æ–Ω–µ—Ç–æ–∫)"
    
    return InlineKeyboardMarkup([
        [InlineKeyboardButton(button_text, callback_data="tryon_confirm")],
        [InlineKeyboardButton("üîÅ –ü–æ–º–µ–Ω—è—Ç—å –º–µ—Å—Ç–∞–º–∏", callback_data="tryon_swap")],
        [InlineKeyboardButton("‚ùå –°–±—Ä–æ—Å–∏—Ç—å", callback_data="tryon_reset")],
    ])

def kb_tryon_after():
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("üîÑ –î—Ä—É–≥–∞—è –ø–æ–∑–∞ (–Ω–æ–≤–æ–µ —Ñ–æ—Ç–æ —á–µ–ª–æ–≤–µ–∫–∞)", callback_data="tryon_new_pose")],
        [InlineKeyboardButton("üëó –î—Ä—É–≥–∞—è –æ–¥–µ–∂–¥–∞", callback_data="tryon_new_garment")],
        [InlineKeyboardButton("üèû –ù–æ–≤–∞—è –ª–æ–∫–∞—Ü–∏—è (—Ñ–æ–Ω —Ñ–æ—Ç–æ)", callback_data="tryon_new_bg")],
        [InlineKeyboardButton("‚úçÔ∏è –û–ø–∏—Å–∞—Ç—å –ø–æ–∑—É/–ª–æ–∫–∞—Ü–∏—é (—ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç)", callback_data="tryon_prompt")],
        [InlineKeyboardButton("üè† –í –º–µ–Ω—é", callback_data="back_home")],
    ])

# --- JSON (–¥–ª—è –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã—Ö) ---
def kb_jsonpro_start():
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("‚úèÔ∏è –í–≤–µ—Å—Ç–∏ —Ç–µ–∫—Å—Ç —Å—Ü–µ–Ω—ã", callback_data="jsonpro_enter")],
        [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_home")],
    ])

def kb_jsonpro_after_text():
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("üì± –í–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–æ–µ (9:16)", callback_data="jsonpro_ori_916")],
        [InlineKeyboardButton("üñ• –ì–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–æ–µ (16:9)", callback_data="jsonpro_ori_169")],
        [InlineKeyboardButton("üöÄ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å", callback_data="jsonpro_generate")],
        [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_home")],
    ])

# –ù–æ–≤—ã–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è "–ò–∑–º–µ–Ω–∏ —Ñ–æ—Ç–æ"
def kb_transforms():
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("‚ú® –£–¥–∞–ª–∏—Ç—å —Ñ–æ–Ω (‚àí1 –º–æ–Ω–µ—Ç–∫–∞)", callback_data="transform_remove_bg")],
        [InlineKeyboardButton("üë• –°–æ–≤–º–µ—Å—Ç–∏—Ç—å –ª—é–¥–µ–π (‚àí1 –º–æ–Ω–µ—Ç–∫–∞)", callback_data="transform_merge_people")],
        [InlineKeyboardButton("üß© –í–Ω–µ–¥—Ä–∏—Ç—å –æ–±—ä–µ–∫—Ç –Ω–∞ —Ñ–æ—Ç–æ (‚àí1 –º–æ–Ω–µ—Ç–∫–∞)", callback_data="transform_inject_object")],
        [InlineKeyboardButton("ü™Ñ –ú–∞–≥–∏—á–µ—Å–∫–∞—è —Ä–µ—Ç—É—à—å (‚àí1 –º–æ–Ω–µ—Ç–∫–∞)", callback_data="transform_retouch")],
        [InlineKeyboardButton("üì∑ Polaroid (‚àí1 –º–æ–Ω–µ—Ç–∫–∞)", callback_data="transform_polaroid")],
        [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_home")],
    ])

def kb_transform_quality():
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("‚ö° –ë—ã—Å—Ç—Ä–æ–µ ‚àí1 –º–æ–Ω–µ—Ç–∫–∞", callback_data="quality_basic")],
        [InlineKeyboardButton("üé® –ü—Ä–µ–º–∏—É–º ‚àí2 –º–æ–Ω–µ—Ç–∫–∏", callback_data="quality_premium")],
        [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="menu_transforms")],
    ])

def kb_transform_result():
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("üîÑ –ï—â—ë –≤–∞—Ä–∏–∞–Ω—Ç (‚àí1 –º–æ–Ω–µ—Ç–∫–∞)", callback_data="transform_retry")],
        [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="menu_transforms")],
    ])

def kb_video_generate(with_audio=True):
    cost = 10  # COST_VIDEO
    audio_text = "üîä –°–æ –∑–≤—É–∫–æ–º" if with_audio else "üîá –¢–∏—Ö–∏–π —Ä–µ–∂–∏–º"
    return InlineKeyboardMarkup([
        [InlineKeyboardButton(f"üöÄ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Ä–æ–ª–∏–∫ (‚àí{cost} –º–æ–Ω–µ—Ç–æ–∫)", callback_data="generate_now")],
        [InlineKeyboardButton(audio_text, callback_data="toggle_audio")],
        [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_modes")],
    ])

def kb_video_result():
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("üîÑ –°–¥–µ–ª–∞—Ç—å –µ—â—ë –≤–∞—Ä–∏–∞–Ω—Ç (‚àí10 –º–æ–Ω–µ—Ç–æ–∫)", callback_data="video_retry")],
        [InlineKeyboardButton("‚¨ÖÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_home")],
    ])

# -----------------------------------------------------------------------------
# –¢–ê–†–ò–§–´ –ò –ê–î–î–û–ù–´
# -----------------------------------------------------------------------------

def pricing_text() -> str:
    return (
        "üí∞ –¢–∞—Ä–∏—Ñ—ã\n\n"
        "‚ú® *–õ–∞–π—Ç ‚Äî 1 990 ‚ÇΩ*\n"
        "üé¨ 10 –≤–∏–¥–µ–æ + üì∏ 20 —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π\n"
        "–û—Ç–ª–∏—á–Ω–æ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∏ –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏.\n\n"
        "‚≠ê *–°—Ç–∞–Ω–¥–∞—Ä—Ç ‚Äî 2 490 ‚ÇΩ*\n"
        "üé¨ 16 –≤–∏–¥–µ–æ + üì∏ 50 —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π\n"
        "–°–∞–º—ã–π —É–¥–æ–±–Ω—ã–π –±–∞–ª–∞–Ω—Å —Ü–µ–Ω—ã –∏ –æ–±—ä—ë–º–∞.\n\n"
        "üíé *–ü—Ä–æ ‚Äî 4 990 ‚ÇΩ*\n"
        "üé¨ 32 –≤–∏–¥–µ–æ + üì∏ 120 —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π\n"
        "–ü–æ–ª–Ω—ã–π –Ω–∞–±–æ—Ä –¥–ª—è –º–æ—â–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç-–ø–ª–∞–Ω–∞.\n\n"
        "üì∏ *–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏* = –ª—é–±—ã–µ —Ñ–æ—Ç–æ-–∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã: –≤–∏—Ä—Ç—É–∞–ª—å–Ω–∞—è –ø—Ä–∏–º–µ—Ä–æ—á–Ω–∞—è, –ø–æ–ª–∞—Ä–æ–∏–¥, —Ä–µ—Ç—É—à—å, —Ñ–æ–Ω –∏ —Ç.–¥."
    )

def pricing_keyboard() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("–ö—É–ø–∏—Ç—å ¬´–õ–∞–π—Ç¬ª", callback_data="plan:lite")],
        [InlineKeyboardButton("–ö—É–ø–∏—Ç—å ¬´–°—Ç–∞–Ω–¥–∞—Ä—Ç¬ª", callback_data="plan:std")],
        [InlineKeyboardButton("–ö—É–ø–∏—Ç—å ¬´–ü—Ä–æ¬ª", callback_data="plan:pro")],
        [InlineKeyboardButton("‚ö° –ë—ã—Å—Ç—Ä—ã–µ –¥–æ–∫—É–ø–∫–∏", callback_data="show_addons")],
        [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_home")],
    ])

def addons_text() -> str:
    return (
        "‚ö° –ë—ã—Å—Ç—Ä—ã–µ –¥–æ–∫—É–ø–∫–∏\n\n"
        "üé¨ –í–∏–¥–µ–æ:\n"
        "‚Ä¢ Video 5 ‚Äî 1 190 ‚ÇΩ ‚Üí +5 –≤–∏–¥–µ–æ\n"
        "‚Ä¢ Video 10 ‚Äî 2 190 ‚ÇΩ ‚Üí +10 –≤–∏–¥–µ–æ\n\n"
        "üì∏ –§–æ—Ç–æ:\n"
        "‚Ä¢ Photo 20 ‚Äî 590 ‚ÇΩ ‚Üí +20 —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π\n"
        "‚Ä¢ Photo 50 ‚Äî 1 190 ‚ÇΩ ‚Üí +50 —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π\n\n"
        "üéõÔ∏è –ú–∏–∫—Å:\n"
        "‚Ä¢ Mix ‚Äî 1 690 ‚ÇΩ ‚Üí +5 –≤–∏–¥–µ–æ + 20 —Ñ–æ—Ç–æ"
    )

def addons_keyboard(order=None) -> InlineKeyboardMarkup:
    # order ‚Äî —Å–ø–∏—Å–æ–∫ –∫–ª—é—á–µ–π –≤ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ
    keys = order or ["v5", "v10", "p20", "p50", "mix"]
    rows = [[InlineKeyboardButton(ADDONS[k]["title"], callback_data=f"addon:{k}")] for k in keys]
    rows.append([InlineKeyboardButton("‚Üê –ù–∞–∑–∞–¥ –∫ —Ç–∞—Ä–∏—Ñ–∞–º", callback_data="open:pricing")])
    return InlineKeyboardMarkup(rows)

# -----------------------------------------------------------------------------
# –î–û–°–¢–£–ü
# -----------------------------------------------------------------------------
async def check_access(update: Update) -> bool:
    uid = update.effective_user.id
    if uid not in ALLOWED_USERS:
        try:
            if update.message:
                await update.message.reply_text("üöß –ë–æ—Ç –ø–æ–∫–∞ –∑–∞–∫—Ä—ã—Ç –¥–ª—è —Ç–µ—Å—Ç–∞. –î–æ—Å—Ç—É–ø —Ç–æ–ª—å–∫–æ —É –≤–ª–∞–¥–µ–ª—å—Ü–∞.")
            elif update.callback_query:
                await update.callback_query.message.reply_text("üöß –ë–æ—Ç –ø–æ–∫–∞ –∑–∞–∫—Ä—ã—Ç –¥–ª—è —Ç–µ—Å—Ç–∞. –î–æ—Å—Ç—É–ø —Ç–æ–ª—å–∫–æ —É –≤–ª–∞–¥–µ–ª—å—Ü–∞.")
        except:
            pass
        return False
    return True

# -----------------------------------------------------------------------------
# –•–≠–ù–î–õ–ï–†–´
# -----------------------------------------------------------------------------
async def cmd_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not await check_access(update): return
    uid = update.effective_user.id
    _ensure(uid)
    # —Å–±—Ä–æ—Å –∫–ª—é—á–µ–≤—ã—Ö —Ñ–ª–∞–≥–æ–≤
    st = users[uid]
    st.update({
            "mode": None, "source_text": None, "scene": None, "style": None, "replica": None,
            "awaiting_scene": False, "awaiting_custom_style": False, "awaiting_scene_edit": False,
            "awaiting_support": False, "orientation": DEFAULT_ORIENTATION, "with_audio": DEFAULT_AUDIO,
            "nkudo_type": None, "nkudo_scene1": None, "nkudo_scene2": None,
            "jsonpro": {"await_text": False, "last_json": None, "orientation": DEFAULT_ORIENTATION},
            "tryon": {"stage": "idle", "person": None, "garment": None, "dressed": None, "await_bg": False, "await_prompt": False},
            # —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ —Ä–∞–±–æ—á–∏–µ –ø–æ–ª—è, –º–æ–Ω–µ—Ç—ã –∏ –ø–ª–∞–Ω –æ—Å—Ç–∞–≤–ª—è–µ–º
            "awaiting_transform": False, "transform_type": None, "transform_quality": "basic",
            "transform_images": [], "transform_text": None, "current_job_id": None,
        })
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∏–∑–∫–∏–π –±–∞–ª–∞–Ω—Å –º–æ–Ω–µ—Ç (—Ç–æ–ª—å–∫–æ –¥–ª—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π)
    if st.get("coins", 0) > 0 and check_low_coins(st):
        coins = st.get("coins", 0)
        videos_left = st.get("videos_left", 0)
        photos_left = st.get("photos_left", 0)
        
        await update.message.reply_text(
            f"‚ö†Ô∏è –£ –≤–∞—Å –æ—Å—Ç–∞–ª–æ—Å—å –º–∞–ª–æ –º–æ–Ω–µ—Ç: {coins}\n\n"
            f"üé¨ –í–∏–¥–µ–æ: {videos_left}\n"
            f"üì∏ –§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π: {photos_left}\n\n"
            f"üí≥ –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å?",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("‚ö° –ë—ã—Å—Ç—Ä—ã–µ –¥–æ–∫—É–ø–∫–∏", callback_data="show_addons")],
                [InlineKeyboardButton("üìö –¢–∞—Ä–∏—Ñ—ã", callback_data="open:pricing")],
                [InlineKeyboardButton("‚¨ÖÔ∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="skip_low_coins")],
            ])
        )
        return
    
    # –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –±–æ–Ω—É—Å–∞–º–∏
    video_bonus = st.get("video_bonus", 0)
    photo_bonus = st.get("photo_bonus", 0)
    tryon_bonus = st.get("tryon_bonus", 0)
    if video_bonus > 0 or photo_bonus > 0 or tryon_bonus > 0:
        bonus_text = ""
        if video_bonus > 0:
            bonus_text += f"‚Ä¢ {video_bonus} –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –≤–∏–¥–µ–æ\n"
        if photo_bonus > 0:
            bonus_text += f"‚Ä¢ {photo_bonus} –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö —Ñ–æ—Ç–æ-–æ–±—Ä–∞–±–æ—Ç–æ–∫\n"
        if tryon_bonus > 0:
            bonus_text += f"‚Ä¢ {tryon_bonus} –±–µ—Å–ø–ª–∞—Ç–Ω–∞—è –ø—Ä–∏–º–µ—Ä–æ—á–Ω–∞—è\n"
        
        await update.message.reply_text(
            f"üéâ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Babka Bot!\n\n"
            f"üéÅ –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–µ –ø–æ–¥–∞—Ä–∫–∏:\n"
            f"{bonus_text}\n"
            f"–≠—Ç–∏ –ø–æ–¥–∞—Ä–∫–∏ —Ä–∞—Å—Ö–æ–¥—É—é—Ç—Å—è –≤ –ø–µ—Ä–≤—É—é –æ—á–µ—Ä–µ–¥—å –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏.\n\n"
            f"–í—ã–±–µ—Ä–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é:",
            reply_markup=kb_home_inline()
        )
        return
    
    await update.message.reply_text("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=kb_home_inline())

async def cmd_whereami(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not await check_access(update): return
    chat = update.effective_chat
    await update.message.reply_text(
        f"chat_id: {chat.id}\n"
        f"type: {chat.type}\n"
        f"title: {getattr(chat, 'title', '')}"
    )

async def cmd_terms(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ —Å–æ–≥–ª–∞—à–µ–Ω–∏–µ"""
    terms_text = """üìã –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–¨–°–ö–û–ï –°–û–ì–õ–ê–®–ï–ù–ò–ï
Telegram –±–æ—Ç "Babka Bot"
–î–∞—Ç–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: 01.10.2025

1. –û–ë–©–ò–ï –ü–û–õ–û–ñ–ï–ù–ò–Ø
1.1. –ù–∞—Å—Ç–æ—è—â–µ–µ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ —Å–æ–≥–ª–∞—à–µ–Ω–∏–µ (–¥–∞–ª–µ–µ ‚Äî ¬´–°–æ–≥–ª–∞—à–µ–Ω–∏–µ¬ª) —Ä–µ–≥—É–ª–∏—Ä—É–µ—Ç –ø–æ—Ä—è–¥–æ–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Å–µ—Ä–≤–∏—Å–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –ø–æ—Å—Ä–µ–¥—Å—Ç–≤–æ–º Telegram –±–æ—Ç–∞ "Babka Bot" (–¥–∞–ª–µ–µ ‚Äî ¬´–°–µ—Ä–≤–∏—Å¬ª) –∏ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç –≤–∑–∞–∏–º–æ–æ—Ç–Ω–æ—à–µ–Ω–∏—è –º–µ–∂–¥—É –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–µ–π –°–µ—Ä–≤–∏—Å–∞ –∏ –ª–∏—Ü–æ–º, –∏—Å–ø–æ–ª—å–∑—É—é—â–∏–º —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –±–æ—Ç–∞ (–¥–∞–ª–µ–µ ‚Äî ¬´–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å¬ª).
1.2. –ü—Ä–∏–æ–±—Ä–µ—Ç–∞—è —Ç–∞—Ä–∏—Ñ–Ω—ã–π –ø–ª–∞–Ω, –æ—Å—É—â–µ—Å—Ç–≤–ª—è—è –æ–ø–ª–∞—Ç—É —É—Å–ª—É–≥ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É—è –ª—é–±—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –°–µ—Ä–≤–∏—Å–∞, –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –±–µ–∑—É—Å–ª–æ–≤–Ω–æ –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –Ω–∞—Å—Ç–æ—è—â–µ–µ –°–æ–≥–ª–∞—à–µ–Ω–∏–µ –≤ –ø–æ–ª–Ω–æ–º –æ–±—ä—ë–º–µ –∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç, —á—Ç–æ:

‚Ä¢ –û–∑–Ω–∞–∫–æ–º–∏–ª—Å—è —Å–æ –≤—Å–µ–º–∏ —É—Å–ª–æ–≤–∏—è–º–∏ –Ω–∞—Å—Ç–æ—è—â–µ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞
‚Ä¢ –î–æ—Å—Ç–∏–≥ —Å–æ–≤–µ—Ä—à–µ–Ω–Ω–æ–ª–µ—Ç–∏—è (18 –ª–µ—Ç)
‚Ä¢ –û–±–ª–∞–¥–∞–µ—Ç –ø—Ä–∞–≤–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å—é –¥–ª—è –∑–∞–∫–ª—é—á–µ–Ω–∏—è —Å–æ–≥–ª–∞—à–µ–Ω–∏–π

1.3. –í —Å–ª—É—á–∞–µ –Ω–µ—Å–æ–≥–ª–∞—Å–∏—è —Å –ª—é–±—ã–º –∏–∑ –ø–æ–ª–æ–∂–µ–Ω–∏–π –Ω–∞—Å—Ç–æ—è—â–µ–≥–æ –°–æ–≥–ª–∞—à–µ–Ω–∏—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –°–µ—Ä–≤–∏—Å–∞ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ –ø—Ä–µ–∫—Ä–∞—â–µ–Ω–æ.

‚ö†Ô∏è –°–ü–ï–¶–ò–ê–õ–¨–ù–´–ï –£–°–õ–û–í–ò–Ø –ò –û–ì–†–ê–ù–ò–ß–ï–ù–ò–Ø –û–¢–í–ï–¢–°–¢–í–ï–ù–ù–û–°–¢–ò

3.1. –ü—Ä–∏—Ä–æ–¥–∞ AI-–≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
‚Ä¢ –í–°–ï —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–æ–∑–¥–∞—é—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –∞–ª–≥–æ—Ä–∏—Ç–º–∞–º–∏ –Ω–µ–π—Ä–æ–Ω–Ω—ã—Ö —Å–µ—Ç–µ–π
‚Ä¢ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏—è –°–µ—Ä–≤–∏—Å–∞ –≤—ã—Å—Ç—É–ø–∞–µ—Ç –∏—Å–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ –≤ —Ä–æ–ª–∏ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–≥–æ –∞–≥—Ä–µ–≥–∞—Ç–æ—Ä–∞

3.2. –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏—è –ù–ï –ù–ï–°–Å–¢ –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å –∑–∞:
‚Ä¢ –•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –∫–∞—á–µ—Å—Ç–≤–∞ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
‚Ä¢ –°–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–æ–µ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –∏ —Ç–µ–∫—Å—Ç–æ–≤—É—é —Å–æ—Å—Ç–∞–≤–ª—è—é—â—É—é
‚Ä¢ –¢–µ—Ö–Ω–∏—á–µ—Å–∫—É—é —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—é —Å—Ç–æ—Ä–æ–Ω–Ω–∏—Ö —Å–µ—Ä–≤–∏—Å–æ–≤
‚Ä¢ –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è–º –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

4. –°–ò–°–¢–ï–ú–ê –ú–û–ù–ï–¢–ò–ó–ê–¶–ò–ò
4.1. –¢–∞—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ü–∏–π:
‚Ä¢ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≤–∏–¥–µ–æ: 10 –º–æ–Ω–µ—Ç–æ–∫
‚Ä¢ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: 1 –º–æ–Ω–µ—Ç–∫–∞
‚Ä¢ –ü–µ—Ä–≤–∞—è –ø–æ–≤—Ç–æ—Ä–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è: –±–µ–∑ —Å–ø–∏—Å–∞–Ω–∏—è

4.2. –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–µ –±–æ–Ω—É—Å—ã:
‚Ä¢ 2 –±–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –≤–∏–¥–µ–æ-–≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
‚Ä¢ 3 –±–µ—Å–ø–ª–∞—Ç–Ω—ã–µ —Ñ–æ—Ç–æ-–æ–±—Ä–∞–±–æ—Ç–∫–∏

4.3. –¢–∞—Ä–∏—Ñ–Ω—ã–µ –ø–ª–∞–Ω—ã:
‚Ä¢ –õ–ê–ô–¢ ‚Äî 1 990 ‚ÇΩ (120 –º–æ–Ω–µ—Ç–æ–∫, –ª–∏–º–∏—Ç 3 –≤–∏–¥–µ–æ/–¥–µ–Ω—å)
‚Ä¢ –°–¢–ê–ù–î–ê–†–¢ ‚Äî 2 490 ‚ÇΩ (200 –º–æ–Ω–µ—Ç–æ–∫, –ª–∏–º–∏—Ç 5 –≤–∏–¥–µ–æ/–¥–µ–Ω—å)
‚Ä¢ –ü–†–û ‚Äî 4 990 ‚ÇΩ (400 –º–æ–Ω–µ—Ç–æ–∫, –ª–∏–º–∏—Ç 10 –≤–∏–¥–µ–æ/–¥–µ–Ω—å)

4.6. –õ–æ–≥–∏–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–æ–≤:
–í–æ–∑–≤—Ä–∞—Ç —Ä–µ—Å—É—Ä—Å–æ–≤ –æ—Å—É—â–µ—Å—Ç–≤–ª—è–µ—Ç—Å—è –¢–û–õ–¨–ö–û –ø—Ä–∏:
‚Ä¢ –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö —Å–±–æ—è—Ö –Ω–∞ —Å—Ç–æ—Ä–æ–Ω–µ –°–µ—Ä–≤–∏—Å–∞
‚Ä¢ –û—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ —Ñ–∞–π–ª–∞ –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞
‚Ä¢ –ü–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–≤—Ä–µ–∂–¥—ë–Ω–Ω–æ–≥–æ –∏–ª–∏ –Ω–µ—á–∏—Ç–∞–µ–º–æ–≥–æ —Ñ–∞–π–ª–∞

–í–æ–∑–≤—Ä–∞—Ç –ù–ï –æ—Å—É—â–µ—Å—Ç–≤–ª—è–µ—Ç—Å—è –ø—Ä–∏:
‚Ä¢ –°—É–±—ä–µ–∫—Ç–∏–≤–Ω–æ–π –Ω–µ—É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä—ë–Ω–Ω–æ—Å—Ç–∏ –∫–∞—á–µ—Å—Ç–≤–æ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
‚Ä¢ –ù–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –æ–∂–∏–¥–∞–Ω–∏—è–º –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
‚Ä¢ –û—à–∏–±–∫–∞—Ö –≤ —Å–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–∞ —Å–æ —Å—Ç–æ—Ä–æ–Ω—ã –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

9. –í–û–ó–†–ê–°–¢–ù–´–ï –û–ì–†–ê–ù–ò–ß–ï–ù–ò–Ø
9.1. –°–µ—Ä–≤–∏—Å –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω –¥–ª—è –ª–∏—Ü, –¥–æ—Å—Ç–∏–≥—à–∏—Ö 18 –ª–µ—Ç.

‚ö†Ô∏è –í–ê–ñ–ù–û–ï –ù–ê–ü–û–ú–ò–ù–ê–ù–ò–ï
–ü—Ä–∏–æ–±—Ä–µ—Ç–∞—è —Ç–∞—Ä–∏—Ñ –∏ –∏—Å–ø–æ–ª—å–∑—É—è –°–µ—Ä–≤–∏—Å, –≤—ã –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç–µ:
‚Ä¢ –û–∑–Ω–∞–∫–æ–º–ª–µ–Ω–∏–µ —Å —É—Å–ª–æ–≤–∏—è–º–∏ –°–æ–≥–ª–∞—à–µ–Ω–∏—è
‚Ä¢ –ü–æ–Ω–∏–º–∞–Ω–∏–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–π –ø—Ä–∏—Ä–æ–¥—ã AI-–≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
‚Ä¢ –ü—Ä–∏–Ω—è—Ç–∏–µ –≤—Å–µ—Ö —Ä–∏—Å–∫–æ–≤, —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Å –Ω–µ–ø—Ä–µ–¥—Å–∫–∞–∑—É–µ–º–æ—Å—Ç—å—é —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
‚Ä¢ –ì–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –Ω–µ—Å—Ç–∏ –ø–æ–ª–Ω—É—é –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å –∑–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∫–æ–Ω—Ç–µ–Ω—Ç–∞

–í–µ—Ä—Å–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞: 1.0
–î–∞—Ç–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏—è –≤ —Å–∏–ª—É: 01.10.2025"""

    await update.message.reply_text(terms_text)

async def cmd_test_payment(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–¢–µ—Å—Ç–æ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è —Å–∏–º—É–ª—è—Ü–∏–∏ –æ–ø–ª–∞—Ç—ã"""
    if not await check_access(update): return
    uid = update.effective_user.id
    _ensure(uid)
    
    # –°–∏–º—É–ª–∏—Ä—É–µ–º —É—Å–ø–µ—à–Ω—É—é –æ–ø–ª–∞—Ç—É —Ç–∞—Ä–∏—Ñ–∞ "–õ–∞–π—Ç"
    test_webhook_data = {
        "type": "notification",
        "event": "payment.succeeded",
        "object": {
            "id": f"test_payment_{uid}_{int(time.time())}",
            "status": "succeeded",
            "amount": {
                "value": "1990.00",
                "currency": "RUB"
            },
            "metadata": {
                "user_id": uid,
                "plan": "lite",
                "type": "plan"
            }
        }
    }
    
    try:
        await handle_payment_webhook(test_webhook_data, context)
        await update.message.reply_text("‚úÖ –¢–µ—Å—Ç–æ–≤–∞—è –æ–ø–ª–∞—Ç–∞ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
    except Exception as e:
        log.error(f"Error in test payment: {e}")
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–π –æ–ø–ª–∞—Ç—ã: {e}")

# --- Reply-–∫–Ω–æ–ø–∫–∏ (–Ω–∏–∂–Ω–µ–µ –º–µ–Ω—é) –∫–∞–∫ —Ç–µ–∫—Å—Ç ---
async def on_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not await check_access(update): return
    uid = update.effective_user.id
    _ensure(uid)
    st = users[uid]
    text = _sanitize((update.message.text or "").strip())

    # –ö–Ω–æ–ø–∫–∏ –Ω–∏–∂–Ω–µ–≥–æ –º–µ–Ω—é
    if text == "üè† –ú–µ–Ω—é":
        await update.message.reply_text("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=kb_home_inline())
        return
    if text == "üé¨ –°–æ–∑–¥–∞–Ω–∏–µ –≤–∏–¥–µ–æ":
        await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏:", reply_markup=kb_modes()); return
    if text == "üß±LEGO –º—É–ª—å—Ç–∏–∫–∏":
        await update.message.reply_text("üß±LEGO –º—É–ª—å—Ç–∏–∫–∏ (–≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ).", reply_markup=kb_home_inline()); return
    if text == "üñºÔ∏è –û–∂–∏–≤–ª–µ–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è":
        await update.message.reply_text("üñºÔ∏è –û–∂–∏–≤–ª–µ–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (–≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ).", reply_markup=kb_home_inline()); return
    if text == "üëó –í–∏—Ä—Ç—É–∞–ª—å–Ω–∞—è –ø—Ä–∏–º–µ—Ä–æ—á–Ω–∞—è":
        st["tryon"] = {"stage": "await_person", "person": None, "garment": None, "dressed": None, "await_bg": False, "await_prompt": False}
        await update.message.reply_text(
            "üëó –í–∏—Ä—Ç—É–∞–ª—å–Ω–∞—è –ø—Ä–∏–º–µ—Ä–æ—á–Ω–∞—è\n\n"
            "1) –ü—Ä–∏—à–ª–∏—Ç–µ —Ñ–æ—Ç–æ —á–µ–ª–æ–≤–µ–∫–∞, –∫–æ—Ç–æ—Ä–æ–≥–æ –±—É–¥–µ–º –æ–¥–µ–≤–∞—Ç—å\n"
            "2) –ó–∞—Ç–µ–º –ø—Ä–∏—à–ª–∏—Ç–µ —Ñ–æ—Ç–æ –æ–¥–µ–∂–¥—ã (–º–æ–∂–Ω–æ –¥–∞–∂–µ –Ω–∞ –¥—Ä—É–≥–æ–º —á–µ–ª–æ–≤–µ–∫–µ)",
            reply_markup=kb_tryon_start()
        ); return
    if text == "üßæ JSON (–¥–ª—è –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã—Ö)":
        st["jsonpro"] = {"await_text": False, "last_json": None, "orientation": DEFAULT_ORIENTATION}
        await update.message.reply_text(
            "üßæ JSON (–¥–ª—è –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã—Ö)\n"
            "–í–≤–µ–¥–∏ —Ç–µ–∫—Å—Ç —Å—Ü–µ–Ω—ã, —è —Å–æ–±–µ—Ä—É –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω—ã–π JSON-–ø–æ–¥—Å–∫–∞–∑—á–∏–∫ –¥–ª—è Veo.\n"
            "–î–∞–ª—å—à–µ –≤—ã–±–µ—Ä–µ—à—å –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏—é –∏ –∑–∞–ø—É—Å—Ç–∏—à—å –≥–µ–Ω–µ—Ä–∞—Ü–∏—é.",
            reply_markup=kb_jsonpro_start()
        ); return
    if text == "üÜò –í–æ–∑–Ω–∏–∫–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã":
        st["awaiting_support"] = True
        await update.message.reply_text("–û–ø–∏—à–∏ –ø—Ä–æ–±–ª–µ–º—É –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º ‚Äî –ø–µ—Ä–µ—à–ª—é –µ—ë —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É –Ω–∞ –ø–æ—á—Ç—É."); 
        return
    if text == "üåì –ù–µ –≤–∏–¥–Ω–æ –∫–Ω–æ–ø–∫–∏":
        await update.message.reply_text(
        "–ï—Å–ª–∏ –∫–Ω–æ–ø–∫–∏ –æ—Ç–æ–±—Ä–∞–∂–∞—é—Ç—Å—è –ø–ª–æ—Ö–æ (—Å–≤–µ—Ç–ª—ã–π —Ç–µ–∫—Å—Ç –Ω–∞ —Å–≤–µ—Ç–ª–æ–º —Ñ–æ–Ω–µ) ‚Äî "
        "–ø–æ–º–µ–Ω—è–π—Ç–µ —Ç–µ–º—É Telegram –Ω–∞ –Ω–æ—á–Ω—É—é:\n\n"
        "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ‚Üí –û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ ‚Üí –≤—ã–±–µ—Ä–∏—Ç–µ ¬´–¢—ë–º–Ω–∞—è —Ç–µ–º–∞¬ª üåô"
    )
        return



    # –ü—Ä–∏—ë–º —Ä–µ–ø–æ—Ä—Ç–∞
    if st.get("awaiting_support"):
        st["awaiting_support"] = False
        body = f"–†–µ–ø–æ—Ä—Ç –æ—Ç @{update.effective_user.username or uid} (ID {uid}):\n\n{text}"
        ok = _send_support_email("üÜò –†–µ–ø–æ—Ä—Ç –∏–∑ Babka Bot", body)
        if ADMIN_CHAT_IDS:
            await notify_admins(context, f"üÜò –†–µ–ø–æ—Ä—Ç –æ—Ç {uid}:\n\n{text}")
        await update.message.reply_text(
            "‚úÖ –†–µ–ø–æ—Ä—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –ø–æ—á—Ç—É." if ok else "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞ –ø–æ—á—Ç—É. –ü—Ä–æ–≤–µ—Ä—å SMTP.",
            reply_markup=reply_main_kb()
        )
        return

    # try-on: —Ç–µ–∫—Å—Ç–æ–≤—ã–π –ø—Ä–æ–º—Ç –¥–ª—è –ø–æ–∑—ã/–ª–æ–∫–∞—Ü–∏–∏ (—ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞–ª—å–Ω–∞—è –≤–µ—Ç–∫–∞)
    if users[uid]["tryon"].get("await_prompt"):
        users[uid]["tryon"]["await_prompt"] = False
        stt = users[uid]["tryon"]
        if not stt.get("dressed"):
            await update.message.reply_text("–°–Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –ø—Ä–∏–º–µ—Ä–∫—É, –∑–∞—Ç–µ–º –º–µ–Ω—è–π—Ç–µ –ø–æ–∑—É/–ª–æ–∫–∞—Ü–∏—é.")
            return
        prompt = text
        await update.message.reply_text("‚è≥ –î–µ–ª–∞—é –ø–µ—Ä–µ—Å—Ç–∞–Ω–æ–≤–∫—É –ø–æ –æ–ø–∏—Å–∞–Ω–∏—é‚Ä¶")
        try:
            out = await asyncio.to_thread(repose_or_relocate, stt["dressed"], prompt, None)
            stt["dressed"] = out
            await update.message.reply_photo(photo=out, caption="‚úÖ –ì–æ—Ç–æ–≤–æ (—ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç).", reply_markup=kb_tryon_after())
        except Exception as e:
            await update.message.reply_text(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ—Å—Ç–∞–≤–∏—Ç—å –ø–æ–∑—É/–ª–æ–∫–∞—Ü–∏—é: {e}")
        return

    # –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ü–µ–Ω (—Ä–µ–ø–æ—Ä—Ç–∞–∂)
    if st.get("awaiting_scene_edit"):
        editing = st.get("editing_scene")
        if editing == 1: st["nkudo_scene1"] = text; await update.message.reply_text("‚úÖ –°—Ü–µ–Ω–∞ 1 –æ–±–Ω–æ–≤–ª–µ–Ω–∞!")
        elif editing == 2: st["nkudo_scene2"] = text; await update.message.reply_text("‚úÖ –°—Ü–µ–Ω–∞ 2 –æ–±–Ω–æ–≤–ª–µ–Ω–∞!")
        st["awaiting_scene_edit"] = False
        result_text = ("üìÆ –¢–µ–∫—É—â–∏–π —Ä–µ–ø–æ—Ä—Ç–∞–∂:\n\n"
                       f"üì∫ –°—Ü–µ–Ω–∞ 1: {st.get('nkudo_scene1','')}\n\n"
                       f"üé§ –°—Ü–µ–Ω–∞ 2: {st.get('nkudo_scene2','')}\n\n"
                       f"üí¨ –§—Ä–∞–∑–∞: {st.get('replica','')}")
        await update.message.reply_text(result_text, reply_markup=kb_nkudo_reportage_edit())
        return

        
    # --- –î–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –ø—Ä–æ–º—Ç–∞ —Ç–µ–∫—Å—Ç–æ–º (—É–º–Ω—ã–π —Ä–µ–∂–∏–º —á–µ—Ä–µ–∑ GPT) ---
    if st.get("awaiting_prompt_add"):
        st["awaiting_prompt_add"] = False
        extra = text

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∂–∏–º —Ä–µ–ø–æ—Ä—Ç–∞–∂–∞
        if st.get("nkudo_type") == "reportage":
            # –î–ª—è —Ä–µ–ø–æ—Ä—Ç–∞–∂–∞ –æ–±–Ω–æ–≤–ª—è–µ–º –æ–±–µ —Å—Ü–µ–Ω—ã
            base_scene1 = st.get("nkudo_scene1", "")
            base_scene2 = st.get("nkudo_scene2", "")
            
            prompt = (
                f"You are rewriting a 2-scene reportage for Veo video generation.\n\n"
                f"Scene 1: {base_scene1}\n\n"
                f"Scene 2: {base_scene2}\n\n"
                f"User asked to add: {extra}\n\n"
                f"Keep both scenes concise and cinematic.\n"
                f"Return in format:\n"
                f"SCENE1: [rewritten scene 1]\n"
                f"SCENE2: [rewritten scene 2]"
            )

            try:
                if not gpt:

                    replica = "–î–∞ —Å–∞–º–∞ –¥–æ–≤–µ–∑—É –±–µ–∑ –ø—Ä–∏–Ω—Ü–µ–≤ –æ–±–æ–π–¥—É—Å—å!"

                else:

                    resp = gpt.chat.completions.create(
                    model=OPENAI_MODEL,
                    messages=[{"role": "user", "content": prompt}],
                    max_tokens=400,
                    temperature=0.7,
                )
                result = resp.choices[0].message.content.strip() if resp else ""
                
                # –ü–∞—Ä—Å–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                if "SCENE1:" in result and "SCENE2:" in result:
                    parts = result.split("SCENE2:")
                    new_scene1 = parts[0].replace("SCENE1:", "").strip()
                    new_scene2 = parts[1].strip()
                else:
                    # –ï—Å–ª–∏ —Ñ–æ—Ä–º–∞—Ç –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω, –æ–±–Ω–æ–≤–ª—è–µ–º –æ–±–µ —Å—Ü–µ–Ω—ã –æ–¥–∏–Ω–∞–∫–æ–≤–æ
                    new_scene1 = f"{base_scene1}\n\n{extra}"
                    new_scene2 = f"{base_scene2}\n\n{extra}"
            except Exception as e:
                new_scene1 = f"{base_scene1}\n\n{extra}"
                new_scene2 = f"{base_scene2}\n\n{extra}"

            st["nkudo_scene1"] = new_scene1
            st["nkudo_scene2"] = new_scene2
            st["scene"] = f"{new_scene1}\n\n{new_scene2}"
            
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Ñ–∏–Ω–∞–ª—å–Ω–æ–º—É —á–µ–∫—É
            parts = [f"‚úÖ –°—Ü–µ–Ω–∞: {st.get('nkudo_scene1','')}\n\n{st.get('nkudo_scene2','')}"]
            # –î–ª—è LEGO —Ä–µ–∂–∏–º–∞ –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∏–ª—å, —Ç–∞–∫ –∫–∞–∫ –æ–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π
            if st.get("style") and st.get("mode") != "lego": parts.append(f"‚úÖ –°—Ç–∏–ª—å: {st['style']}")
            if st.get("replica"): parts.append(f"‚úÖ –§—Ä–∞–∑–∞: {st['replica']}")
            if st.get("orientation"): parts.append(f"‚úÖ –û—Ä–∏–µ–Ω—Ç–∞—Ü–∏—è: {st['orientation']}")

            preview = "‚úÖ –ü—Ä–æ–º—Ç –æ–±–Ω–æ–≤–ª—ë–Ω!\n\n" + "\n\n".join(parts)

            kb_preview = InlineKeyboardMarkup([
                [InlineKeyboardButton("‚úçÔ∏è –î–æ–ø–æ–ª–Ω–∏—Ç—å", callback_data="prompt_add")],
                [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –ø—Ä–æ—Ü–µ–¥—É—Ä—É", callback_data="cancel_procedure")],
                [InlineKeyboardButton("üöÄ –°–æ–∑–¥–∞—Ç—å –≤–∏–¥–µ–æ", callback_data="generate_now")]
            ])

            await update.message.reply_text(preview, reply_markup=kb_preview)
        else:
            # –û–±—ã—á–Ω—ã–π —Ä–µ–∂–∏–º
            base_scene = st.get("scene", "")
            style_note = st.get("style")
            replica_note = st.get("replica")
            orientation_note = st.get("orientation")

            prompt = (
            f"You are rewriting ONLY the scene description for Veo video generation.\n\n"
            f"Base scene:\n{base_scene}\n\n"
            f"User asked to add: {extra}\n\n"
            f"Keep the scene concise and cinematic.\n"
            f"Do not change or remove Style, Replica, Orientation. "
            f"They will stay as:\n"
            f"- Style: {style_note or '‚Äî'}\n"
            f"- Replica: {replica_note or '‚Äî'}\n"
            f"- Orientation: {orientation_note or '‚Äî'}\n"
            f"Just rewrite the SCENE with the extra detail."
        )

        try:
            if not gpt:

                replica = "–î–∞ —Å–∞–º–∞ –¥–æ–≤–µ–∑—É –±–µ–∑ –ø—Ä–∏–Ω—Ü–µ–≤ –æ–±–æ–π–¥—É—Å—å!"

            else:

                resp = gpt.chat.completions.create(
                model=OPENAI_MODEL,
                messages=[{"role": "user", "content": prompt}],
                max_tokens=300,
                temperature=0.7,
            )
            new_scene = resp.choices[0].message.content.strip() if resp else base_scene
        except Exception as e:
            new_scene = f"{base_scene}\n(‚ö†Ô∏è Failed to regenerate scene with GPT: {e})"

        st["scene"] = new_scene

        parts = [f"‚úÖ –°—Ü–µ–Ω–∞: {new_scene}"]
        if style_note: parts.append(f"‚úÖ –°—Ç–∏–ª—å: {style_note}")
        if replica_note: parts.append(f"‚úÖ –§—Ä–∞–∑–∞: {replica_note}")
        if orientation_note: parts.append(f"‚úÖ –û—Ä–∏–µ–Ω—Ç–∞—Ü–∏—è: {orientation_note}")

        preview = "‚úÖ –ü—Ä–æ–º—Ç –æ–±–Ω–æ–≤–ª—ë–Ω!\n\n" + "\n\n".join(parts)

        await update.message.reply_text(
            preview,
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("‚úçÔ∏è –î–æ–ø–æ–ª–Ω–∏—Ç—å", callback_data="prompt_add")],
                [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –ø—Ä–æ—Ü–µ–¥—É—Ä—É", callback_data="cancel_procedure")],
                [InlineKeyboardButton("üöÄ –°–æ–∑–¥–∞—Ç—å –≤–∏–¥–µ–æ", callback_data="generate_now")]
            ])
        )
        return

    # --- –†—É—á–Ω–æ–π –≤–≤–æ–¥ —Ñ—Ä–∞–∑–∏ ---
    if st.get("awaiting_manual_replica"):
        st["awaiting_manual_replica"] = False
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤–≤–æ–¥ —Ñ—Ä–∞–∑—ã —á–µ—Ä–µ–∑ GPT –¥–ª—è –∞–¥–∞–ø—Ç–∞—Ü–∏–∏
        if "–≥–æ–≤–æ—Ä–∏—Ç" in text.lower() or "–≤–æ—Å–∫–ª–∏—Ü–∞–µ—Ç" in text.lower() or "—à–µ–ø—á–µ—Ç" in text.lower():
            # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–ø–∏—Å–∞–ª "–ë–∞–±–∫–∞ –≥–æ–≤–æ—Ä–∏—Ç ¬´—Ñ—Ä–∞–∑–∞¬ª", –∏–∑–≤–ª–µ–∫–∞–µ–º —Ç–æ–ª—å–∫–æ —Ñ—Ä–∞–∑—É
            extract_prompt = (
                f"–ò–∑–≤–ª–µ–∫–∏ —Ç–æ–ª—å–∫–æ —Ñ—Ä–∞–∑—É –∏–∑ —Ç–µ–∫—Å—Ç–∞, —É–±—Ä–∞–≤ —Å–ª–æ–≤–∞ –∞–≤—Ç–æ—Ä–∞.\n\n"
                f"–¢–µ–∫—Å—Ç: {text}\n\n"
                f"–¢–†–ï–ë–û–í–ê–ù–ò–Ø:\n"
                f"- –í–µ—Ä–Ω–∏ —Ç–æ–ª—å–∫–æ —Å–∞–º—É —Ñ—Ä–∞–∑—É –≤ –∫–∞–≤—ã—á–∫–∞—Ö\n"
                f"- –£–±–µ—Ä–∏ —Å–ª–æ–≤–∞ —Ç–∏–ø–∞ '–≥–æ–≤–æ—Ä–∏—Ç', '–≤–æ—Å–∫–ª–∏—Ü–∞–µ—Ç', '—à–µ–ø—á–µ—Ç' –∏ —Ç.–¥.\n"
                f"- –°–æ—Ö—Ä–∞–Ω–∏ —Ç–æ–ª—å–∫–æ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ —Ä–µ—á–∏\n\n"
                f"–ü—Ä–∏–º–µ—Ä: '–ë–∞–±–∫–∞ –≥–æ–≤–æ—Ä–∏—Ç ¬´–ü—Ä–∏–≤–µ—Ç¬ª' ‚Üí '–ü—Ä–∏–≤–µ—Ç'\n"
                f"–ü—Ä–∏–º–µ—Ä: '–û–Ω–∞ –≤–æ—Å–∫–ª–∏—Ü–∞–µ—Ç ¬´–ù—É –Ω–∏—Ö–µ—Ä–∞ —Å–µ–±–µ!¬ª' ‚Üí '–ù—É –Ω–∏—Ö–µ—Ä–∞ —Å–µ–±–µ!'\n\n"
                f"–í–µ—Ä–Ω–∏ —Ç–æ–ª—å–∫–æ —Ñ—Ä–∞–∑—É –±–µ–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤."
            )
            
            try:
                if not gpt:

                    replica = "–î–∞ —Å–∞–º–∞ –¥–æ–≤–µ–∑—É –±–µ–∑ –ø—Ä–∏–Ω—Ü–µ–≤ –æ–±–æ–π–¥—É—Å—å!"

                else:

                    resp = gpt.chat.completions.create(
                    model=OPENAI_MODEL,
                    messages=[{"role": "user", "content": extract_prompt}],
                    max_tokens=50,
                    temperature=0.3,
                )
                extracted_phrase = resp.choices[0].message.content.strip() if resp else ""
                # –£–±–∏—Ä–∞–µ–º –∫–∞–≤—ã—á–∫–∏, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
                if extracted_phrase.startswith('"') and extracted_phrase.endswith('"'):
                    extracted_phrase = extracted_phrase[1:-1]
                elif extracted_phrase.startswith('¬´') and extracted_phrase.endswith('¬ª'):
                    extracted_phrase = extracted_phrase[1:-1]
                st["replica"] = _clean_replica(extracted_phrase)
            except Exception as e:
                # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —á–µ—Ä–µ–∑ GPT, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç
                st["replica"] = _clean_replica(text)
        else:
            # –û–±—ã—á–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞
            st["replica"] = _clean_replica(text)  # –û—á–∏—â–∞–µ–º –æ—Ç —Ç–∏—Ä–µ
        
        if st.get("from_final_check"):
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Ñ–∏–Ω–∞–ª—å–Ω–æ–º—É —á–µ–∫—É
            st["from_final_check"] = False
            parts = [f"‚úÖ –°—Ü–µ–Ω–∞: {st.get('scene','')}"]
            # –î–ª—è LEGO —Ä–µ–∂–∏–º–∞ –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∏–ª—å, —Ç–∞–∫ –∫–∞–∫ –æ–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π
            if st.get("style") and st.get("mode") != "lego": parts.append(f"‚úÖ –°—Ç–∏–ª—å: {st['style']}")
            if st.get("replica"): parts.append(f"‚úÖ –§—Ä–∞–∑–∞: {st['replica']}")
            if st.get("orientation"): parts.append(f"‚úÖ –û—Ä–∏–µ–Ω—Ç–∞—Ü–∏—è: {st['orientation']}")

            preview = "üìù –ò—Ç–æ–≥–æ–≤—ã–π –ø—Ä–æ–º—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏:\n\n" + "\n\n".join(parts)

            kb_preview = InlineKeyboardMarkup([
                [InlineKeyboardButton("‚úçÔ∏è –î–æ–ø–æ–ª–Ω–∏—Ç—å", callback_data="prompt_add")],
                [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –ø—Ä–æ—Ü–µ–¥—É—Ä—É", callback_data="cancel_procedure")],
                [InlineKeyboardButton("üöÄ –°–æ–∑–¥–∞—Ç—å –≤–∏–¥–µ–æ", callback_data="generate_now")]
            ])

            await update.message.reply_text(preview, reply_markup=kb_preview)
        else:
            # –û–±—ã—á–Ω–æ–µ –º–µ–Ω—é —Ñ—Ä–∞–∑–∏
            if st.get("mode") == "nkudo":
                # –î–ª—è —Ä–µ–∂–∏–º–∞ NEUROKUDO –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±—ã—á–Ω–æ–µ –º–µ–Ω—é
                await update.message.reply_text(
                    f"‚úÖ –§—Ä–∞–∑–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞: {st['replica']}\n\n–¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å –∏–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å:",
                    reply_markup=InlineKeyboardMarkup([
                        [InlineKeyboardButton("‚úçÔ∏è –í–≤–µ—Å—Ç–∏ —Ñ—Ä–∞–∑—É –≤—Ä—É—á–Ω—É—é", callback_data="manual_replica")],
                        [InlineKeyboardButton("‚û°Ô∏è –î–∞–ª–µ–µ", callback_data="go_orientation")]
                    ])
                )
            else:
                # –î–ª—è –æ–±—ã—á–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞ –≤—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Ñ—Ä–∞–∑—É –≤ —Å—Ü–µ–Ω—É
                if st.get("scene"):
                    # –í—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Ñ—Ä–∞–∑—É –≤ —Å—Ü–µ–Ω—É —á–µ—Ä–µ–∑ GPT
                    embed_prompt = (
                        f"–í—Å—Ç—Ä–æ–π —Ñ—Ä–∞–∑—É –≤ –æ–ø–∏—Å–∞–Ω–∏–µ —Å—Ü–µ–Ω—ã –∫–∞–∫ —Ä–µ—á—å –ø–µ—Ä—Å–æ–Ω–∞–∂–∞.\n\n"
                        f"–ò—Å—Ö–æ–¥–Ω–∞—è —Å—Ü–µ–Ω–∞: {st['scene']}\n"
                        f"–§—Ä–∞–∑–∞: {st['replica']}\n\n"
                        f"–¢–†–ï–ë–û–í–ê–ù–ò–Ø:\n"
                        f"- –í—Å—Ç—Ä–æ–π —Ñ—Ä–∞–∑—É –∫–∞–∫ –ø—Ä—è–º—É—é —Ä–µ—á—å –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –≤ –∫–∞–≤—ã—á–∫–∞—Ö\n"
                        f"- –î–æ–±–∞–≤—å —Å–ª–æ–≤–∞ –∞–≤—Ç–æ—Ä–∞ —Ç–∏–ø–∞ '–≥–æ–≤–æ—Ä–∏—Ç', '–≤–æ—Å–∫–ª–∏—Ü–∞–µ—Ç', '—à–µ–ø—á–µ—Ç' –∏ —Ç.–¥.\n"
                        f"- –§—Ä–∞–∑–∞ –¥–æ–ª–∂–Ω–∞ –∑–≤—É—á–∞—Ç—å –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ —Å—Ü–µ–Ω—ã\n"
                        f"- –°—Ü–µ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –æ—Å—Ç–∞—Ç—å—Å—è —Ü–µ–ª–æ—Å—Ç–Ω–æ–π –∏ –ª–æ–≥–∏—á–Ω–æ–π\n\n"
                        f"–í–µ—Ä–Ω–∏ —Ç–æ–ª—å–∫–æ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Å—Ü–µ–Ω—ã –±–µ–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤."
                    )
                    
                    try:
                        if not gpt:

                            replica = "–î–∞ —Å–∞–º–∞ –¥–æ–≤–µ–∑—É –±–µ–∑ –ø—Ä–∏–Ω—Ü–µ–≤ –æ–±–æ–π–¥—É—Å—å!"

                        else:

                            resp = gpt.chat.completions.create(
                            model=OPENAI_MODEL,
                            messages=[{"role": "user", "content": embed_prompt}],
                            max_tokens=200,
                            temperature=0.7,
                        )
                        updated_scene = resp.choices[0].message.content.strip() if resp else base_scene
                        st["scene"] = updated_scene
                    except Exception as e:
                        updated_scene = f"{st['scene']}\n\n–ë–∞–±—É—à–∫–∞ –≥–æ–≤–æ—Ä–∏—Ç: {st['replica']}"
                        st["scene"] = updated_scene
                    
                    txt = f"üí¨ –§—Ä–∞–∑–∞ –≤—Å—Ç—Ä–æ–µ–Ω–∞ –≤ —Å—Ü–µ–Ω—É\n\nüé¨ –û–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è —Å—Ü–µ–Ω–∞:\n{st['scene']}\n\n–ß—Ç–æ –¥–µ–ª–∞–µ–º –¥–∞–ª—å—à–µ?"
                    await update.message.reply_text(txt, reply_markup=kb_variants_with_phrase())
                else:
                    await update.message.reply_text(
                        f"‚úÖ –§—Ä–∞–∑–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞: {st['replica']}\n\n–¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å –∏–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å:",
                        reply_markup=InlineKeyboardMarkup([
                            [InlineKeyboardButton("‚úçÔ∏è –í–≤–µ—Å—Ç–∏ —Ñ—Ä–∞–∑—É –≤—Ä—É—á–Ω—É—é", callback_data="manual_replica")],
                            [InlineKeyboardButton("‚û°Ô∏è –î–∞–ª–µ–µ", callback_data="go_orientation")]
                        ])
                    )
        return

    # --- –î–æ—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ–º—Ç–∞ ---
    if st.get("awaiting_prompt_refine"):
        st["awaiting_prompt_refine"] = False
        refinement = text
        
        base_scene = st.get("scene", "")
        style_note = st.get("style")
        replica_note = st.get("replica")
        orientation_note = st.get("orientation")

        prompt = (
            f"You are improving a video generation prompt based on user feedback.\n\n"
            f"Current scene: {base_scene}\n"
            f"Current style: {style_note or '‚Äî'}\n"
            f"Current replica: {replica_note or '‚Äî'}\n"
            f"Current orientation: {orientation_note or '‚Äî'}\n\n"
            f"User wants to change/add: {refinement}\n\n"
            f"Please improve the SCENE description based on the user's request. "
            f"Keep the scene concise and cinematic. "
            f"Do not change Style, Replica, or Orientation unless specifically requested. "
            f"Return only the improved scene description."
        )

        try:
            if not gpt:

                replica = "–î–∞ —Å–∞–º–∞ –¥–æ–≤–µ–∑—É –±–µ–∑ –ø—Ä–∏–Ω—Ü–µ–≤ –æ–±–æ–π–¥—É—Å—å!"

            else:

                resp = gpt.chat.completions.create(
                model=OPENAI_MODEL,
                messages=[{"role": "user", "content": prompt}],
                max_tokens=300,
                temperature=0.7,
            )
            new_scene = resp.choices[0].message.content.strip() if resp else base_scene
        except Exception as e:
            new_scene = f"{base_scene}\n(‚ö†Ô∏è Failed to refine scene with GPT: {e})"

        st["scene"] = new_scene

        parts = [f"‚úÖ –°—Ü–µ–Ω–∞: {new_scene}"]
        if style_note: parts.append(f"‚úÖ –°—Ç–∏–ª—å: {style_note}")
        if replica_note: parts.append(f"‚úÖ –§—Ä–∞–∑–∞: {replica_note}")
        if orientation_note: parts.append(f"‚úÖ –û—Ä–∏–µ–Ω—Ç–∞—Ü–∏—è: {orientation_note}")

        preview = "‚úÖ –ü—Ä–æ–º—Ç –¥–æ—Ä–∞–±–æ—Ç–∞–Ω!\n\n" + "\n\n".join(parts)

        await update.message.reply_text(
            preview,
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("‚úçÔ∏è –î–æ–ø–æ–ª–Ω–∏—Ç—å", callback_data="prompt_add")],
                [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –ø—Ä–æ—Ü–µ–¥—É—Ä—É", callback_data="cancel_procedure")],
                [InlineKeyboardButton("üöÄ –°–æ–∑–¥–∞—Ç—å –≤–∏–¥–µ–æ", callback_data="generate_now")]
            ])
        )
        return

    # –û–∂–∏–¥–∞–Ω–∏–µ —Å—Ü–µ–Ω—ã (manual/helper)
    if st.get("awaiting_scene"):
        st["awaiting_scene"] = False; st["source_text"] = text
        if st["mode"] == "helper" and gpt:
            try:
                log.info(f"Helper mode: processing text '{text[:50]}...'")
                scene = improve_scene(text, mode="normal")
                if scene and scene.strip():
                    st["scene"] = scene
                    log.info(f"Helper mode: scene improved successfully")
                    await update.message.reply_text(f"üß†‚ú® –£–ª—É—á—à–µ–Ω–æ –ø–æ–º–æ—â–Ω–∏–∫–æ–º:\n\n{scene}", reply_markup=kb_variants())
                    return
                else:
                    # –ï—Å–ª–∏ –ø–æ–º–æ—â–Ω–∏–∫ –Ω–µ —Å–º–æ–≥ —É–ª—É—á—à–∏—Ç—å, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç
                    log.warning(f"Helper mode: improve_scene returned empty result")
                    st["scene"] = text
                    await update.message.reply_text(f"üìù –ü—Ä–æ–º—Ç –ø—Ä–∏–Ω—è—Ç (–ø–æ–º–æ—â–Ω–∏–∫ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω):\n\n{text}", reply_markup=kb_variants())
                    return
            except Exception as e:
                log.error(f"Error in improve_scene: {e}")
                # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç
                st["scene"] = text
                await update.message.reply_text(f"üìù –ü—Ä–æ–º—Ç –ø—Ä–∏–Ω—è—Ç (–æ—à–∏–±–∫–∞ –ø–æ–º–æ—â–Ω–∏–∫–∞):\n\n{text}", reply_markup=kb_variants())
                return
        elif st["mode"] == "helper" and not gpt:
            log.warning("Helper mode: gpt not initialized")
            st["scene"] = text
            await update.message.reply_text(f"üìù –ü—Ä–æ–º—Ç –ø—Ä–∏–Ω—è—Ç (GPT –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω - –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∏—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç):\n\n{text}", reply_markup=kb_variants())
            return
        st["scene"] = text
        await update.message.reply_text(f"üìù –ü—Ä–æ–º—Ç –ø—Ä–∏–Ω—è—Ç:\n\n{text}", reply_markup=kb_variants())
        return
    

    # --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–∂–∏–¥–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ –¥–ª—è —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–π ---
    if st.get("awaiting_transform", False):
        transform_type = st.get("transform_type")
        
        if transform_type in ("inject_object", "retouch"):
            st["transform_text"] = text
            st["awaiting_transform"] = False
            
            if transform_type == "inject_object":
                await update.message.reply_text(
                    f"‚úÖ –û–ø–∏—Å–∞–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞ –ø—Ä–∏–Ω—è—Ç–æ!\n\n"
                    f"–û–±—ä–µ–∫—Ç: {text}\n\n"
                    f"–¢–µ–ø–µ—Ä—å –ø—Ä–∏—à–ª–∏—Ç–µ —Ñ–æ—Ç–æ, –∫—É–¥–∞ –¥–æ–±–∞–≤–∏—Ç—å –æ–±—ä–µ–∫—Ç."
                )
            else:  # retouch
                await update.message.reply_text(
                    f"‚úÖ –û–ø–∏—Å–∞–Ω–∏–µ —Ä–µ—Ç—É—à–∏ –ø—Ä–∏–Ω—è—Ç–æ!\n\n"
                    f"–†–µ—Ç—É—à—å: {text}\n\n"
                    f"–¢–µ–ø–µ—Ä—å –ø—Ä–∏—à–ª–∏—Ç–µ —Ñ–æ—Ç–æ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏."
                )
            
            # –í–∫–ª—é—á–∞–µ–º —Ä–µ–∂–∏–º –æ–∂–∏–¥–∞–Ω–∏—è —Ñ–æ—Ç–æ
            st["awaiting_transform"] = True
            return

    # JSON PRO: –æ–∂–∏–¥–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ —Å—Ü–µ–Ω—ã
    if st["jsonpro"].get("await_text"):
        st["jsonpro"]["await_text"] = False
        # –≥–µ–Ω–µ—Ä–∏–º JSON –±–µ–∑ –ø–æ–∫–∞–∑–∞ –≤ –æ–±—ã—á–Ω—ã—Ö —Ä–µ–∂–∏–º–∞—Ö ‚Äî –∑–¥–µ—Å—å –Ω–∞–æ–±–æ—Ä–æ—Ç –ü–û–ö–ê–ó–´–í–ê–ï–ú, —ç—Ç–æ —Ä–∞–∑–¥–µ–ª –¥–ª—è –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã—Ö
        jj = to_json_prompt(text, style=None, replica=None, mode="manual",
                            aspect_ratio=st["jsonpro"].get("orientation", DEFAULT_ORIENTATION), context=None)
        st["jsonpro"]["last_json"] = jj
        await update.message.reply_text("üßæ JSON:\n```\n" + jj + "\n```", parse_mode="Markdown",
                                        reply_markup=kb_jsonpro_after_text())
        return

    # –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    await update.message.reply_text("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=kb_home_inline())

# --- Webhook –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ÆKassa ---
async def handle_payment_webhook(webhook_data: dict, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å webhook –æ—Ç –ÆKassa"""
    try:
        payment_info = process_payment_webhook(webhook_data)
        if not payment_info:
            log.warning("Invalid webhook data received")
            return
        
        user_id = payment_info.get("user_id")
        payment_id = payment_info.get("payment_id")
        amount = payment_info.get("amount")
        metadata = payment_info.get("metadata", {})
        
        if not user_id:
            log.warning("No user_id in payment metadata")
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–¥–µ–º–ø–æ—Ç–µ–Ω—Ç–Ω–æ—Å—Ç—å
        if not _ensure(user_id):
            log.error(f"Failed to ensure user {user_id}")
            return
            
        st = users[user_id]
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–ª–∏ –ª–∏ —É–∂–µ —ç—Ç–æ—Ç –ø–ª–∞—Ç–µ–∂
        processed_payments = st.get("processed_payments", set())
        if payment_id in processed_payments:
            log.info(f"Payment {payment_id} already processed for user {user_id}")
            return
        
        # –î–æ–±–∞–≤–ª—è–µ–º –≤ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ
        processed_payments.add(payment_id)
        st["processed_payments"] = processed_payments
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞
        if "plan" in metadata:
            plan_key = metadata["plan"]
            plan = PLANS[plan_key]
            
            # –î–æ–±–∞–≤–ª—è–µ–º –º–æ–Ω–µ—Ç–∫–∏ –∏ –∫–≤–æ—Ç—ã
            st["coins"] = st.get("coins", 0) + plan["coins"]
            st["videos_left"] = st.get("videos_left", 0) + plan["videos"]
            st["photos_left"] = st.get("photos_left", 0) + plan["photos"]
            st["plan"] = plan_key
            
            message = (
                f"‚úÖ –û–ø–ª–∞—Ç–∞ –ø–æ–ª—É—á–µ–Ω–∞!\n\n"
                f"üìã –¢–∞—Ä–∏—Ñ {plan['name']} –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω:\n"
                f"‚Ä¢ +{plan['coins']} –º–æ–Ω–µ—Ç–æ–∫\n"
                f"‚Ä¢ +{plan['videos']} –≤–∏–¥–µ–æ\n"
                f"‚Ä¢ +{plan['photos']} —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π\n\n"
                f"üí∞ –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å:\n"
                f"‚Ä¢ {st['coins']} –º–æ–Ω–µ—Ç–æ–∫\n"
                f"‚Ä¢ {st['videos_left']} –≤–∏–¥–µ–æ\n"
                f"‚Ä¢ {st['photos_left']} —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π"
            )
            
        elif "addon" in metadata:
            addon_key = metadata["addon"]
            addon = ADDONS[addon_key]
            
            # –î–æ–±–∞–≤–ª—è–µ–º –º–æ–Ω–µ—Ç–∫–∏ –∏ –∫–≤–æ—Ç—ã
            st["coins"] = st.get("coins", 0) + addon["coins"]
            st["videos_left"] = st.get("videos_left", 0) + addon["videos"]
            st["photos_left"] = st.get("photos_left", 0) + addon["photos"]
            
            description = []
            if addon["videos"] > 0:
                description.append(f"‚Ä¢ +{addon['videos']} –≤–∏–¥–µ–æ")
            if addon["photos"] > 0:
                description.append(f"‚Ä¢ +{addon['photos']} —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π")
            
            message = (
                f"‚úÖ –û–ø–ª–∞—Ç–∞ –ø–æ–ª—É—á–µ–Ω–∞!\n\n"
                f"üìã {addon['title']} –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω:\n"
                + "\n".join(description) + f"\n"
                f"‚Ä¢ +{addon['coins']} –º–æ–Ω–µ—Ç–æ–∫\n\n"
                f"üí∞ –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å:\n"
                f"‚Ä¢ {st['coins']} –º–æ–Ω–µ—Ç–æ–∫\n"
                f"‚Ä¢ {st['videos_left']} –≤–∏–¥–µ–æ\n"
                f"‚Ä¢ {st['photos_left']} —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π"
            )
        else:
            log.warning(f"Unknown payment type in metadata: {metadata}")
            return
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        try:
            await context.bot.send_message(
                chat_id=user_id,
                text=message,
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton("üë§ –ü—Ä–æ—Ñ–∏–ª—å", callback_data="menu_profile")],
                    [InlineKeyboardButton("üìö –¢–∞—Ä–∏—Ñ—ã", callback_data="open:pricing")],
                ])
            )
        except Exception as e:
            log.error(f"Failed to send payment notification to user {user_id}: {e}")
        
        log.info(f"Payment {payment_id} processed successfully for user {user_id}")
        
    except Exception as e:
        log.error(f"Error processing payment webhook: {e}")

# --- –ü—Ä–∏—ë–º —Ñ–æ—Ç–æ (–¥–ª—è –ø—Ä–∏–º–µ—Ä–æ—á–Ω–æ–π –∏ —Ç.–ø.) ---
async def on_photo(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not await check_access(update): return
    uid = update.effective_user.id
    _ensure(uid)
    st = users[uid]

    # --- –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ –¥–ª—è —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–π ---
    if st.get("awaiting_transform", False):
        transform_type = st.get("transform_type")
        
        # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–æ—Ç–æ
        try:
            photo = update.message.photo[-1]
            file = await context.bot.get_file(photo.file_id)
            b = await file.download_as_bytearray()
            photo_bytes = bytes(b)
        except Exception as e:
            log.error("Failed to download photo: %s", e)
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")
            return
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ –≤ —Å–ø–∏—Å–æ–∫
        if "transform_images" not in st:
            st["transform_images"] = []
        st["transform_images"].append(photo_bytes)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ª–∏ —Ñ–æ—Ç–æ
        required_photos = 1
        if transform_type == "merge_people":
            required_photos = 2  # –º–∏–Ω–∏–º—É–º 2 —á–µ–ª–æ–≤–µ–∫–∞
        elif transform_type == "polaroid":
            required_photos = 1  # –º–∏–Ω–∏–º—É–º 1 —Ñ–æ—Ç–æ
        
        if len(st["transform_images"]) < required_photos:
            remaining = required_photos - len(st["transform_images"])
            await update.message.reply_text(
                f"‚úÖ –§–æ—Ç–æ {len(st['transform_images'])}/{required_photos} –ø–æ–ª—É—á–µ–Ω–æ.\n\n"
                f"–ü—Ä–∏—à–ª–∏—Ç–µ –µ—â—ë {remaining} —Ñ–æ—Ç–æ."
            )
            return
        
        # –í—Å–µ —Ñ–æ—Ç–æ –ø–æ–ª—É—á–µ–Ω—ã, –Ω–∞—á–∏–Ω–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–æ–Ω–µ—Ç—ã
            quality = st.get("transform_quality", "basic")
            cost = 1 if quality == "basic" else 2
            
            if not can_generate_photo(st, cost):
                photo_bonus = st.get("photo_bonus", 0)
                coins = st.get("coins", 0)
                
                await update.message.reply_text(
                    f"‚ùå –ù–µ —Ö–≤–∞—Ç–∞–µ—Ç —Ä–µ—Å—É—Ä—Å–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–æ—Ç–æ.\n\n"
                    f"üéÅ –ë–æ–Ω—É—Å–Ω—ã—Ö —Ñ–æ—Ç–æ: {photo_bonus}\n"
                    f"üí∞ –ú–æ–Ω–µ—Ç–æ–∫: {coins} (–Ω—É–∂–Ω–æ: {cost})\n\n"
                    f"üí≥ –î–æ–∫—É–ø–∏—Ç—å –º–æ–Ω–µ—Ç—ã?",
                    reply_markup=InlineKeyboardMarkup([
                        [InlineKeyboardButton("üí≥ –î–æ–∫—É–ø–∏—Ç—å", callback_data="buy_coins_20")],
                        [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="menu_transforms")],
                    ])
                )
                return
            
            # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á—É
            job_id = hold_and_start(st, "transform", quality)
            st["current_job_id"] = job_id
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ –æ–±—Ä–∞–±–æ—Ç–∫—É
            await update.message.reply_text(
                f"üîÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é —Ñ–æ—Ç–æ...\n"
                f"üí∞ –°–ø–∏—Å–∞–Ω–æ: {cost} –º–æ–Ω–µ—Ç–∫–∞\n"
                f"‚è±Ô∏è –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å 1-2 –º–∏–Ω—É—Ç—ã."
            )
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏—é
            result_bytes = await asyncio.to_thread(
                process_transform, 
                transform_type, 
                st["transform_images"], 
                st.get("transform_text"), 
                quality
            )
            
            # –û—Ç–º–µ—á–∞–µ–º —É—Å–ø–µ—Ö
            on_success(st, job_id)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            caption = f"‚úÖ {transform_type.replace('_', ' ').title()} –≥–æ—Ç–æ–≤–æ!"
            if transform_type == "polaroid":
                caption = "‚úÖ Polaroid –≥–æ—Ç–æ–≤!"
            
            await update.message.reply_photo(
                photo=result_bytes,
                caption=caption,
                reply_markup=kb_transform_result()
            )
            
            # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            st["awaiting_transform"] = False
            st["transform_images"] = []
            st["transform_text"] = None
            
        except Exception as e:
            log.error("Transform processing error: %s", e)
            if st.get("current_job_id"):
                on_error(st, st["current_job_id"])
            await update.message.reply_text(
                f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏: {str(e)}\n\n"
                f"–ú–æ–Ω–µ—Ç–∫–∏ –≤–æ–∑–≤—Ä–∞—â–µ–Ω—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.",
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton("üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞", callback_data="transform_retry")],
                    [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="menu_transforms")],
                ])
            )
        return

    # --- –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ –¥–ª—è –ø—Ä–∏–º–µ—Ä–æ—á–Ω–æ–π ---
    stt = st["tryon"]
    if stt["stage"] not in ("await_person", "await_garment", "confirm") and not stt.get("await_bg"):
        await update.message.reply_text(
            "–§–æ—Ç–æ –ø–æ–ª—É—á–µ–Ω–æ. –î–ª—è –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–π –ø—Ä–∏–º–µ—Ä–æ—á–Ω–æ–π ‚Äî –∑–∞–π–¥–∏—Ç–µ –≤ üëó –í–∏—Ä—Ç—É–∞–ª—å–Ω–∞—è –ø—Ä–∏–º–µ—Ä–æ—á–Ω–∞—è.",
            reply_markup=kb_home_inline()
        )
        return

    # —Å–∫–∞—á–∞—Ç—å bytes
    try:
        photo = update.message.photo[-1]
        file = await context.bot.get_file(photo.file_id)
        b = await file.download_as_bytearray()
        b = bytes(b)
    except Exception as e:
        await update.message.reply_text("–ù–µ —Å–º–æ–≥ —Å–∫–∞—á–∞—Ç—å —Ñ–æ—Ç–æ. –ü—Ä–∏—à–ª–∏—Ç–µ –∫–∞–∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ (–Ω–µ –∫–∞–∫ —Ñ–∞–π–ª).")
        return

    # –∂–¥—ë–º —Ñ–æ–Ω (–ø–µ—Ä–µ–ª–æ–∫–∞—Ü–∏—è)
    if stt.get("await_bg"):
        stt["await_bg"] = False
        bg_bytes = b
        if not stt.get("dressed"):
            await update.message.reply_text("–°–Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –ø—Ä–∏–º–µ—Ä–∫—É, –∑–∞—Ç–µ–º –º–µ–Ω—è–π—Ç–µ –ª–æ–∫–∞—Ü–∏—é.")
            return
        await update.message.reply_text("‚è≥ –ü–µ—Ä–µ—Å–æ–±–∏—Ä–∞—é —Å –Ω–æ–≤—ã–º —Ñ–æ–Ω–æ–º‚Ä¶")
        try:
            out = await asyncio.to_thread(repose_or_relocate, stt["dressed"], "", bg_bytes)
            stt["dressed"] = out
            await update.message.reply_photo(photo=out, caption="‚úÖ –ù–æ–≤–∞—è –ª–æ–∫–∞—Ü–∏—è –≥–æ—Ç–æ–≤–∞.", reply_markup=kb_tryon_after())
        except Exception as e:
            await update.message.reply_text(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–º–µ–Ω–µ –ª–æ–∫–∞—Ü–∏–∏: {e}")
        return

    # –æ–±—ã—á–Ω—ã–π —Ñ–ª–æ—É: —á–µ–ª–æ–≤–µ–∫/–æ–¥–µ–∂–¥–∞
    if stt["stage"] == "await_person":
        stt["person"] = b
        stt["stage"] = "await_garment"
        await update.message.reply_text("‚úÖ –§–æ—Ç–æ —á–µ–ª–æ–≤–µ–∫–∞ –ø–æ–ª—É—á–µ–Ω–æ.\n–¢–µ–ø–µ—Ä—å –ø—Ä–∏—à–ª–∏—Ç–µ —Ñ–æ—Ç–æ –æ–¥–µ–∂–¥—ã.",
                                        reply_markup=kb_tryon_need_garment())
        return

    if stt["stage"] == "await_garment":
        stt["garment"] = b
        stt["stage"] = "confirm"
        await update.message.reply_text(
            "–§–æ—Ç–æ –ø–æ–ª—É—á–µ–Ω—ã. –ì–æ—Ç–æ–≤—ã –ø—Ä–∏–º–µ—Ä—è—Ç—å?",
            reply_markup=kb_tryon_confirm("‚ë° ‚Üí ‚ë†", st.get("tryon_bonus", 0))
        )
        return

    if stt["stage"] == "confirm":
        await update.message.reply_text("–£ –Ω–∞—Å —É–∂–µ –µ—Å—Ç—å –æ–±–∞ —Å–Ω–∏–º–∫–∞. –ù–∞–∂–º–∏—Ç–µ ¬´‚ú® –ü—Ä–∏–º–µ—Ä–∏—Ç—å¬ª –∏–ª–∏ ¬´üîÅ –ü–æ–º–µ–Ω—è—Ç—å –º–µ—Å—Ç–∞–º–∏¬ª.",
                                        reply_markup=kb_tryon_confirm("‚ë° ‚Üí ‚ë†", st.get("tryon_bonus", 0)))

# --- –ò–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–∫–∏ ---
async def on_cb(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not await check_access(update): return
    q = update.callback_query; await q.answer()
    uid = q.from_user.id; _ensure(uid); st = users[uid]; data = q.data
    log.info("Button: %s", data)

    # –ì–ª–∞–≤–Ω—ã–µ –ø—É–Ω–∫—Ç—ã
    if data == "menu_make":
        await q.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏:", reply_markup=kb_modes()); return
    if data == "menu_lego":
        # –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º LEGO —Ä–µ–∂–∏–º
        st.update({"mode": "lego", "scene": None, "style": "LEGO", "replica": None})
        await q.message.edit_text("üß± –†–µ–∂–∏–º ¬´LEGO –º—É–ª—å—Ç–∏–∫–∏¬ª –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!")
        explanation = ("üß± –†–µ–∂–∏–º –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è LEGO –º—É–ª—å—Ç–∏–∫–æ–≤: –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å—Ü–µ–Ω—ã –≤ —Å—Ç–∏–ª–µ LEGO —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º —Å—Ç–∏–ª–µ–º!\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Å—é–∂–µ—Ç–∞:")
        await q.message.reply_text(explanation, reply_markup=kb_lego_menu()); return
    if data == "menu_alive":
        await q.message.edit_text("üñºÔ∏è –û–∂–∏–≤–ª–µ–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (–≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ)."); return
    if data == "menu_tryon":
        st["tryon"] = {"stage": "await_person", "person": None, "garment": None, "dressed": None, "await_bg": False, "await_prompt": False}
        await q.message.edit_text(
            "üëó –í–∏—Ä—Ç—É–∞–ª—å–Ω–∞—è –ø—Ä–∏–º–µ—Ä–æ—á–Ω–∞—è\n\n"
            "1) –ü—Ä–∏—à–ª–∏—Ç–µ —Ñ–æ—Ç–æ —á–µ–ª–æ–≤–µ–∫–∞, –∫–æ—Ç–æ—Ä–æ–≥–æ –±—É–¥–µ–º –æ–¥–µ–≤–∞—Ç—å\n"
            "2) –ó–∞—Ç–µ–º –ø—Ä–∏—à–ª–∏—Ç–µ —Ñ–æ—Ç–æ –æ–¥–µ–∂–¥—ã (–º–æ–∂–Ω–æ –¥–∞–∂–µ –Ω–∞ –¥—Ä—É–≥–æ–º —á–µ–ª–æ–≤–µ–∫–µ)",
            reply_markup=kb_tryon_start()
        ); return
    # --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ–ø—É—Å–∫–∞ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –æ –Ω–∏–∑–∫–æ–º –±–∞–ª–∞–Ω—Å–µ ---
    if data == "skip_low_coins":
        await q.message.edit_text(
            "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
            reply_markup=kb_home_inline()
        )
        return

    # --- –¢—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π ---
    if data == "menu_transforms":
        coins = st.get("coins", 0)
        await q.message.edit_text(
            f"üì∏ –ò–∑–º–µ–Ω–∏—Ç—å —Ñ–æ—Ç–æ\n\n"
            f"üí∞ –£ —Ç–µ–±—è: {coins} –º–æ–Ω–µ—Ç–æ–∫\n\n"
            f"‚ú® –£–¥–∞–ª–∏—Ç—å —Ñ–æ–Ω (‚àí1 –º–æ–Ω–µ—Ç–∫–∞)\n"
            f"–í—ã—Ä–µ–∂—É —Ñ–æ–Ω. –ú–æ–≥—É –ø–æ—Å—Ç–∞–≤–∏—Ç—å –±–µ–ª—ã–π/–≥—Ä–∞–¥–∏–µ–Ω—Ç/–≤–∞—à —Ñ–æ–Ω.\n\n"
            f"üë• –°–æ–≤–º–µ—Å—Ç–∏—Ç—å –ª—é–¥–µ–π (‚àí1 –º–æ–Ω–µ—Ç–∫–∞)\n"
            f"–°–æ–±–µ—Ä—É –≤—Å–µ—Ö –≤ –æ–¥–∏–Ω –∫–∞–¥—Ä, –∫–∞–∫ –±—É–¥—Ç–æ —Å–Ω–∏–º–∞–ª–∏—Å—å –≤–º–µ—Å—Ç–µ.\n\n"
            f"üß© –í–Ω–µ–¥—Ä–∏—Ç—å –æ–±—ä–µ–∫—Ç –Ω–∞ —Ñ–æ—Ç–æ (‚àí1 –º–æ–Ω–µ—Ç–∫–∞)\n"
            f"–î–æ–±–∞–≤–ª—é –ø—Ä–µ–¥–º–µ—Ç –∏ –≤–ø–∏—à—É –ø–æ —Å–≤–µ—Ç—É/–ø–µ—Ä—Å–ø–µ–∫—Ç–∏–≤–µ.\n\n"
            f"ü™Ñ –ú–∞–≥–∏—á–µ—Å–∫–∞—è —Ä–µ—Ç—É—à—å (‚àí1 –º–æ–Ω–µ—Ç–∫–∞)\n"
            f"–£–±–µ—Ä—É –ª–∏—à–Ω–µ–µ –∏–ª–∏ –¥–æ–±–∞–≤–ª—é –¥–µ—Ç–∞–ª—å. –ú–æ–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å –æ–±–ª–∞—Å—Ç—å.\n\n"
            f"üì∑ Polaroid (‚àí1 –º–æ–Ω–µ—Ç–∫–∞)\n"
            f"–†–∞–º–∫–∞, –ø–ª—ë–Ω–æ—á–Ω–æ–µ –∑–µ—Ä–Ω–æ, –ø–æ–¥–ø–∏—Å—å.",
            reply_markup=kb_transforms()
        )
        return

    # --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–π ---
    if data == "transform_remove_bg":
        st["transform_type"] = "remove_bg"
        await q.message.edit_text(
            "‚ú® –£–¥–∞–ª–∏—Ç—å —Ñ–æ–Ω\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—á–µ—Å—Ç–≤–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏:",
            reply_markup=kb_transform_quality()
        )
        return

    if data == "transform_merge_people":
        st["transform_type"] = "merge_people"
        await q.message.edit_text(
            "üë• –°–æ–≤–º–µ—Å—Ç–∏—Ç—å –ª—é–¥–µ–π\n\n"
            "–ü—Ä–∏—à–ª–∏—Ç–µ 2-3 —Ñ–æ—Ç–æ –ª—é–¥–µ–π (–ø–æ –æ–¥–Ω–æ–º—É —Ñ–æ—Ç–æ –Ω–∞ —á–µ–ª–æ–≤–µ–∫–∞).\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—á–µ—Å—Ç–≤–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏:",
            reply_markup=kb_transform_quality()
        )
        return

    if data == "transform_inject_object":
        st["transform_type"] = "inject_object"
        await q.message.edit_text(
            "üß© –í–Ω–µ–¥—Ä–∏—Ç—å –æ–±—ä–µ–∫—Ç –Ω–∞ —Ñ–æ—Ç–æ\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—á–µ—Å—Ç–≤–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏:",
            reply_markup=kb_transform_quality()
        )
        return

    if data == "transform_retouch":
        st["transform_type"] = "retouch"
        await q.message.edit_text(
            "ü™Ñ –ú–∞–≥–∏—á–µ—Å–∫–∞—è —Ä–µ—Ç—É—à—å\n\n"
            "–ü—Ä–∏—à–ª–∏—Ç–µ —Ñ–æ—Ç–æ –¥–ª—è —Ä–µ—Ç—É—à–∏.\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—á–µ—Å—Ç–≤–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏:",
            reply_markup=kb_transform_quality()
        )
        return

    if data == "transform_polaroid":
        st["transform_type"] = "polaroid"
        await q.message.edit_text(
            "üì∑ Polaroid\n\n"
            "–ü—Ä–∏—à–ª–∏—Ç–µ 1-4 —Ñ–æ—Ç–æ –ª—é–¥–µ–π –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è Polaroid.\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—á–µ—Å—Ç–≤–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏:",
            reply_markup=kb_transform_quality()
        )
        return

    # --- –í—ã–±–æ—Ä –∫–∞—á–µ—Å—Ç–≤–∞ ---
    if data in ("quality_basic", "quality_premium"):
        st["transform_quality"] = "basic" if data == "quality_basic" else "premium"
        transform_type = st.get("transform_type")
        
        if transform_type == "remove_bg":
            text = "‚ú® –£–¥–∞–ª–∏—Ç—å —Ñ–æ–Ω\n\n–ü—Ä–∏—à–ª–∏—Ç–µ —Ñ–æ—Ç–æ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Ñ–æ–Ω–∞."
        elif transform_type == "merge_people":
            text = "üë• –°–æ–≤–º–µ—Å—Ç–∏—Ç—å –ª—é–¥–µ–π\n\n–ü—Ä–∏—à–ª–∏—Ç–µ 2-3 —Ñ–æ—Ç–æ –ª—é–¥–µ–π (–ø–æ –æ–¥–Ω–æ–º—É –Ω–∞ —á–µ–ª–æ–≤–µ–∫–∞)."
        elif transform_type == "inject_object":
            text = "üß© –í–Ω–µ–¥—Ä–∏—Ç—å –æ–±—ä–µ–∫—Ç –Ω–∞ —Ñ–æ—Ç–æ\n\n–û–ø–∏—à–∏—Ç–µ –æ–±—ä–µ–∫—Ç, –∫–æ—Ç–æ—Ä—ã–π –Ω—É–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å (–Ω–∞–ø—Ä–∏–º–µ—Ä: '–∫—Ä–∞—Å–Ω–∞—è —á–∞—à–∫–∞ –∫–æ—Ñ–µ'):"
            st["awaiting_transform"] = True
            await q.message.edit_text(text)
            return
        elif transform_type == "retouch":
            text = "ü™Ñ –ú–∞–≥–∏—á–µ—Å–∫–∞—è —Ä–µ—Ç—É—à—å\n\n–û–ø–∏—à–∏—Ç–µ —á—Ç–æ —É–±—Ä–∞—Ç—å –∏–ª–∏ –¥–æ–±–∞–≤–∏—Ç—å (–Ω–∞–ø—Ä–∏–º–µ—Ä: '—É–±–µ—Ä–∏ –ø—Ä–æ—Ö–æ–∂–µ–≥–æ —Å–ª–µ–≤–∞'):"
            st["awaiting_transform"] = True
            await q.message.edit_text(text)
            return
        elif transform_type == "polaroid":
            text = "üì∑ Polaroid\n\n–ü—Ä–∏—à–ª–∏—Ç–µ 1-4 —Ñ–æ—Ç–æ –ª—é–¥–µ–π –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è Polaroid."
        else:
            text = "–ü—Ä–∏—à–ª–∏—Ç–µ —Ñ–æ—Ç–æ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏."
        
        quality_text = "‚ö° –ë—ã—Å—Ç—Ä–æ–µ" if st["transform_quality"] == "basic" else "üé® –ü—Ä–µ–º–∏—É–º"
        cost = 1 if st["transform_quality"] == "basic" else 2
        
        await q.message.edit_text(
            f"{text}\n\n"
            f"‚úÖ –ö–∞—á–µ—Å—Ç–≤–æ: {quality_text}\n"
            f"üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: {cost} –º–æ–Ω–µ—Ç–∫–∏",
            reply_markup=kb_back_transforms()
        )
        st["awaiting_transform"] = True
        return

    if data == "menu_jsonpro":
        st["jsonpro"] = {"await_text": False, "last_json": None, "orientation": DEFAULT_ORIENTATION}
        await q.message.edit_text(
            "üßæ JSON (–¥–ª—è –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã—Ö)\n"
            "–í–≤–µ–¥–∏ —Ç–µ–∫—Å—Ç —Å—Ü–µ–Ω—ã, —è —Å–æ–±–µ—Ä—É –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω—ã–π JSON-–ø–æ–¥—Å–∫–∞–∑—á–∏–∫ –¥–ª—è Veo.\n"
            "–î–∞–ª—å—à–µ –≤—ã–±–µ—Ä–µ—à—å –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏—é –∏ –∑–∞–ø—É—Å—Ç–∏—à—å –≥–µ–Ω–µ—Ä–∞—Ü–∏—é.",
            reply_markup=kb_jsonpro_start()
        ); return
    if data == "menu_guides":
        await q.message.edit_text(pricing_text(), reply_markup=pricing_keyboard())
        return
    if data == "menu_profile":
        coins = st.get("coins", 0)
        video_bonus = st.get("video_bonus", 0)
        photo_bonus = st.get("photo_bonus", 0)
        tryon_bonus = st.get("tryon_bonus", 0)
        plan = st.get("plan", "lite")
        plan_name = PLANS.get(plan, {}).get("name", "–ù–µ –≤—ã–±—Ä–∞–Ω")
        videos_left = st.get("videos_left", 0)
        photos_left = st.get("photos_left", 0)
        
        profile_text = f"üë§ –ü—Ä–æ—Ñ–∏–ª—å\n\n"
        
        if video_bonus > 0 or photo_bonus > 0 or tryon_bonus > 0:
            bonus_items = []
            if video_bonus > 0:
                bonus_items.append(f"{video_bonus} –≤–∏–¥–µ–æ")
            if photo_bonus > 0:
                bonus_items.append(f"{photo_bonus} —Ñ–æ—Ç–æ")
            if tryon_bonus > 0:
                bonus_items.append(f"{tryon_bonus} –ø—Ä–∏–º–µ—Ä–æ—á–Ω–∞—è")
            profile_text += f"üéÅ –ü–æ–¥–∞—Ä–∫–∏: {', '.join(bonus_items)}\n"
        
        profile_text += f"üí∞ –ú–æ–Ω–µ—Ç–∫–∏: {coins}\n"
        profile_text += f"üìä –¢–∞—Ä–∏—Ñ: {plan_name}\n"
        profile_text += f"üé¨ –í–∏–¥–µ–æ: {videos_left}\n"
        profile_text += f"üì∏ –§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π: {photos_left}\n\n"
        profile_text += f"üí° –ü—Ä–∏–º–µ—Ä: –≤–∏–¥–µ–æ = 10 –º–æ–Ω–µ—Ç–æ–∫, –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ = 1 –º–æ–Ω–µ—Ç–∫–∞"
        
        await q.message.edit_text(
            profile_text,
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("‚ö° –ë—ã—Å—Ç—Ä—ã–µ –¥–æ–∫—É–ø–∫–∏", callback_data="show_addons")],
                [InlineKeyboardButton("üìö –¢–∞—Ä–∏—Ñ—ã", callback_data="open:pricing")],
                [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_home")],
            ])
        )
        return

    # --- –ü–æ–∫—É–ø–∫–∞ –º–æ–Ω–µ—Ç ---
    if data == "buy_coins":
        buttons = []
        for top_up in TOP_UPS:
            label = f"+{top_up['coins']} –º–æ–Ω–µ—Ç–æ–∫ ‚Äî {top_up['price_rub']} ‚ÇΩ"
            if top_up.get("label"):
                label += f" ({top_up['label']})"
            buttons.append([InlineKeyboardButton(label, callback_data=f"buy_{top_up['coins']}")])
        
        buttons.append([InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="menu_profile")])
        
        await q.message.edit_text(
            "üí≥ –î–æ–∫—É–ø–∏—Ç—å –º–æ–Ω–µ—Ç–∫–∏\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–æ–Ω–µ—Ç–æ–∫ –¥–ª—è –ø–æ–∫—É–ø–∫–∏:",
            reply_markup=InlineKeyboardMarkup(buttons)
        )
        return

    # --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –ø–æ–∫—É–ø–∫–∏ ---
    if data.startswith("buy_"):
        coins_to_buy = int(data.split("_")[1])
        top_up = next((t for t in TOP_UPS if t["coins"] == coins_to_buy), None)
        
        if top_up:
            await q.message.edit_text(
                f"üí≥ –ü–æ–∫—É–ø–∫–∞ {coins_to_buy} –º–æ–Ω–µ—Ç–æ–∫ –∑–∞ {top_up['price_rub']} ‚ÇΩ\n\n"
                f"–§—É–Ω–∫—Ü–∏—è –æ–ø–ª–∞—Ç—ã –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∞ –ø–æ–∑–∂–µ.\n"
                f"–ü–æ–∫–∞ —á—Ç–æ –º–æ–Ω–µ—Ç–∫–∏ –º–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å —á–µ—Ä–µ–∑ —Ç–∞—Ä–∏—Ñ–Ω—ã–µ –ø–ª–∞–Ω—ã.",
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton("üìä –¢–∞—Ä–∏—Ñ–Ω—ã–µ –ø–ª–∞–Ω—ã", callback_data="change_plan")],
                    [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="buy_coins")],
                ])
            )
        return

    # --- –°–º–µ–Ω–∞ —Ç–∞—Ä–∏—Ñ–∞ ---
    if data == "change_plan":
        buttons = []
        for plan_id, plan_data in PLANS.items():
            label = f"{plan_data['name']} ‚Äî {plan_data['price_rub']} ‚ÇΩ ‚Ä¢ {plan_data['coins']} –º–æ–Ω–µ—Ç–æ–∫"
            if plan_data.get("recommended"):
                label += " (–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º)"
            buttons.append([InlineKeyboardButton(label, callback_data=f"plan_{plan_id}")])
        
        buttons.append([InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="menu_guides")])
        
        await q.message.edit_text(
            "üìä –¢–∞—Ä–∏—Ñ–Ω—ã–µ –ø–ª–∞–Ω—ã\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–π —Ç–∞—Ä–∏—Ñ:",
            reply_markup=InlineKeyboardMarkup(buttons)
        )
        return

    # --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ç–∞—Ä–∏—Ñ–∞ ---
    if data.startswith("plan_"):
        plan_id = data.split("_")[1]
        if plan_id in PLANS:
            plan_data = PLANS[plan_id]
            await q.message.edit_text(
                f"üìä –¢–∞—Ä–∏—Ñ {plan_data['name']}\n\n"
                f"üí∞ –¶–µ–Ω–∞: {plan_data['price_rub']} ‚ÇΩ\n"
                f"ü™ô –ú–æ–Ω–µ—Ç—ã: {plan_data['coins']}\n"
                f"üé¨ –í–∏–¥–µ–æ –≤ –¥–µ–Ω—å: {DAILY_CAP_VIDEOS.get(plan_id, 3)}\n\n"
                f"–§—É–Ω–∫—Ü–∏—è —Å–º–µ–Ω—ã —Ç–∞—Ä–∏—Ñ–∞ –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∞ –ø–æ–∑–∂–µ.",
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="change_plan")],
                ])
            )
        return

    # --- –†–µ—Ç—Ä–∞–∏ ---
    if data == "video_retry":
        if not st.get("current_job_id"):
            await q.message.reply_text("‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –∑–∞–¥–∞—á–∏ –¥–ª—è —Ä–µ—Ç—Ä–∞—è.")
            return
        
        job_id = st["current_job_id"]
        if not can_retry(st, job_id):
            retry_cost = get_retry_cost(st, job_id)
            await q.message.reply_text(
                f"‚ùå –ù–µ —Ö–≤–∞—Ç–∞–µ—Ç –º–æ–Ω–µ—Ç –¥–ª—è —Ä–µ—Ç—Ä–∞—è.\n"
                f"–ù—É–∂–Ω–æ: {retry_cost} –º–æ–Ω–µ—Ç, —É –≤–∞—Å: {st.get('coins', 0)} –º–æ–Ω–µ—Ç.",
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton("üí≥ –î–æ–∫—É–ø–∏—Ç—å –º–æ–Ω–µ—Ç—ã", callback_data="buy_coins")],
                    [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_home")],
                ])
            )
            return
        
        # –î–µ–ª–∞–µ–º —Ä–µ—Ç—Ä–∞–π
        if retry(st, job_id):
            await q.message.edit_text(
                "üîÑ –°–æ–∑–¥–∞—é –µ—â—ë –≤–∞—Ä–∏–∞–Ω—Ç –≤–∏–¥–µ–æ...\n"
                f"üí∞ {'–°–ø–∏—Å–∞–Ω–æ: ' + str(get_retry_cost(st, job_id)) + ' –º–æ–Ω–µ—Ç' if get_retry_cost(st, job_id) > 0 else '–ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π —Ä–µ—Ç—Ä–∞–π'}"
            )
            # –ó–¥–µ—Å—å –±—É–¥–µ—Ç –ø–æ–≤—Ç–æ—Ä–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –≤–∏–¥–µ–æ
            # –ü–æ–∫–∞ –∑–∞–≥–ª—É—à–∫–∞
            await asyncio.sleep(3)
            await q.message.edit_text("‚úÖ –ù–æ–≤—ã–π –≤–∞—Ä–∏–∞–Ω—Ç –≥–æ—Ç–æ–≤!", reply_markup=kb_video_result())
        return

    if data == "transform_retry":
        if not st.get("current_job_id"):
            await q.message.reply_text("‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –∑–∞–¥–∞—á–∏ –¥–ª—è —Ä–µ—Ç—Ä–∞—è.")
            return
        
        job_id = st["current_job_id"]
        if not can_retry(st, job_id):
            retry_cost = get_retry_cost(st, job_id)
            await q.message.reply_text(
                f"‚ùå –ù–µ —Ö–≤–∞—Ç–∞–µ—Ç –º–æ–Ω–µ—Ç –¥–ª—è —Ä–µ—Ç—Ä–∞—è.\n"
                f"–ù—É–∂–Ω–æ: {retry_cost} –º–æ–Ω–µ—Ç, —É –≤–∞—Å: {st.get('coins', 0)} –º–æ–Ω–µ—Ç.",
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton("üí≥ –î–æ–∫—É–ø–∏—Ç—å –º–æ–Ω–µ—Ç—ã", callback_data="buy_coins")],
                    [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="menu_transforms")],
                ])
            )
            return
        
        # –î–µ–ª–∞–µ–º —Ä–µ—Ç—Ä–∞–π
        if retry(st, job_id):
            await q.message.edit_text(
                "üîÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é —Ñ–æ—Ç–æ –µ—â—ë —Ä–∞–∑...\n"
                f"üí∞ {'–°–ø–∏—Å–∞–Ω–æ: ' + str(get_retry_cost(st, job_id)) + ' –º–æ–Ω–µ—Ç' if get_retry_cost(st, job_id) > 0 else '–ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π —Ä–µ—Ç—Ä–∞–π'}"
            )
            # –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ
            transform_type = st.get("transform_type")
            quality = st.get("transform_quality", "basic")
            
            result_bytes = await asyncio.to_thread(
                process_transform, 
                transform_type, 
                st["transform_images"], 
                st.get("transform_text"), 
                quality
            )
            
            # –û—Ç–º–µ—á–∞–µ–º —É—Å–ø–µ—Ö
            on_success(st, job_id)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            caption = f"‚úÖ –ù–æ–≤—ã–π –≤–∞—Ä–∏–∞–Ω—Ç –≥–æ—Ç–æ–≤!"
            if transform_type == "polaroid":
                caption = "‚úÖ –ù–æ–≤—ã–π Polaroid –≥–æ—Ç–æ–≤!"
            
            await q.message.reply_photo(
                photo=result_bytes,
                caption=caption,
                reply_markup=kb_transform_result()
            )
        return

    # -----------------------------------------------------------------------------
    # –¢–ê–†–ò–§–´ –ò –ê–î–î–û–ù–´
    # -----------------------------------------------------------------------------
    
    # –ü–æ–∫—É–ø–∫–∞ —Ç–∞—Ä–∏—Ñ–∞
    if data.startswith("plan:"):
        plan_key = data.split(":")[1]
        plan = PLANS[plan_key]
        
        try:
            payment_url = create_payment_link(
                user_id=q.from_user.id,
                amount=plan["price_rub"],
                description=f"–¢–∞—Ä–∏—Ñ {plan['name']} - {plan['videos']} –≤–∏–¥–µ–æ + {plan['photos']} —Ñ–æ—Ç–æ",
                metadata={"plan": plan_key, "type": "plan"}
            )
            
            await q.edit_message_text(
                f"–í—ã–±—Ä–∞–Ω–æ: {plan['name']} ‚Äî {plan['price_rub']} ‚ÇΩ\n"
                f"–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –ª–∏–º–∏—Ç—ã –±—É–¥—É—Ç –∑–∞—á–∏—Å–ª–µ–Ω—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏.\n\n"
                f"üìã –ß—Ç–æ –≤–∫–ª—é—á–µ–Ω–æ:\n"
                f"‚Ä¢ {plan['videos']} –≤–∏–¥–µ–æ\n"
                f"‚Ä¢ {plan['photos']} —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π\n\n"
                f"üìã –°–æ–≥–ª–∞—à–∞—è—Å—å –Ω–∞ –æ–ø–ª–∞—Ç—É, –≤—ã –ø—Ä–∏–Ω–∏–º–∞–µ—Ç–µ —É—Å–ª–æ–≤–∏—è –æ—Ñ–µ—Ä—Ç—ã:\n"
                f"/terms ‚Äî –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ —Å–æ–≥–ª–∞—à–µ–Ω–∏–µ",
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton("üí≥ –û–ø–ª–∞—Ç–∏—Ç—å", url=payment_url)],
                    [InlineKeyboardButton("üìã –û—Ñ–µ—Ä—Ç–∞", callback_data="show_terms")],
                    [InlineKeyboardButton("‚Üê –ù–∞–∑–∞–¥ –∫ —Ç–∞—Ä–∏—Ñ–∞–º", callback_data="open:pricing")],
                ])
            )
        except Exception as e:
            log.error(f"Error creating payment for plan {plan_key}: {e}")
            await q.edit_message_text(
                "‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton("‚Üê –ù–∞–∑–∞–¥", callback_data="open:pricing")],
                ])
            )
        return
    
    # –ü–æ–∫—É–ø–∫–∞ –∞–¥–¥–æ–Ω–∞
    if data.startswith("addon:"):
        addon_key = data.split(":")[1]
        addon = ADDONS[addon_key]
        
        try:
            payment_url = create_payment_link(
                user_id=q.from_user.id,
                amount=addon["price_rub"],
                description=addon["title"],
                metadata={"addon": addon_key, "type": "addon"}
            )
            
            description = f"‚Ä¢ {addon['videos']} –≤–∏–¥–µ–æ" if addon['videos'] > 0 else ""
            if addon['photos'] > 0:
                description += f"\n‚Ä¢ {addon['photos']} —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π" if addon['videos'] > 0 else f"‚Ä¢ {addon['photos']} —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π"
            
            await q.edit_message_text(
                f"–í—ã–±—Ä–∞–Ω–æ: {addon['title']}\n"
                f"–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –ª–∏–º–∏—Ç—ã –±—É–¥—É—Ç –∑–∞—á–∏—Å–ª–µ–Ω—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏.\n\n"
                f"üìã –ß—Ç–æ –≤–∫–ª—é—á–µ–Ω–æ:\n{description}\n\n"
                f"üìã –°–æ–≥–ª–∞—à–∞—è—Å—å –Ω–∞ –æ–ø–ª–∞—Ç—É, –≤—ã –ø—Ä–∏–Ω–∏–º–∞–µ—Ç–µ —É—Å–ª–æ–≤–∏—è –æ—Ñ–µ—Ä—Ç—ã:\n"
                f"/terms ‚Äî –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ —Å–æ–≥–ª–∞—à–µ–Ω–∏–µ",
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton("üí≥ –û–ø–ª–∞—Ç–∏—Ç—å", url=payment_url)],
                    [InlineKeyboardButton("üìã –û—Ñ–µ—Ä—Ç–∞", callback_data="show_terms")],
                    [InlineKeyboardButton("‚Üê –ù–∞–∑–∞–¥", callback_data="show_addons")],
                ])
            )
        except Exception as e:
            log.error(f"Error creating payment for addon {addon_key}: {e}")
            await q.edit_message_text(
                "‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton("‚Üê –ù–∞–∑–∞–¥", callback_data="show_addons")],
                ])
            )
        return
    
    # –ü–æ–∫–∞–∑–∞—Ç—å –∞–¥–¥–æ–Ω—ã
    if data == "show_addons":
        # –ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω–∞—è —Ä–∞—Å—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞
        uid = q.from_user.id
        st = users.get(uid, {})
        videos_left = st.get("videos_left", 0)
        photos_left = st.get("photos_left", 0)
        
        order = []
        if videos_left <= 2:
            order += ["v5", "v10"]
        if photos_left <= 10:
            order += ["p20", "p50"]
        # –¥–æ–±–∏–≤–∞–µ–º –¥–æ –ø–æ–ª–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞, —Å–æ—Ö—Ä–∞–Ω—è—è —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å
        for k in ["v5", "v10", "p20", "p50", "mix"]:
            if k not in order: 
                order.append(k)
        
        await q.edit_message_text(addons_text(), reply_markup=addons_keyboard(order))
        return
    
    # –ù–∞–≤–∏–≥–∞—Ü–∏—è
    if data == "open:pricing":
        await q.edit_message_text(pricing_text(), reply_markup=pricing_keyboard())
        return
    
    # –ü–æ–∫–∞–∑–∞—Ç—å –æ—Ñ–µ—Ä—Ç—É
    if data == "show_terms":
        terms_text = """üìã –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–¨–°–ö–û–ï –°–û–ì–õ–ê–®–ï–ù–ò–ï
Telegram –±–æ—Ç "Babka Bot"
–î–∞—Ç–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: 01.10.2025

1. –û–ë–©–ò–ï –ü–û–õ–û–ñ–ï–ù–ò–Ø
1.1. –ù–∞—Å—Ç–æ—è—â–µ–µ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ —Å–æ–≥–ª–∞—à–µ–Ω–∏–µ (–¥–∞–ª–µ–µ ‚Äî ¬´–°–æ–≥–ª–∞—à–µ–Ω–∏–µ¬ª) —Ä–µ–≥—É–ª–∏—Ä—É–µ—Ç –ø–æ—Ä—è–¥–æ–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Å–µ—Ä–≤–∏—Å–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –ø–æ—Å—Ä–µ–¥—Å—Ç–≤–æ–º Telegram –±–æ—Ç–∞ "Babka Bot" (–¥–∞–ª–µ–µ ‚Äî ¬´–°–µ—Ä–≤–∏—Å¬ª) –∏ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç –≤–∑–∞–∏–º–æ–æ—Ç–Ω–æ—à–µ–Ω–∏—è –º–µ–∂–¥—É –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–µ–π –°–µ—Ä–≤–∏—Å–∞ –∏ –ª–∏—Ü–æ–º, –∏—Å–ø–æ–ª—å–∑—É—é—â–∏–º —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –±–æ—Ç–∞ (–¥–∞–ª–µ–µ ‚Äî ¬´–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å¬ª).
1.2. –ü—Ä–∏–æ–±—Ä–µ—Ç–∞—è —Ç–∞—Ä–∏—Ñ–Ω—ã–π –ø–ª–∞–Ω, –æ—Å—É—â–µ—Å—Ç–≤–ª—è—è –æ–ø–ª–∞—Ç—É —É—Å–ª—É–≥ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É—è –ª—é–±—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –°–µ—Ä–≤–∏—Å–∞, –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –±–µ–∑—É—Å–ª–æ–≤–Ω–æ –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –Ω–∞—Å—Ç–æ—è—â–µ–µ –°–æ–≥–ª–∞—à–µ–Ω–∏–µ –≤ –ø–æ–ª–Ω–æ–º –æ–±—ä—ë–º–µ –∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç, —á—Ç–æ:

‚Ä¢ –û–∑–Ω–∞–∫–æ–º–∏–ª—Å—è —Å–æ –≤—Å–µ–º–∏ —É—Å–ª–æ–≤–∏—è–º–∏ –Ω–∞—Å—Ç–æ—è—â–µ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞
‚Ä¢ –î–æ—Å—Ç–∏–≥ —Å–æ–≤–µ—Ä—à–µ–Ω–Ω–æ–ª–µ—Ç–∏—è (18 –ª–µ—Ç)
‚Ä¢ –û–±–ª–∞–¥–∞–µ—Ç –ø—Ä–∞–≤–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å—é –¥–ª—è –∑–∞–∫–ª—é—á–µ–Ω–∏—è —Å–æ–≥–ª–∞—à–µ–Ω–∏–π

1.3. –í —Å–ª—É—á–∞–µ –Ω–µ—Å–æ–≥–ª–∞—Å–∏—è —Å –ª—é–±—ã–º –∏–∑ –ø–æ–ª–æ–∂–µ–Ω–∏–π –Ω–∞—Å—Ç–æ—è—â–µ–≥–æ –°–æ–≥–ª–∞—à–µ–Ω–∏—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –°–µ—Ä–≤–∏—Å–∞ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ –ø—Ä–µ–∫—Ä–∞—â–µ–Ω–æ.

‚ö†Ô∏è –°–ü–ï–¶–ò–ê–õ–¨–ù–´–ï –£–°–õ–û–í–ò–Ø –ò –û–ì–†–ê–ù–ò–ß–ï–ù–ò–Ø –û–¢–í–ï–¢–°–¢–í–ï–ù–ù–û–°–¢–ò

3.1. –ü—Ä–∏—Ä–æ–¥–∞ AI-–≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
‚Ä¢ –í–°–ï —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–æ–∑–¥–∞—é—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –∞–ª–≥–æ—Ä–∏—Ç–º–∞–º–∏ –Ω–µ–π—Ä–æ–Ω–Ω—ã—Ö —Å–µ—Ç–µ–π
‚Ä¢ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏—è –°–µ—Ä–≤–∏—Å–∞ –≤—ã—Å—Ç—É–ø–∞–µ—Ç –∏—Å–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ –≤ —Ä–æ–ª–∏ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–≥–æ –∞–≥—Ä–µ–≥–∞—Ç–æ—Ä–∞

3.2. –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏—è –ù–ï –ù–ï–°–Å–¢ –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å –∑–∞:
‚Ä¢ –•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –∫–∞—á–µ—Å—Ç–≤–∞ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
‚Ä¢ –°–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–æ–µ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –∏ —Ç–µ–∫—Å—Ç–æ–≤—É—é —Å–æ—Å—Ç–∞–≤–ª—è—é—â—É—é
‚Ä¢ –¢–µ—Ö–Ω–∏—á–µ—Å–∫—É—é —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—é —Å—Ç–æ—Ä–æ–Ω–Ω–∏—Ö —Å–µ—Ä–≤–∏—Å–æ–≤
‚Ä¢ –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è–º –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

4. –°–ò–°–¢–ï–ú–ê –ú–û–ù–ï–¢–ò–ó–ê–¶–ò–ò
4.1. –¢–∞—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ü–∏–π:
‚Ä¢ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≤–∏–¥–µ–æ: 10 –º–æ–Ω–µ—Ç–æ–∫
‚Ä¢ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: 1 –º–æ–Ω–µ—Ç–∫–∞
‚Ä¢ –ü–µ—Ä–≤–∞—è –ø–æ–≤—Ç–æ—Ä–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è: –±–µ–∑ —Å–ø–∏—Å–∞–Ω–∏—è

4.2. –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–µ –±–æ–Ω—É—Å—ã:
‚Ä¢ 2 –±–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –≤–∏–¥–µ–æ-–≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
‚Ä¢ 3 –±–µ—Å–ø–ª–∞—Ç–Ω—ã–µ —Ñ–æ—Ç–æ-–æ–±—Ä–∞–±–æ—Ç–∫–∏

4.3. –¢–∞—Ä–∏—Ñ–Ω—ã–µ –ø–ª–∞–Ω—ã:
‚Ä¢ –õ–ê–ô–¢ ‚Äî 1 990 ‚ÇΩ (120 –º–æ–Ω–µ—Ç–æ–∫, –ª–∏–º–∏—Ç 3 –≤–∏–¥–µ–æ/–¥–µ–Ω—å)
‚Ä¢ –°–¢–ê–ù–î–ê–†–¢ ‚Äî 2 490 ‚ÇΩ (200 –º–æ–Ω–µ—Ç–æ–∫, –ª–∏–º–∏—Ç 5 –≤–∏–¥–µ–æ/–¥–µ–Ω—å)
‚Ä¢ –ü–†–û ‚Äî 4 990 ‚ÇΩ (400 –º–æ–Ω–µ—Ç–æ–∫, –ª–∏–º–∏—Ç 10 –≤–∏–¥–µ–æ/–¥–µ–Ω—å)

4.6. –õ–æ–≥–∏–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–æ–≤:
–í–æ–∑–≤—Ä–∞—Ç —Ä–µ—Å—É—Ä—Å–æ–≤ –æ—Å—É—â–µ—Å—Ç–≤–ª—è–µ—Ç—Å—è –¢–û–õ–¨–ö–û –ø—Ä–∏:
‚Ä¢ –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö —Å–±–æ—è—Ö –Ω–∞ —Å—Ç–æ—Ä–æ–Ω–µ –°–µ—Ä–≤–∏—Å–∞
‚Ä¢ –û—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ —Ñ–∞–π–ª–∞ –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞
‚Ä¢ –ü–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–≤—Ä–µ–∂–¥—ë–Ω–Ω–æ–≥–æ –∏–ª–∏ –Ω–µ—á–∏—Ç–∞–µ–º–æ–≥–æ —Ñ–∞–π–ª–∞

–í–æ–∑–≤—Ä–∞—Ç –ù–ï –æ—Å—É—â–µ—Å—Ç–≤–ª—è–µ—Ç—Å—è –ø—Ä–∏:
‚Ä¢ –°—É–±—ä–µ–∫—Ç–∏–≤–Ω–æ–π –Ω–µ—É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä—ë–Ω–Ω–æ—Å—Ç–∏ –∫–∞—á–µ—Å—Ç–≤–æ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
‚Ä¢ –ù–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –æ–∂–∏–¥–∞–Ω–∏—è–º –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
‚Ä¢ –û—à–∏–±–∫–∞—Ö –≤ —Å–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–∞ —Å–æ —Å—Ç–æ—Ä–æ–Ω—ã –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

9. –í–û–ó–†–ê–°–¢–ù–´–ï –û–ì–†–ê–ù–ò–ß–ï–ù–ò–Ø
9.1. –°–µ—Ä–≤–∏—Å –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω –¥–ª—è –ª–∏—Ü, –¥–æ—Å—Ç–∏–≥—à–∏—Ö 18 –ª–µ—Ç.

‚ö†Ô∏è –í–ê–ñ–ù–û–ï –ù–ê–ü–û–ú–ò–ù–ê–ù–ò–ï
–ü—Ä–∏–æ–±—Ä–µ—Ç–∞—è —Ç–∞—Ä–∏—Ñ –∏ –∏—Å–ø–æ–ª—å–∑—É—è –°–µ—Ä–≤–∏—Å, –≤—ã –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç–µ:
‚Ä¢ –û–∑–Ω–∞–∫–æ–º–ª–µ–Ω–∏–µ —Å —É—Å–ª–æ–≤–∏—è–º–∏ –°–æ–≥–ª–∞—à–µ–Ω–∏—è
‚Ä¢ –ü–æ–Ω–∏–º–∞–Ω–∏–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–π –ø—Ä–∏—Ä–æ–¥—ã AI-–≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
‚Ä¢ –ü—Ä–∏–Ω—è—Ç–∏–µ –≤—Å–µ—Ö —Ä–∏—Å–∫–æ–≤, —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Å –Ω–µ–ø—Ä–µ–¥—Å–∫–∞–∑—É–µ–º–æ—Å—Ç—å—é —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
‚Ä¢ –ì–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –Ω–µ—Å—Ç–∏ –ø–æ–ª–Ω—É—é –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å –∑–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∫–æ–Ω—Ç–µ–Ω—Ç–∞

–í–µ—Ä—Å–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞: 1.0
–î–∞—Ç–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏—è –≤ —Å–∏–ª—É: 01.10.2025"""
        
        await q.edit_message_text(
            terms_text,
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —Ç–∞—Ä–∏—Ñ–∞–º", callback_data="open:pricing")],
            ])
        )
        return

    if data == "back_home":
        await q.message.edit_text("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=kb_home_inline())
        return

    # –†–µ–∂–∏–º—ã
    if data == "mode_helper":
        st.update({"mode": "helper", "scene": None, "style": None, "replica": None})
        st["awaiting_scene"] = True
        await q.message.edit_text("üß†‚ú® –†–µ–∂–∏–º —É–º–Ω–æ–≥–æ –ø–æ–º–æ—â–Ω–∏–∫–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!")
        await q.message.reply_text("–û–ø–∏—à–∏—Ç–µ –∏–¥–µ—é: —É–º–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –ø—Ä–µ–≤—Ä–∞—Ç–∏—Ç –µ—ë –≤ —Å—Ü–µ–Ω–∞—Ä–∏–π –¥–ª—è 8-—Å–µ–∫—É–Ω–¥–Ω–æ–≥–æ —Ä–æ–ª–∏–∫–∞ ‚ú®", reply_markup=kb_back_only()); return

    if data == "mode_manual":
        st.update({"mode": "manual", "scene": None, "style": None, "replica": None})
        st["awaiting_scene"] = True
        await q.message.edit_text("‚úèÔ∏è –†–µ–∂–∏–º —Ä—É—á–Ω–æ–≥–æ –≤–≤–æ–¥–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!")
        await q.message.reply_text("–í–≤–µ–¥–∏ —Å–≤–æ—é —Å—Ü–µ–Ω—É (—è –Ω–∏—á–µ–≥–æ –Ω–µ –º–µ–Ω—è—é).", reply_markup=kb_back_only()); return

    if data == "mode_meme":
        st.update({"mode": "meme", "style": None, "replica": None})
        scene = random_meme_scene(); st["scene"] = scene
        await q.message.edit_text("üé≤ –ú–µ–º–Ω—ã–π —Ä–µ–∂–∏–º –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!")
        await q.message.reply_text(f"üé≠ –°–ª—É—á–∞–π–Ω–∞—è —Å—Ü–µ–Ω–∞:\n\n{scene}", reply_markup=kb_meme()); return

    if data == "meme_again":
        scene = random_meme_scene(); st["scene"] = scene
        await q.message.edit_text(f"üé≠ –ù–æ–≤–∞—è —Å—Ü–µ–Ω–∞:\n\n{scene}", reply_markup=kb_meme()); return

    if data == "meme_to_helper":
        st["mode"] = "helper"; st["source_text"] = st.get("scene"); st["scene"] = improve_scene(st["scene"], "normal")
        await q.message.edit_text(f"üß†‚ú® –£–ª—É—á—à–µ–Ω–æ –ø–æ–º–æ—â–Ω–∏–∫–æ–º:\n\n{st['scene']}", reply_markup=kb_variants()); return

    if data == "mode_nkudo":
        st.update({"mode": "nkudo", "scene": None, "style": None, "replica": None})
        await q.message.edit_text("üîÆ –†–µ–∂–∏–º ¬´–ö–∞–∫ —É NEUROKUDO¬ª –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!")
        explanation = ("üß™ –†–µ–∂–∏–º –¥–ª—è —Å–º–µ–ª—ã—Ö —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–æ–≤: —Å–æ–±–∏—Ä–∞–µ–º —Å—Ü–µ–Ω—ã –∏ —Ä–µ–ø–æ—Ä—Ç–∞–∂–∏ –≤ —Å—Ç–∏–ª–µ –≤–∏—Ä—É—Å–Ω—ã—Ö –≤–∏–¥–µ–æ –ê–Ω—Ç–æ–Ω–∞ –ö—É–¥–æ Neurokudo!\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Å—é–∂–µ—Ç–∞: —É–º–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –ø—Ä–µ–¥–ª–æ–∂–∏—Ç –≥–æ—Ç–æ–≤—ã–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏ –∏ —Ñ—Ä–∞–∑—ã ‚ú®")
        await q.message.reply_text(explanation, reply_markup=kb_nkudo_menu()); return
    if data == "back_modes":
        log.info(f"User {q.from_user.id} pressed back_modes, current mode: {st.get('mode')}")
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ –∫ —Ä–µ–∂–∏–º–∞–º
        st.update({"mode": None, "scene": None, "style": None, "replica": None, "awaiting_scene": False})
        await q.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏:", reply_markup=kb_modes()); return
    if data == "nkudo_menu_back":
        # –ï—Å–ª–∏ –µ—Å—Ç—å —Ä–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è —Å—Ü–µ–Ω—ã, –æ—Ç–∫–∞—Ç—ã–≤–∞–µ–º –∫ –Ω–µ–π
        if st.get("scene_backup"):
            st["scene"] = st["scene_backup"]
            st["scene_backup"] = None  # –û—á–∏—â–∞–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é
            txt = "‚Ü©Ô∏è –û—Ç–∫–∞—Ç –∫ –ø—Ä–µ–¥—ã–¥—É—â–µ–π –≤–µ—Ä—Å–∏–∏\n\nüé¨ –°—Ü–µ–Ω–∞ (8 —Å–µ–∫):\n" + st["scene"] + "\n\n–ß—Ç–æ –¥–µ–ª–∞–µ–º –¥–∞–ª—å—à–µ?"
            await q.message.edit_text(txt, reply_markup=kb_nkudo_single())
            return
        else:
            await q.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Å—é–∂–µ—Ç–∞:", reply_markup=kb_nkudo_menu())
            return

    # NEUROKUDO ‚Äî –æ–¥–∏–Ω–æ—á–Ω–∞—è
    if data == "nkudo_single":
        await q.message.edit_text("‚è≥ –ì–µ–Ω–µ—Ä–∏—Ä—É—é —Å—Ü–µ–Ω—É...")
        st["scene"] = generate_nkudo_single_scene(); st["nkudo_type"] = "single"
        txt = "üîÆ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–∞ —Å—Ü–µ–Ω–∞ –≤ —Å—Ç–∏–ª–µ NEUROKUDO\n\nüé¨ –°—Ü–µ–Ω–∞ (8 —Å–µ–∫):\n" + st["scene"] + "\n\n–ß—Ç–æ –¥–µ–ª–∞–µ–º –¥–∞–ª—å—à–µ?"
        await q.message.edit_text(txt, reply_markup=kb_nkudo_single()); return
    if data == "nkudo_regenerate_single":
        await q.message.edit_text("üîÑ –ì–µ–Ω–µ—Ä–∏—Ä—É—é –Ω–æ–≤—É—é —Å—Ü–µ–Ω—É...")
        st["scene"] = generate_nkudo_single_scene()
        txt = "üîÆ –ù–æ–≤–∞—è —Å—Ü–µ–Ω–∞ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–∞\n\nüé¨ –°—Ü–µ–Ω–∞ (8 —Å–µ–∫):\n" + st["scene"] + "\n\n–ß—Ç–æ –¥–µ–ª–∞–µ–º –¥–∞–ª—å—à–µ?"
        await q.message.edit_text(txt, reply_markup=kb_nkudo_single()); return
    if data == "nkudo_improve_single":
        if st.get("scene"):
            st["scene_backup"] = st["scene"]
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–≥—Ä—É–∑–æ—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            await q.message.edit_text("‚è≥ –û–∂–∏–¥–∞–π—Ç–µ, —Å—Ü–µ–Ω–∞ —É–ª—É—á—à–∞–µ—Ç—Å—è...")
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—É—é —Ñ—É–Ω–∫—Ü–∏—é, –∫–æ—Ç–æ—Ä–∞—è —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ñ—Ä–∞–∑—ã
            current_phrase = st.get("replica", "")
            st["scene"] = improve_scene_with_phrase(st["scene"], current_phrase, mode="complex")
            txt = "üß†‚ú® –°—Ü–µ–Ω–∞ —É–ª—É—á—à–µ–Ω–∞ –ø–æ–º–æ—â–Ω–∏–∫–æ–º\n\nüé¨ –£–ª—É—á—à–µ–Ω–Ω–∞—è —Å—Ü–µ–Ω–∞:\n" + st["scene"] + "\n\n–û—Å—Ç–∞–≤–∏—Ç—å —É–ª—É—á—à–µ–Ω–Ω—É—é –≤–µ—Ä—Å–∏—é?"
            kb = InlineKeyboardMarkup([
                [InlineKeyboardButton("‚úÖ –û—Å—Ç–∞–≤–∏—Ç—å", callback_data="improve_keep")],
                [InlineKeyboardButton("‚Ü©Ô∏è –û—Ç–º–µ–Ω–∞", callback_data="improve_cancel")],
            ])
            await q.message.edit_text(txt, reply_markup=kb); return
    if data == "improve_keep":
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–µ–∂–∏–º–∞
        if st.get("mode") == "nkudo":
            txt = "‚úÖ –û–∫, –æ—Å—Ç–∞–≤–ª—è–µ–º —É–ª—É—á—à–µ–Ω–Ω—É—é.\n\nüé¨ –°—Ü–µ–Ω–∞ (8 —Å–µ–∫):\n" + st["scene"] + "\n\n–ß—Ç–æ –¥–µ–ª–∞–µ–º –¥–∞–ª—å—à–µ?"
            await q.message.edit_text(txt, reply_markup=kb_nkudo_single())
        elif st.get("mode") == "lego":
            txt = "‚úÖ –û–∫, –æ—Å—Ç–∞–≤–ª—è–µ–º —É–ª—É—á—à–µ–Ω–Ω—É—é.\n\nüé¨ –°—Ü–µ–Ω–∞ (8 —Å–µ–∫):\n" + st["scene"] + "\n\n–ß—Ç–æ –¥–µ–ª–∞–µ–º –¥–∞–ª—å—à–µ?"
            await q.message.edit_text(txt, reply_markup=kb_lego_single())
        else:
            await q.message.edit_text("‚úÖ –û–∫, –æ—Å—Ç–∞–≤–ª—è–µ–º —É–ª—É—á—à–µ–Ω–Ω—É—é.", reply_markup=kb_variants())
        return
    if data == "improve_cancel":
        st["scene"] = st.get("scene_backup", st.get("scene"))
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–µ–∂–∏–º–∞
        if st.get("mode") == "nkudo":
            txt = "‚Ü©Ô∏è –í–µ—Ä–Ω—É–ª –ø—Ä–µ–∂–Ω—é—é.\n\nüé¨ –°—Ü–µ–Ω–∞ (8 —Å–µ–∫):\n" + st["scene"] + "\n\n–ß—Ç–æ –¥–µ–ª–∞–µ–º –¥–∞–ª—å—à–µ?"
            await q.message.edit_text(txt, reply_markup=kb_nkudo_single())
        elif st.get("mode") == "lego":
            txt = "‚Ü©Ô∏è –í–µ—Ä–Ω—É–ª –ø—Ä–µ–∂–Ω—é—é.\n\nüé¨ –°—Ü–µ–Ω–∞ (8 —Å–µ–∫):\n" + st["scene"] + "\n\n–ß—Ç–æ –¥–µ–ª–∞–µ–º –¥–∞–ª—å—à–µ?"
            await q.message.edit_text(txt, reply_markup=kb_lego_single())
        else:
            await q.message.edit_text("‚Ü©Ô∏è –í–µ—Ä–Ω—É–ª –ø—Ä–µ–∂–Ω—é—é.", reply_markup=kb_variants())
        return

    # NEUROKUDO ‚Äî –≤—Å—Ç—Ä–∞–∏–≤–∞–Ω–∏–µ —Ñ—Ä–∞–∑–∏ –≤ —Å—Ü–µ–Ω—É
    if data == "nkudo_embed_replica":
        if st.get("scene"):
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è
            await q.message.edit_text("‚è≥ –û–∂–∏–¥–∞–π—Ç–µ, —Ñ—Ä–∞–∑–∞ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç—Å—è...")
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â—É—é –≤–µ—Ä—Å–∏—é –¥–ª—è –æ—Ç–∫–∞—Ç–∞
            st["scene_backup"] = st["scene"]
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ñ—Ä–∞–∑—É –≤ —Å—Ç–∏–ª–µ NEUROKUDO
            base_scene = st.get("scene", "")
            prompt = (
                f"Create a grandmother's dialogue in NEUROKUDO style for this scene.\n\n"
                f"Scene: {base_scene}\n\n"
                f"NEUROKUDO DIALOGUE STYLE:\n"
                f"- Grandmother (75-85 years old) speaks calmly as if incredible things are normal\n"
                f"- Village accent, simple words, sometimes with humor\n"
                f"- Reactions: pride, explanation, calmness before absurdity\n"
                f"EXAMPLES FROM NEUROKUDO (for inspiration, create NEW variations):\n"
                f"- '–í–∑—è–ª–∞ –≤–æ—Ç –Ω–∞ –ø–µ—Ä–µ–¥–µ—Ä–∂–∫—É –º–∞–ª–µ–Ω—å–∫–∏—Ö, —Å–∫–æ—Ä–æ –≤—ã–ø—É—Å—Ç—è—Ç –∏—Ö, –ø—É—Å—Ç—å —Å–∏–ª –Ω–∞–±–∏—Ä–∞—é—Ç—Å—è'\n"
                f"- '–î–∞ —Å–æ—Å–µ–¥–∫–∞ –±–µ–≥–µ–º–æ—Ç–æ–≤ –∑–∞–≤–µ–ª–∞, —è —Ä–µ—à–∏–ª–∞ —á–µ–º –º—ã —Ö—É–∂–µ, –∑–∞–∫–∞–∑–∞–ª–∏ –≤–æ—Ç –º–∞–ª—ã—à–µ–π –∏–∑ –ù–∞–º–∏–±–∏–∏'\n"
                f"- '–ê–∫–∫—É—Ä–∞—Ç–Ω–µ–µ, –ª–ê—Ä–æ—á–∫–∞, —á–µ–≥–æ —Ç—ã –Ω–µ—Ä–≤–Ω–∏—á–∞–µ—à—å. –°–µ–π—á–∞—Å –æ–Ω–∏ —É–π–¥—É—Ç'\n"
                f"- '–ù–µ –±–æ–π—Ç–µ—Å—å –µ—ë. –≠—Ç–æ –õ–∞—Ä–∏—Å–∫–∞. –í –ø–æ–≥—Ä–µ–±–µ –Ω–∞—à–ª–∞, –º–µ–∂–¥—É –±–∞–Ω–æ–∫ —Å–∏–¥–µ–ª–∞'\n"
                f"- '–í–æ—Ç, –º–æ–∏ –Ω–µ—Å—É—à–∫–∏, –∫–æ—Ä–º–∏–ª–∏—Ü—ã –º–æ–∏, –∫–∞–∂–¥–æ–µ —É—Ç—Ä–æ —Å–≤–µ–∂–∏–µ —è–∏—á–∫–∏'\n\n"
                f"TASK: Create NEW dialogue inspired by these examples, not copy them.\n"
                f"Use similar tone and style but with different words and situations.\n"
                f"Write in RUSSIAN. Format: ONE complete sentence, maximum 20 words.\n"
                f"STRICT RULE: NO DASHES, HYPHENS, OR EM DASHES (‚Äî, -, ‚Äì) in the dialogue!\n"
                f"LENGTH RULE: Maximum 20 words total. Make it complete and conversational!"
            )
            
            try:
                if not gpt:

                    replica = "–î–∞ —Å–∞–º–∞ –¥–æ–≤–µ–∑—É –±–µ–∑ –ø—Ä–∏–Ω—Ü–µ–≤ –æ–±–æ–π–¥—É—Å—å!"

                else:

                    resp = gpt.chat.completions.create(
                    model=OPENAI_MODEL,
                    messages=[{"role": "user", "content": prompt}],
                    max_tokens=35,
                    temperature=0.8,
                )
                replica = resp.choices[0].message.content.strip() if resp else "–î–∞ —Å–∞–º–∞ –¥–æ–≤–µ–∑—É –±–µ–∑ –ø—Ä–∏–Ω—Ü–µ–≤ –æ–±–æ–π–¥—É—Å—å!"
            except Exception as e:
                replica = f"(‚ö†Ô∏è –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {e})"
            
            # –û—á–∏—â–∞–µ–º —Ñ—Ä–∞–∑—É –æ—Ç —Ç–∏—Ä–µ
            replica = _clean_replica(replica)
            
            # –¢–µ–ø–µ—Ä—å –≤—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Ñ—Ä–∞–∑—É –≤ —Å—Ü–µ–Ω—É —á–µ—Ä–µ–∑ GPT
            embed_prompt = (
                f"–í—Å—Ç—Ä–æ–π —Ñ—Ä–∞–∑—É –±–∞–±—É—à–∫–∏ –≤ –æ–ø–∏—Å–∞–Ω–∏–µ —Å—Ü–µ–Ω—ã.\n\n"
                f"–ò—Å—Ö–æ–¥–Ω–∞—è —Å—Ü–µ–Ω–∞: {base_scene}\n"
                f"–§—Ä–∞–∑–∞ –±–∞–±—É—à–∫–∏: {replica}\n\n"
                f"–¢–†–ï–ë–û–í–ê–ù–ò–Ø:\n"
                f"- –í—Å—Ç—Ä–æ–π —Ñ—Ä–∞–∑—É –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ –≤ –ø–æ–¥—Ö–æ–¥—è—â–µ–µ –º–µ—Å—Ç–æ —Å—Ü–µ–Ω—ã\n"
                f"- –ï—Å–ª–∏ –≤ —Å—Ü–µ–Ω–µ —É–∂–µ –µ—Å—Ç—å —Ñ—Ä–∞–∑–∞, –∑–∞–º–µ–Ω–∏ –µ—ë –Ω–∞ –Ω–æ–≤—É—é\n"
                f"- –ï—Å–ª–∏ —Ñ—Ä–∞–∑–∏ –Ω–µ—Ç, –¥–æ–±–∞–≤—å –µ—ë –≤ –ª–æ–≥–∏—á–Ω–æ–µ –º–µ—Å—Ç–æ\n"
                f"- –°–æ—Ö—Ä–∞–Ω–∏ —Å—Ç–∏–ª—å –∏ —Ç–æ–Ω –æ–ø–∏—Å–∞–Ω–∏—è\n"
                f"- –§—Ä–∞–∑–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤ –∫–∞–≤—ã—á–∫–∞—Ö\n"
                f"- –°—Ü–µ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –æ—Å—Ç–∞—Ç—å—Å—è —Ü–µ–ª–æ—Å—Ç–Ω–æ–π –∏ –ª–æ–≥–∏—á–Ω–æ–π\n\n"
                f"–í–µ—Ä–Ω–∏ —Ç–æ–ª—å–∫–æ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Å—Ü–µ–Ω—ã –±–µ–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤."
            )
            
            try:
                if not gpt:

                    replica = "–î–∞ —Å–∞–º–∞ –¥–æ–≤–µ–∑—É –±–µ–∑ –ø—Ä–∏–Ω—Ü–µ–≤ –æ–±–æ–π–¥—É—Å—å!"

                else:

                    resp = gpt.chat.completions.create(
                    model=OPENAI_MODEL,
                    messages=[{"role": "user", "content": embed_prompt}],
                    max_tokens=200,
                    temperature=0.7,
                )
                updated_scene = resp.choices[0].message.content.strip() if resp else base_scene
                st["scene"] = updated_scene
                st["replica"] = replica  # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ—Ä–∞–∑—É –æ—Ç–¥–µ–ª—å–Ω–æ
            except Exception as e:
                updated_scene = f"{base_scene}\n\n–ë–∞–±—É—à–∫–∞ –≥–æ–≤–æ—Ä–∏—Ç: {replica}"
                st["scene"] = updated_scene
                st["replica"] = replica
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é —Å—Ü–µ–Ω—É
            txt = f"üí¨ –§—Ä–∞–∑–∞ –≤—Å—Ç—Ä–æ–µ–Ω–∞ –≤ —Å—Ü–µ–Ω—É\n\nüé¨ –û–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è —Å—Ü–µ–Ω–∞:\n{st['scene']}\n\n–ß—Ç–æ –¥–µ–ª–∞–µ–º –¥–∞–ª—å—à–µ?"
            await q.message.edit_text(txt, reply_markup=kb_nkudo_single())
            return

    # NEUROKUDO ‚Äî —Ä–µ–ø–æ—Ä—Ç–∞–∂ (2 —Å—Ü–µ–Ω—ã)
    if data == "nkudo_reportage":
        await q.message.edit_text("‚è≥ –ì–µ–Ω–µ—Ä–∏—Ä—É—é —Ä–µ–ø–æ—Ä—Ç–∞–∂ –∏–∑ –¥–µ—Ä–µ–≤–Ω–∏...")
        s1 = generate_nkudo_reportage_scene1()
        s2, rep = generate_nkudo_reportage_scene2(s1)
        st["nkudo_scene1"] = s1; st["nkudo_scene2"] = s2; st["replica"] = rep
        st["scene"] = f"{s1}\n\n{s2}"; st["nkudo_type"] = "reportage"
        txt = ("üîÆ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω —Ä–µ–ø–æ—Ä—Ç–∞–∂\n\n"
               f"üì∫ –°—Ü–µ–Ω–∞ 1: {s1}\n\n"
               f"üé§ –°—Ü–µ–Ω–∞ 2: {s2}\n\n"
               f"üí¨ –§—Ä–∞–∑–∞: {rep}\n\n"
               "–û–±—â–∞—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å ~16 —Å–µ–∫")
        await q.message.edit_text(txt, reply_markup=kb_nkudo_reportage_edit()); return

    if data == "nkudo_reroll_scene1":
        st["nkudo_scene1"] = generate_nkudo_reportage_scene1()
        await q.message.edit_text(f"üîÑ –ù–æ–≤–∞—è —Å—Ü–µ–Ω–∞ 1:\n\n{st['nkudo_scene1']}", reply_markup=kb_nkudo_reportage_edit()); return
    if data == "nkudo_reroll_scene2":
        s2, rep = generate_nkudo_reportage_scene2(st.get("nkudo_scene1",""))
        st["nkudo_scene2"] = s2; st["replica"] = rep
        await q.message.edit_text(f"üîÑ –ù–æ–≤–∞—è —Å—Ü–µ–Ω–∞ 2:\n\n{st['nkudo_scene2']}\n\nüí¨ –§—Ä–∞–∑–∞: {rep}",
                                  reply_markup=kb_nkudo_reportage_edit()); return

    if data == "nkudo_edit_scene1":
        st["editing_scene"] = 1; st["awaiting_scene_edit"] = True
        await q.message.edit_text(f"‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ü–µ–Ω—ã 1:\n\n{st.get('nkudo_scene1','')}\n\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç:",
                                   reply_markup=kb_scene_edit()); return
    if data == "nkudo_edit_scene2":
        st["editing_scene"] = 2; st["awaiting_scene_edit"] = True
        await q.message.edit_text(f"‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ü–µ–Ω—ã 2:\n\n{st.get('nkudo_scene2','')}\n\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç:",
                                   reply_markup=kb_scene_edit()); return
    if data == "scene_save":
        st["awaiting_scene_edit"] = False
        await q.message.edit_text("‚úÖ –ò–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!")
        txt = ("üìÆ –¢–µ–∫—É—â–∏–π —Ä–µ–ø–æ—Ä—Ç–∞–∂:\n\n"
               f"üì∫ –°—Ü–µ–Ω–∞ 1: {st.get('nkudo_scene1','')}\n\n"
               f"üé§ –°—Ü–µ–Ω–∞ 2: {st.get('nkudo_scene2','')}\n\n"
               f"üí¨ –§—Ä–∞–∑–∞: {st.get('replica','')}")
        await q.message.edit_text(txt, reply_markup=kb_nkudo_reportage_edit()); return
    if data == "scene_cancel":
        st["awaiting_scene_edit"] = False
        await q.message.edit_text("‚ùå –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ")
        txt = ("üìÆ –¢–µ–∫—É—â–∏–π —Ä–µ–ø–æ—Ä—Ç–∞–∂:\n\n"
               f"üì∫ –°—Ü–µ–Ω–∞ 1: {st.get('nkudo_scene1','')}\n\n"
               f"üé§ –°—Ü–µ–Ω–∞ 2: {st.get('nkudo_scene2','')}\n\n"
               f"üí¨ –§—Ä–∞–∑–∞: {st.get('replica','')}")
        await q.message.edit_text(txt, reply_markup=kb_nkudo_reportage_edit()); return


    if data == "nkudo_regenerate_report":
        await q.message.edit_text("üîÑ –ì–µ–Ω–µ—Ä–∏—Ä—É—é –Ω–æ–≤—ã–π —Ä–µ–ø–æ—Ä—Ç–∞–∂...")
        s1 = generate_nkudo_reportage_scene1()
        s2, rep = generate_nkudo_reportage_scene2(s1)
        st["nkudo_scene1"] = s1; st["nkudo_scene2"] = s2; st["replica"] = rep
        st["scene"] = f"{s1}\n\n{s2}"
        txt = f"üîÆ –ù–æ–≤—ã–π —Ä–µ–ø–æ—Ä—Ç–∞–∂\n\nüì∫ –°—Ü–µ–Ω–∞ 1: {s1}\n\nüé§ –°—Ü–µ–Ω–∞ 2: {s2}\n\nüí¨ –§—Ä–∞–∑–∞: {rep}"
        await q.message.edit_text(txt, reply_markup=kb_nkudo_reportage_edit()); return

    if data == "nkudo_improve_report":
        if st.get("nkudo_scene1") and st.get("nkudo_scene2"):
            st["scene1_backup"] = st["nkudo_scene1"]; st["scene2_backup"] = st["nkudo_scene2"]
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–≥—Ä—É–∑–æ—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            await q.message.edit_text("‚è≥ –û–∂–∏–¥–∞–π—Ç–µ, —Å—Ü–µ–Ω–∞ —É–ª—É—á—à–∞–µ—Ç—Å—è...")
            st["nkudo_scene1"] = improve_scene(st["nkudo_scene1"], "complex")
            st["nkudo_scene2"] = improve_scene(st["nkudo_scene2"], "normal")
            st["scene"] = f"{st['nkudo_scene1']}\n\n{st['nkudo_scene2']}"
            kb = InlineKeyboardMarkup([
                [InlineKeyboardButton("‚úÖ –û—Å—Ç–∞–≤–∏—Ç—å —É–ª—É—á—à–µ–Ω–Ω–æ–µ", callback_data="report_improve_keep")],
                [InlineKeyboardButton("‚Ü©Ô∏è –û—Ç–º–µ–Ω–∞ (–≤–µ—Ä–Ω—É—Ç—å –ø—Ä–µ–∂–Ω–µ–µ)", callback_data="report_improve_cancel")],
            ])
            txt = ("üß†‚ú® –°—Ü–µ–Ω—ã —É–ª—É—á—à–µ–Ω—ã.\n\n"
                   f"üì∫ –°—Ü–µ–Ω–∞ 1: {st['nkudo_scene1']}\n\n"
                   f"üé§ –°—Ü–µ–Ω–∞ 2: {st['nkudo_scene2']}\n\n"
                   f"üí¨ –§—Ä–∞–∑–∞: {st.get('replica','')}")
            await q.message.edit_text(txt, reply_markup=kb); return
    if data == "report_improve_keep":
        st["scene1_backup"] = None; st["scene2_backup"] = None
        await q.message.edit_text("‚úÖ –£–ª—É—á—à–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!")
        txt = ("üìÆ –¢–µ–∫—É—â–∏–π —Ä–µ–ø–æ—Ä—Ç–∞–∂:\n\n"
               f"üì∫ –°—Ü–µ–Ω–∞ 1: {st.get('nkudo_scene1','')}\n\n"
               f"üé§ –°—Ü–µ–Ω–∞ 2: {st.get('nkudo_scene2','')}\n\n"
               f"üí¨ –§—Ä–∞–∑–∞: {st.get('replica','')}")
        await q.message.edit_text(txt, reply_markup=kb_nkudo_reportage_edit()); return
    if data == "report_improve_cancel":
        if st.get("scene1_backup") and st.get("scene2_backup"):
            st["nkudo_scene1"] = st["scene1_backup"]; st["nkudo_scene2"] = st["scene2_backup"]
            st["scene"] = f"{st['nkudo_scene1']}\n\n{st['nkudo_scene2']}"
            st["scene1_backup"] = None; st["scene2_backup"] = None
            await q.message.edit_text("‚Ü©Ô∏è –í–æ–∑–≤—Ä–∞—â–µ–Ω–∞ –ø—Ä–µ–∂–Ω—è—è –≤–µ—Ä—Å–∏—è!")
            txt = ("üìÆ –¢–µ–∫—É—â–∏–π —Ä–µ–ø–æ—Ä—Ç–∞–∂:\n\n"
                   f"üì∫ –°—Ü–µ–Ω–∞ 1: {st.get('nkudo_scene1','')}\n\n"
                   f"üé§ –°—Ü–µ–Ω–∞ 2: {st.get('nkudo_scene2','')}\n\n"
                   f"üí¨ –§—Ä–∞–∑–∞: {st.get('replica','')}")
            await q.message.edit_text(txt, reply_markup=kb_nkudo_reportage_edit()); return

    if data == "nkudo_approve":
        if st.get("nkudo_type") == "reportage":
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–±–æ—Ä —Å—Ç–∏–ª–µ–π –¥–ª—è —Ä–µ–ø–æ—Ä—Ç–∞–∂–∞
            await q.message.edit_text("–í—ã–±–µ—Ä–∏ —Å—Ç–∏–ª—å –¥–ª—è —Ä–µ–ø–æ—Ä—Ç–∞–∂–∞:", reply_markup=kb_styles())
            return

    # LEGO ‚Äî –æ–¥–∏–Ω–æ—á–Ω–∞—è —Å—Ü–µ–Ω–∞
    if data == "lego_single":
        await q.message.edit_text("‚è≥ –ì–µ–Ω–µ—Ä–∏—Ä—É—é LEGO —Å—Ü–µ–Ω—É...")
        st["scene"] = generate_lego_single_scene(); st["lego_type"] = "single"
        txt = "üß± –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–∞ LEGO —Å—Ü–µ–Ω–∞\n\nüé¨ –°—Ü–µ–Ω–∞ (8 —Å–µ–∫):\n" + st["scene"] + "\n\n–ß—Ç–æ –¥–µ–ª–∞–µ–º –¥–∞–ª—å—à–µ?"
        await q.message.edit_text(txt, reply_markup=kb_lego_single()); return

    if data == "lego_regenerate_single":
        await q.message.edit_text("‚è≥ –ì–µ–Ω–µ—Ä–∏—Ä—É—é –Ω–æ–≤—É—é LEGO —Å—Ü–µ–Ω—É...")
        st["scene"] = generate_lego_single_scene()
        txt = "üß± –ù–æ–≤–∞—è LEGO —Å—Ü–µ–Ω–∞\n\nüé¨ –°—Ü–µ–Ω–∞ (8 —Å–µ–∫):\n" + st["scene"] + "\n\n–ß—Ç–æ –¥–µ–ª–∞–µ–º –¥–∞–ª—å—à–µ?"
        await q.message.edit_text(txt, reply_markup=kb_lego_single()); return

    if data == "lego_improve_single":
        if st.get("scene"):
            st["scene_backup"] = st["scene"]
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–≥—Ä—É–∑–æ—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            await q.message.edit_text("‚è≥ –û–∂–∏–¥–∞–π—Ç–µ, —Å—Ü–µ–Ω–∞ —É–ª—É—á—à–∞–µ—Ç—Å—è...")
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—É—é —Ñ—É–Ω–∫—Ü–∏—é, –∫–æ—Ç–æ—Ä–∞—è —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ñ—Ä–∞–∑—ã
            current_phrase = st.get("replica", "")
            st["scene"] = improve_scene_with_phrase(st["scene"], current_phrase, mode="complex")
            txt = "üß†‚ú® LEGO —Å—Ü–µ–Ω–∞ —É–ª—É—á—à–µ–Ω–∞ –ø–æ–º–æ—â–Ω–∏–∫–æ–º\n\nüé¨ –£–ª—É—á—à–µ–Ω–Ω–∞—è —Å—Ü–µ–Ω–∞:\n" + st["scene"] + "\n\n–û—Å—Ç–∞–≤–∏—Ç—å —É–ª—É—á—à–µ–Ω–Ω—É—é –≤–µ—Ä—Å–∏—é?"
            kb = InlineKeyboardMarkup([
                [InlineKeyboardButton("‚úÖ –û—Å—Ç–∞–≤–∏—Ç—å", callback_data="lego_improve_keep")],
                [InlineKeyboardButton("‚Ü©Ô∏è –û—Ç–º–µ–Ω–∞", callback_data="lego_improve_cancel")],
                [InlineKeyboardButton("üîÑ –ï—â—ë —Ä–∞–∑", callback_data="lego_improve_again")],
            ])
            await q.message.edit_text(txt, reply_markup=kb); return

    if data == "lego_improve_keep":
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–µ–∂–∏–º–∞
        if st.get("mode") == "lego":
            txt = "‚úÖ –û–∫, –æ—Å—Ç–∞–≤–ª—è–µ–º —É–ª—É—á—à–µ–Ω–Ω—É—é.\n\nüé¨ –°—Ü–µ–Ω–∞ (8 —Å–µ–∫):\n" + st["scene"] + "\n\n–ß—Ç–æ –¥–µ–ª–∞–µ–º –¥–∞–ª—å—à–µ?"
            await q.message.edit_text(txt, reply_markup=kb_lego_single())
        else:
            await q.message.edit_text("‚úÖ –û–∫, –æ—Å—Ç–∞–≤–ª—è–µ–º —É–ª—É—á—à–µ–Ω–Ω—É—é.", reply_markup=kb_variants())
        return

    if data == "lego_improve_cancel":
        st["scene"] = st.get("scene_backup", st.get("scene"))
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–µ–∂–∏–º–∞
        if st.get("mode") == "lego":
            txt = "‚Ü©Ô∏è –í–µ—Ä–Ω—É–ª –ø—Ä–µ–∂–Ω—é—é.\n\nüé¨ –°—Ü–µ–Ω–∞ (8 —Å–µ–∫):\n" + st["scene"] + "\n\n–ß—Ç–æ –¥–µ–ª–∞–µ–º –¥–∞–ª—å—à–µ?"
            await q.message.edit_text(txt, reply_markup=kb_lego_single())
        else:
            await q.message.edit_text("‚Ü©Ô∏è –í–µ—Ä–Ω—É–ª –ø—Ä–µ–∂–Ω—é—é.", reply_markup=kb_variants())
        return

    if data == "lego_improve_again":
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—É—é —Ñ—É–Ω–∫—Ü–∏—é, –∫–æ—Ç–æ—Ä–∞—è —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ñ—Ä–∞–∑—ã
        current_phrase = st.get("replica", "")
        st["scene"] = improve_scene_with_phrase(st.get("scene_backup", st.get("scene", "")), current_phrase, mode="complex")
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–µ–∂–∏–º–∞
        if st.get("mode") == "lego":
            txt = "üîÑ –û–±–Ω–æ–≤–∏–ª —É–ª—É—á—à–µ–Ω–Ω—É—é –≤–µ—Ä—Å–∏—é.\n\nüé¨ –°—Ü–µ–Ω–∞ (8 —Å–µ–∫):\n" + st["scene"] + "\n\n–ß—Ç–æ –¥–µ–ª–∞–µ–º –¥–∞–ª—å—à–µ?"
            await q.message.edit_text(txt, reply_markup=kb_lego_single())
        else:
            await q.message.edit_text("üîÑ –û–±–Ω–æ–≤–∏–ª —É–ª—É—á—à–µ–Ω–Ω—É—é –≤–µ—Ä—Å–∏—é.", reply_markup=kb_variants())
        return

    # LEGO ‚Äî –≤—Å—Ç—Ä–∞–∏–≤–∞–Ω–∏–µ —Ñ—Ä–∞–∑–∏ –≤ —Å—Ü–µ–Ω—É
    if data == "lego_embed_replica":
        if st.get("scene"):
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è
            await q.message.edit_text("‚è≥ –û–∂–∏–¥–∞–π—Ç–µ, —Ñ—Ä–∞–∑–∞ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç—Å—è...")
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â—É—é –≤–µ—Ä—Å–∏—é –¥–ª—è –æ—Ç–∫–∞—Ç–∞
            st["scene_backup"] = st["scene"]
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ñ—Ä–∞–∑—É –≤ —Å—Ç–∏–ª–µ LEGO
            base_scene = st.get("scene", "")
            prompt = (
                f"Create a grandmother's dialogue in LEGO style for this scene.\n\n"
                f"Scene: {base_scene}\n\n"
                f"LEGO DIALOGUE STYLE:\n"
                f"- LEGO grandmother (75-85 years old) speaks in simple, playful way\n"
                f"- Child-like wonder, bright and cheerful tone\n"
                f"- Reactions: excitement, pride, simple explanations\n"
                f"EXAMPLES FROM LEGO STYLE (for inspiration, create NEW variations):\n"
                f"- '–í–æ—Ç –º–æ–∏ LEGO –ø–∏—Ç–æ–º—Ü—ã, –æ–Ω–∏ —Å–∞–º—ã–µ –ª—É—á—à–∏–µ –≤ –º–∏—Ä–µ!'\n"
                f"- '–°–º–æ—Ç—Ä–∏, –∫–∞–∫ –∫—Ä–∞—Å–∏–≤–æ –ø–æ–ª—É—á–∏–ª–æ—Å—å –∏–∑ LEGO –∫–∏—Ä–ø–∏—á–∏–∫–æ–≤!'\n"
                f"- '–≠—Ç–æ –º–æ–π LEGO —Å–∞–¥, –∑–¥–µ—Å—å —Ä–∞—Å—Ç—É—Ç LEGO —Ü–≤–µ—Ç–æ—á–∫–∏!'\n"
                f"- 'LEGO –∫–æ—Ç–∏–∫ –æ—á–µ–Ω—å —É–º–Ω—ã–π, –æ–Ω –∑–Ω–∞–µ—Ç –≤—Å–µ —Å–µ–∫—Ä–µ—Ç—ã!'\n"
                f"- '–í–æ—Ç —Ç–∞–∫ —Å—Ç—Ä–æ–∏–º –∏–∑ LEGO, –ø–æ –∫–∏—Ä–ø–∏—á–∏–∫—É –∑–∞ —Ä–∞–∑!'\n\n"
                f"TASK: Create NEW dialogue inspired by these examples, not copy them.\n"
                f"Use similar tone and style but with different words and situations.\n"
                f"Write in RUSSIAN. Format: ONE complete sentence, maximum 20 words.\n"
                f"STRICT RULE: NO DASHES, HYPHENS, OR EM DASHES (‚Äî, -, ‚Äì) in the dialogue!\n"
                f"LENGTH RULE: Maximum 20 words total. Make it complete and conversational!"
            )
            
            try:
                if not gpt:

                    replica = "–î–∞ —Å–∞–º–∞ –¥–æ–≤–µ–∑—É –±–µ–∑ –ø—Ä–∏–Ω—Ü–µ–≤ –æ–±–æ–π–¥—É—Å—å!"

                else:

                    resp = gpt.chat.completions.create(
                    model=OPENAI_MODEL,
                    messages=[{"role": "user", "content": prompt}],
                    max_tokens=35,
                    temperature=0.8,
                )
                replica = resp.choices[0].message.content.strip() if resp else "–î–∞ —Å–∞–º–∞ –¥–æ–≤–µ–∑—É –±–µ–∑ –ø—Ä–∏–Ω—Ü–µ–≤ –æ–±–æ–π–¥—É—Å—å!"
            except Exception as e:
                replica = f"(‚ö†Ô∏è –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {e})"
            
            # –û—á–∏—â–∞–µ–º —Ñ—Ä–∞–∑—É –æ—Ç —Ç–∏—Ä–µ
            replica = _clean_replica(replica)
            
            # –¢–µ–ø–µ—Ä—å –≤—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Ñ—Ä–∞–∑—É –≤ —Å—Ü–µ–Ω—É —á–µ—Ä–µ–∑ GPT
            embed_prompt = (
                f"–í—Å—Ç—Ä–æ–π —Ñ—Ä–∞–∑—É LEGO –±–∞–±—É—à–∫–∏ –≤ –æ–ø–∏—Å–∞–Ω–∏–µ LEGO —Å—Ü–µ–Ω—ã.\n\n"
                f"–ò—Å—Ö–æ–¥–Ω–∞—è —Å—Ü–µ–Ω–∞: {base_scene}\n"
                f"–§—Ä–∞–∑–∞ LEGO –±–∞–±—É—à–∫–∏: {replica}\n\n"
                f"–¢–†–ï–ë–û–í–ê–ù–ò–Ø:\n"
                f"- –í—Å—Ç—Ä–æ–π —Ñ—Ä–∞–∑—É –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ –≤ –ø–æ–¥—Ö–æ–¥—è—â–µ–µ –º–µ—Å—Ç–æ LEGO —Å—Ü–µ–Ω—ã\n"
                f"- –ï—Å–ª–∏ –≤ —Å—Ü–µ–Ω–µ —É–∂–µ –µ—Å—Ç—å —Ñ—Ä–∞–∑–∞, –∑–∞–º–µ–Ω–∏ –µ—ë –Ω–∞ –Ω–æ–≤—É—é\n"
                f"- –ï—Å–ª–∏ —Ñ—Ä–∞–∑–∏ –Ω–µ—Ç, –¥–æ–±–∞–≤—å –µ—ë –≤ –ª–æ–≥–∏—á–Ω–æ–µ –º–µ—Å—Ç–æ\n"
                f"- –°–æ—Ö—Ä–∞–Ω–∏ LEGO —Å—Ç–∏–ª—å –∏ —Ç–æ–Ω –æ–ø–∏—Å–∞–Ω–∏—è\n"
                f"- –§—Ä–∞–∑–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤ –∫–∞–≤—ã—á–∫–∞—Ö\n"
                f"- –°—Ü–µ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –æ—Å—Ç–∞—Ç—å—Å—è —Ü–µ–ª–æ—Å—Ç–Ω–æ–π –∏ –ª–æ–≥–∏—á–Ω–æ–π\n\n"
                f"–í–µ—Ä–Ω–∏ —Ç–æ–ª—å–∫–æ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ LEGO —Å—Ü–µ–Ω—ã –±–µ–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤."
            )
            
            try:
                if not gpt:

                    replica = "–î–∞ —Å–∞–º–∞ –¥–æ–≤–µ–∑—É –±–µ–∑ –ø—Ä–∏–Ω—Ü–µ–≤ –æ–±–æ–π–¥—É—Å—å!"

                else:

                    resp = gpt.chat.completions.create(
                    model=OPENAI_MODEL,
                    messages=[{"role": "user", "content": embed_prompt}],
                    max_tokens=200,
                    temperature=0.7,
                )
                updated_scene = resp.choices[0].message.content.strip() if resp else base_scene
                st["scene"] = updated_scene
                st["replica"] = replica  # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ—Ä–∞–∑—É –æ—Ç–¥–µ–ª—å–Ω–æ
            except Exception as e:
                updated_scene = f"{base_scene}\n\nLEGO –±–∞–±—É—à–∫–∞ –≥–æ–≤–æ—Ä–∏—Ç: {replica}"
                st["scene"] = updated_scene
                st["replica"] = replica
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é —Å—Ü–µ–Ω—É
            txt = f"üí¨ –§—Ä–∞–∑–∞ –≤—Å—Ç—Ä–æ–µ–Ω–∞ –≤ LEGO —Å—Ü–µ–Ω—É\n\nüé¨ –û–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è —Å—Ü–µ–Ω–∞:\n{st['scene']}\n\n–ß—Ç–æ –¥–µ–ª–∞–µ–º –¥–∞–ª—å—à–µ?"
            await q.message.edit_text(txt, reply_markup=kb_lego_single())
            return

    # LEGO ‚Äî —Ä–µ–ø–æ—Ä—Ç–∞–∂
    if data == "lego_reportage":
        await q.message.edit_text("‚è≥ –ì–µ–Ω–µ—Ä–∏—Ä—É—é LEGO —Ä–µ–ø–æ—Ä—Ç–∞–∂...")
        s1 = generate_lego_reportage_scene1()
        s2, rep = generate_lego_reportage_scene2(s1)
        st["lego_scene1"] = s1; st["lego_scene2"] = s2; st["replica"] = rep
        st["scene"] = f"{s1}\n\n{s2}"; st["lego_type"] = "reportage"
        txt = f"üß± LEGO —Ä–µ–ø–æ—Ä—Ç–∞–∂ –≥–æ—Ç–æ–≤\n\nüì∫ –°—Ü–µ–Ω–∞ 1: {s1}\n\nüé§ –°—Ü–µ–Ω–∞ 2: {s2}\n\nüí¨ –§—Ä–∞–∑–∞: {rep}"
        await q.message.edit_text(txt, reply_markup=kb_lego_single()); return

    if data == "lego_menu_back":
        # –ï—Å–ª–∏ –µ—Å—Ç—å —Ä–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è —Å—Ü–µ–Ω—ã, –æ—Ç–∫–∞—Ç—ã–≤–∞–µ–º –∫ –Ω–µ–π
        if st.get("scene_backup"):
            st["scene"] = st["scene_backup"]
            st["scene_backup"] = None  # –û—á–∏—â–∞–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é
            txt = "‚Ü©Ô∏è –û—Ç–∫–∞—Ç –∫ –ø—Ä–µ–¥—ã–¥—É—â–µ–π –≤–µ—Ä—Å–∏–∏\n\nüé¨ –°—Ü–µ–Ω–∞ (8 —Å–µ–∫):\n" + st["scene"] + "\n\n–ß—Ç–æ –¥–µ–ª–∞–µ–º –¥–∞–ª—å—à–µ?"
            await q.message.edit_text(txt, reply_markup=kb_lego_single())
            return
        else:
            await q.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Å—é–∂–µ—Ç–∞:", reply_markup=kb_lego_menu())
            return

    # --- –ü—Ä–∏–º–µ—Ä–æ—á–Ω–∞—è: –∫–Ω–æ–ø–∫–∏ —Ñ–ª–æ—É ---

    if data == "tryon_swap":
        stt = st["tryon"]
        stt["person"], stt["garment"] = stt.get("garment"), stt.get("person")
        if not stt.get("person") or not stt.get("garment"):
            await q.message.edit_text("–ù—É–∂–Ω–æ –¥–≤–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: —á–µ–ª–æ–≤–µ–∫ –∏ –æ–¥–µ–∂–¥–∞. –ü—Ä–∏—à–ª–∏—Ç–µ –Ω–µ–¥–æ—Å—Ç–∞—é—â–µ–µ.",
                                      reply_markup=kb_tryon_need_garment())
            return
        await q.message.edit_text("–†–æ–ª–∏ –ø–æ–º–µ–Ω—è–ª–∏ –º–µ—Å—Ç–∞–º–∏.\n\n–§–æ—Ç–æ –ø–æ–ª—É—á–µ–Ω—ã. –ì–æ—Ç–æ–≤—ã –ø—Ä–∏–º–µ—Ä—è—Ç—å?",
                                  reply_markup=kb_tryon_confirm("‚ë° ‚Üí ‚ë†", st.get("tryon_bonus", 0)))
        stt["stage"] = "confirm"
        return

    if data == "tryon_reset":
        st["tryon"] = {"stage": "await_person", "person": None, "garment": None, "dressed": None, "await_bg": False, "await_prompt": False}
        await q.message.edit_text("–°–±—Ä–æ—Å–∏–ª. –ü—Ä–∏—à–ª–∏—Ç–µ —Ñ–æ—Ç–æ —á–µ–ª–æ–≤–µ–∫–∞.", reply_markup=kb_tryon_start())
        return

    if data == "tryon_confirm":
        stt = st["tryon"]
        if not stt.get("person") or not stt.get("garment"):
            await q.message.reply_text("–ù—É–∂–Ω–æ –¥–≤–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: —á–µ–ª–æ–≤–µ–∫ –∏ –æ–¥–µ–∂–¥–∞. –ü—Ä–∏—à–ª–∏—Ç–µ –Ω–µ–¥–æ—Å—Ç–∞—é—â–µ–µ.",
                                       reply_markup=kb_tryon_need_garment())
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ—Å—É—Ä—Å—ã (–±–æ–Ω—É—Å—ã –∏–ª–∏ –º–æ–Ω–µ—Ç—ã)
        tryon_bonus = st.get("tryon_bonus", 0)
        coins = st.get("coins", 0)
        
        if tryon_bonus == 0 and coins < COST_TRYON:
            await q.message.reply_text(
                f"‚ùå –ù–µ —Ö–≤–∞—Ç–∞–µ—Ç —Ä–µ—Å—É—Ä—Å–æ–≤ –¥–ª—è –ø—Ä–∏–º–µ—Ä–æ—á–Ω–æ–π.\n\n"
                f"üéÅ –ë–æ–Ω—É—Å–Ω—ã—Ö –ø—Ä–∏–º–µ—Ä–æ–∫: {tryon_bonus}\n"
                f"üí∞ –ú–æ–Ω–µ—Ç–æ–∫: {coins} (–Ω—É–∂–Ω–æ: {COST_TRYON})\n\n"
                f"üí≥ –î–æ–∫—É–ø–∏—Ç—å –º–æ–Ω–µ—Ç—ã?",
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton("‚ö° –ë—ã—Å—Ç—Ä—ã–µ –¥–æ–∫—É–ø–∫–∏", callback_data="show_addons")],
                    [InlineKeyboardButton("üìö –¢–∞—Ä–∏—Ñ—ã", callback_data="open:pricing")],
                    [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_home")],
                ])
            )
            return
        
        # –°–ø–∏—Å—ã–≤–∞–µ–º —Ä–µ—Å—É—Ä—Å—ã (–±–æ–Ω—É—Å—ã –∏–ª–∏ –º–æ–Ω–µ—Ç—ã)
        if tryon_bonus > 0:
            st["tryon_bonus"] -= 1
            cost_text = "0 –º–æ–Ω–µ—Ç–æ–∫ (–±–æ–Ω—É—Å)"
        else:
            st["coins"] -= COST_TRYON
            cost_text = f"{COST_TRYON} –º–æ–Ω–µ—Ç–æ–∫"
        
        await q.message.edit_text("‚è≥ –î–µ–ª–∞—é –ø—Ä–∏–º–µ—Ä–∫—É‚Ä¶")
        try:
            result_bytes = await asyncio.to_thread(virtual_tryon, stt["person"], stt["garment"], 1)
            stt["dressed"] = result_bytes
            await q.message.edit_media(media=InputMediaPhoto(media=result_bytes, caption=f"‚úÖ –ì–æ—Ç–æ–≤–æ! –û–¥–µ–∂–¥–∞ –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω–∞ –Ω–∞ —á–µ–ª–æ–≤–µ–∫–∞.\nüí∞ –°–ø–∏—Å–∞–Ω–æ: {cost_text}"), reply_markup=kb_tryon_after())
            stt["stage"] = "after"
        except Exception as e:
            log.exception("VTO failed")
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ä–µ—Å—É—Ä—Å—ã –ø—Ä–∏ –æ—à–∏–±–∫–µ
            if tryon_bonus > 0:
                st["tryon_bonus"] += 1
            else:
                st["coins"] += COST_TRYON
            await q.message.reply_text(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏–º–µ—Ä–æ—á–Ω–æ–π: {e}")
            await q.message.reply_text("–í–æ–∑–≤—Ä–∞—Ç –≤ –º–µ–Ω—é:", reply_markup=kb_home_inline())
        return

    # --- AFTER RESULT ACTIONS ---
    if data == "tryon_new_pose":
        stt = st["tryon"]
        stt["stage"] = "await_person"
        await q.message.edit_text(
            "üîÑ –î—Ä—É–≥–∞—è –ø–æ–∑–∞.\n–ü—Ä–∏—à–ª–∏—Ç–µ –Ω–æ–≤–æ–µ —Ñ–æ—Ç–æ —á–µ–ª–æ–≤–µ–∫–∞ –≤ –∂–µ–ª–∞–µ–º–æ–π –ø–æ–∑–µ/—Ä–∞–∫—É—Ä—Å–µ.",
            reply_markup=kb_tryon_need_garment()
        )
        return

    if data == "tryon_new_garment":
        stt = st["tryon"]
        stt["stage"] = "await_garment"
        await q.message.edit_text(
            "üëó –î—Ä—É–≥–∞—è –æ–¥–µ–∂–¥–∞.\n–ü—Ä–∏—à–ª–∏—Ç–µ —Ñ–æ—Ç–æ –Ω–æ–≤–æ–π –æ–¥–µ–∂–¥—ã –Ω–∞ –Ω–µ–π—Ç—Ä–∞–ª—å–Ω–æ–º —Ñ–æ–Ω–µ.",
            reply_markup=kb_tryon_need_garment()
        )
        return

    if data == "tryon_new_bg":
        stt = st["tryon"]
        stt["await_bg"] = True
        await q.message.edit_text(
            "üèû –ù–æ–≤–∞—è –ª–æ–∫–∞—Ü–∏—è.\n–ü—Ä–∏—à–ª–∏—Ç–µ —Ñ–æ–Ω-–∫–∞—Ä—Ç–∏–Ω–∫—É (—Ñ–æ—Ç–æ –º–µ—Å—Ç–∞), –∫—É–¥–∞ –ø–æ–º–µ—Å—Ç–∏—Ç—å –æ–¥–µ—Ç—É—é –º–æ–¥–µ–ª—å.",
            reply_markup=kb_tryon_after()
        )
        return

    if data == "tryon_prompt":
        stt = st["tryon"]
        stt["await_prompt"] = True
        await q.message.edit_text(
            "‚úçÔ∏è –û–ø–∏—à–∏—Ç–µ –∫—Ä–∞—Ç–∫–æ –ø–æ–∑—É/–ª–æ–∫–∞—Ü–∏—é (–Ω–∞–ø—Ä–∏–º–µ—Ä: ¬´—Å–∏–¥–∏—Ç –Ω–∞ –ª–∞–≤–æ—á–∫–µ, –¥–≤–æ—Ä –≤ –¥–µ—Ä–µ–≤–Ω–µ, –∑–∞–∫–∞—Ç¬ª).\n"
            "–≠—Ç–æ —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è ‚Äî –≤–æ–∑–º–æ–∂–Ω—ã –ª—ë–≥–∫–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –ª–∏—Ü–∞.",
            reply_markup=kb_tryon_after()
        )
        return

    # –í–∞—Ä–∏–∞–Ω—Ç—ã —É–ª—É—á—à–µ–Ω–∏—è
    if data == "var_complex" and st.get("source_text") and gpt:
        st["scene"] = improve_scene(st["source_text"], "complex")
        await q.message.edit_text(f"üîç –£—Å–ª–æ–∂–Ω–µ–Ω–æ:\n\n{st['scene']}", reply_markup=kb_variants()); return
    if data == "var_simple" and st.get("source_text") and gpt:
        st["scene"] = improve_scene(st["source_text"], "simple")
        await q.message.edit_text(f"‚úÇÔ∏è –£–ø—Ä–æ—â–µ–Ω–æ:\n\n{st['scene']}", reply_markup=kb_variants()); return
    if data == "var_again" and st.get("source_text") and gpt:
        st["scene"] = improve_scene(st["source_text"], "normal")
        await q.message.edit_text(f"üîÑ –ü–µ—Ä–µ–¥–µ–ª–∞–Ω–æ:\n\n{st['scene']}", reply_markup=kb_variants()); return

    # –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å—Ç–∏–ª—è–º
    if data in ("go_next", "choose_style"):
        log.info(f"User {q.from_user.id} pressed go_next, current mode: {st.get('mode')}, scene: {st.get('scene', 'None')[:50]}...")
        # –î–ª—è –≤—Å–µ—Ö —Ä–µ–∂–∏–º–æ–≤ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–±–æ—Ä —Å—Ç–∏–ª–µ–π
        if st.get("scene"): 
            await q.message.edit_text(f"‚úÖ –°—Ü–µ–Ω–∞ –≥–æ—Ç–æ–≤–∞:\n\n{st['scene']}\n\n–í—ã–±–µ—Ä–∏ —Å—Ç–∏–ª—å:", reply_markup=kb_styles())
        else:
            log.warning(f"User {q.from_user.id} pressed go_next but no scene found")
            await q.message.edit_text("–í—ã–±–µ—Ä–∏ —Å—Ç–∏–ª—å:", reply_markup=kb_styles())
        return

    # --- –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ç–∏–ª–µ–π ---
    if data.startswith("style_") or data == "style_None":
        if data != "style_None":
            st["style"] = data.replace("style_", "").replace("_", " ")
        
        # –£–±–∏—Ä–∞–µ–º –º–µ–Ω—é —Å—Ç–∏–ª–µ–π –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ª–µ–¥—É—é—â–µ–µ –º–µ–Ω—é
        # –î–ª—è –≤—Å–µ—Ö —Ä–µ–∂–∏–º–æ–≤ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤—ã–±–æ—Ä—É –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏–∏
        await q.message.edit_text("–í—ã–±–µ—Ä–∏ –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏—é:", reply_markup=kb_orientation())
        return

    # --- –†—É—á–Ω–æ–π –≤–≤–æ–¥ —Ñ—Ä–∞–∑–∏ ---
    if data == "manual_replica":
        st["awaiting_manual_replica"] = True
        await q.message.edit_text(
            "–í–≤–µ–¥–∏ —Ç–µ–∫—Å—Ç —Ñ—Ä–∞–∑–∏ –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º:",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("‚¨ÖÔ∏è –û—Ç–º–µ–Ω–∞", callback_data="cancel_manual_replica")]
            ])
        )
        return

    # --- –û—Ç–º–µ–Ω–∞ —Ä—É—á–Ω–æ–≥–æ –≤–≤–æ–¥–∞ —Ñ—Ä–∞–∑–∏ ---
    if data == "cancel_manual_replica":
        st["awaiting_manual_replica"] = False
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –ø—Ä–µ–¥—ã–¥—É—â–µ–º—É –º–µ–Ω—é
        if st.get("mode") == "nkudo":
            # –î–ª—è —Ä–µ–∂–∏–º–∞ NEUROKUDO - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ–º—Ç –≤ –ø–æ–≤–µ—Å—Ç–≤–æ–≤–∞—Ç–µ–ª—å–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
            scene_text = st.get('scene','')
            txt = f"‚úÖ –°—Ç–∏–ª—å –≤—ã–±—Ä–∞–Ω: {st.get('style', '–±–µ–∑ —Å—Ç–∏–ª—è')}\n\nüé¨ –°—Ü–µ–Ω–∞:\n{scene_text}\n\n–ß—Ç–æ –¥–µ–ª–∞–µ–º –¥–∞–ª—å—à–µ?"
            await q.message.edit_text(txt, reply_markup=kb_after_style())
        else:
            # –î–ª—è –æ–±—ã—á–Ω—ã—Ö —Ä–µ–∂–∏–º–æ–≤
            await q.message.edit_text("–ß—Ç–æ –¥–µ–ª–∞–µ–º –¥–∞–ª—å—à–µ?", reply_markup=kb_after_style())
        return

    # --- –î–æ–ø–æ–ª–Ω–∏—Ç—å –∏—Ç–æ–≥–æ–≤—ã–π –ø—Ä–æ–º—Ç ---
    if data == "prompt_add":
        st["awaiting_prompt_add"] = True
        await q.message.reply_text("–ß—Ç–æ –¥–æ–±–∞–≤–∏—Ç—å –∫ —Å—Ü–µ–Ω–µ? –ù–∞–ø–∏—à–∏ 1‚Äì2 –∫–æ—Ä–æ—Ç–∫–∏–µ —Ñ—Ä–∞–∑—ã:")
        return

    # --- –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ—Ä–∞–∑–∏ –≤ —Ñ–∏–Ω–∞–ª—å–Ω–æ–º —á–µ–∫–µ ---
    if data == "edit_replica_final":
        st["awaiting_manual_replica"] = True
        st["from_final_check"] = True  # –§–ª–∞–≥ —á—Ç–æ –ø—Ä–∏—à–ª–∏ –∏–∑ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ —á–µ–∫–∞
        current_replica = st.get("replica", "")
        await q.message.reply_text(
            f"‚úçÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ—Ä–∞–∑–∏\n\n"
            f"–¢–µ–∫—É—â–∞—è —Ñ—Ä–∞–∑–∞: {current_replica}\n\n"
            f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Ñ—Ä–∞–∑—É:",
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚¨ÖÔ∏è –û—Ç–º–µ–Ω–∞", callback_data="back_to_final")]])
        )
        return

    # --- –í–æ–∑–≤—Ä–∞—Ç –∫ —Ñ–∏–Ω–∞–ª—å–Ω–æ–º—É —á–µ–∫—É ---
    if data == "back_to_final":
        st["from_final_check"] = False
        # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —á–µ–∫
        parts = [f"‚úÖ –°—Ü–µ–Ω–∞: {st.get('scene','')}"]
        # –î–ª—è LEGO —Ä–µ–∂–∏–º–∞ –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∏–ª—å, —Ç–∞–∫ –∫–∞–∫ –æ–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π
        if st.get("style") and st.get("mode") != "lego": parts.append(f"‚úÖ –°—Ç–∏–ª—å: {st['style']}")
        if st.get("replica"): parts.append(f"‚úÖ –§—Ä–∞–∑–∞: {st['replica']}")
        if st.get("orientation"): parts.append(f"‚úÖ –û—Ä–∏–µ–Ω—Ç–∞—Ü–∏—è: {st['orientation']}")

        preview = "üìù –ò—Ç–æ–≥–æ–≤—ã–π –ø—Ä–æ–º—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏:\n\n" + "\n\n".join(parts)

        kb_preview = InlineKeyboardMarkup([
            [InlineKeyboardButton("‚úçÔ∏è –î–æ–ø–æ–ª–Ω–∏—Ç—å", callback_data="prompt_add")],
            [InlineKeyboardButton("üí¨ –ò–∑–º–µ–Ω–∏—Ç—å —Ñ—Ä–∞–∑—É", callback_data="edit_replica_final")],
            [InlineKeyboardButton("üé≤ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Ñ—Ä–∞–∑—É", callback_data="generate_replica_final")],
            [InlineKeyboardButton("üöÄ –°–æ–∑–¥–∞—Ç—å –≤–∏–¥–µ–æ", callback_data="generate_now")]
        ])

        await q.message.edit_text(preview, reply_markup=kb_preview)
        return

    # --- –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ñ—Ä–∞–∑–∏ –≤ —Ñ–∏–Ω–∞–ª—å–Ω–æ–º —á–µ–∫–µ ---
    if data == "generate_replica_final":
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è
        await q.message.edit_text("‚è≥ –û–∂–∏–¥–∞–π—Ç–µ, —Ñ—Ä–∞–∑–∞ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç—Å—è...")
        
        base_scene = st.get("scene", "")
        style_note = st.get("style") or "–±–µ–∑ —Å—Ç–∏–ª—è"

        if st.get("mode") == "nkudo":
            # –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è NEUROKUDO
                prompt = (
                f"Write grandmother's dialogue in NEUROKUDO style for this scene.\n\n"
                f"Scene: {base_scene}\n"
                f"Style: {style_note}\n\n"
                f"NEUROKUDO DIALOGUE STYLE:\n"
                f"- Grandmother (75-85 years old) speaks calmly as if incredible things are normal\n"
                f"- Village accent, simple words, sometimes with humor\n"
                f"- Reactions: pride, explanation, calmness before absurdity\n"
                f"EXAMPLES FROM NEUROKUDO (for inspiration, create NEW variations):\n"
                f"- '–í–∑—è–ª–∞ –≤–æ—Ç –Ω–∞ –ø–µ—Ä–µ–¥–µ—Ä–∂–∫—É –º–∞–ª–µ–Ω—å–∫–∏—Ö, —Å–∫–æ—Ä–æ –≤—ã–ø—É—Å—Ç—è—Ç –∏—Ö, –ø—É—Å—Ç—å —Å–∏–ª –Ω–∞–±–∏—Ä–∞—é—Ç—Å—è'\n"
                f"- '–î–∞ —Å–æ—Å–µ–¥–∫–∞ –±–µ–≥–µ–º–æ—Ç–æ–≤ –∑–∞–≤–µ–ª–∞, —è —Ä–µ—à–∏–ª–∞ —á–µ–º –º—ã —Ö—É–∂–µ, –∑–∞–∫–∞–∑–∞–ª–∏ –≤–æ—Ç –º–∞–ª—ã—à–µ–π –∏–∑ –ù–∞–º–∏–±–∏–∏'\n"
                f"- '–ê–∫–∫—É—Ä–∞—Ç–Ω–µ–µ, –ª–ê—Ä–æ—á–∫–∞, —á–µ–≥–æ —Ç—ã –Ω–µ—Ä–≤–Ω–∏—á–∞–µ—à—å. –°–µ–π—á–∞—Å –æ–Ω–∏ —É–π–¥—É—Ç'\n"
                f"- '–ù–µ –±–æ–π—Ç–µ—Å—å –µ—ë. –≠—Ç–æ –õ–∞—Ä–∏—Å–∫–∞. –í –ø–æ–≥—Ä–µ–±–µ –Ω–∞—à–ª–∞, –º–µ–∂–¥—É –±–∞–Ω–æ–∫ —Å–∏–¥–µ–ª–∞'\n"
                f"- '–í–æ—Ç, –º–æ–∏ –Ω–µ—Å—É—à–∫–∏, –∫–æ—Ä–º–∏–ª–∏—Ü—ã –º–æ–∏, –∫–∞–∂–¥–æ–µ —É—Ç—Ä–æ —Å–≤–µ–∂–∏–µ —è–∏—á–∫–∏'\n\n"
                f"TASK: Create NEW dialogue inspired by these examples, not copy them.\n"
                f"Use similar tone and style but with different words and situations.\n"
                f"Write in RUSSIAN. Format: ONE complete sentence, maximum 20 words.\n"
                f"STRICT RULE: NO DASHES, HYPHENS, OR EM DASHES (‚Äî, -, ‚Äì) in the dialogue!\n"
                f"LENGTH RULE: Maximum 20 words total. Make it complete and conversational!"
            )
        else:
            # –û–±—ã—á–Ω—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è –¥—Ä—É–≥–∏—Ö —Ä–µ–∂–∏–º–æ–≤
                prompt = (
                f"–ù–∞–ø–∏—à–∏ –∫–æ—Ä–æ—Ç–∫—É—é –∏ –≤—ã—Ä–∞–∑–∏—Ç–µ–ª—å–Ω—É—é —Ñ—Ä–∞–∑—É –¥–ª—è —Å—Ü–µ–Ω—ã.\n\n"
                f"–°—Ü–µ–Ω–∞: {base_scene}\n"
                f"–°—Ç–∏–ª—å: {style_note}\n\n"
                f"–§–æ—Ä–º–∞—Ç: –û–î–ù–û –ø–æ–ª–Ω–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ, –º–∞–∫—Å–∏–º—É–º 20 —Å–ª–æ–≤.\n"
                f"–°–¢–†–û–ì–û –ó–ê–ü–†–ï–©–ï–ù–û: –Ω–∏–∫–∞–∫–∏—Ö —Ç–∏—Ä–µ, –¥–µ—Ñ–∏—Å–æ–≤ –∏–ª–∏ –¥–ª–∏–Ω–Ω—ã—Ö —Ç–∏—Ä–µ (‚Äî, -, ‚Äì) –≤ —Ñ—Ä–∞–∑–µ!\n"
                f"–î–õ–ò–ù–ê: –º–∞–∫—Å–∏–º—É–º 20 —Å–ª–æ–≤. –î–µ–ª–∞–π –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–º –∏ —Ä–∞–∑–≥–æ–≤–æ—Ä–Ω–æ!"
            )

        try:
            if not gpt:

                replica = "–î–∞ —Å–∞–º–∞ –¥–æ–≤–µ–∑—É –±–µ–∑ –ø—Ä–∏–Ω—Ü–µ–≤ –æ–±–æ–π–¥—É—Å—å!"

            else:

                resp = gpt.chat.completions.create(
                model=OPENAI_MODEL,
                messages=[{"role": "user", "content": prompt}],
                max_tokens=35,
                temperature=0.8,
            )
            replica = resp.choices[0].message.content.strip() if resp else "–î–∞ —Å–∞–º–∞ –¥–æ–≤–µ–∑—É –±–µ–∑ –ø—Ä–∏–Ω—Ü–µ–≤ –æ–±–æ–π–¥—É—Å—å!"
        except Exception as e:
            replica = f"(‚ö†Ô∏è –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {e})"

        # –û—á–∏—â–∞–µ–º —Ñ—Ä–∞–∑—É –æ—Ç —Ç–∏—Ä–µ
        replica = _clean_replica(replica)
        st["replica"] = replica

        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Ñ–∏–Ω–∞–ª—å–Ω–æ–º—É —á–µ–∫—É
        parts = [f"‚úÖ –°—Ü–µ–Ω–∞: {st.get('scene','')}"]
        # –î–ª—è LEGO —Ä–µ–∂–∏–º–∞ –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∏–ª—å, —Ç–∞–∫ –∫–∞–∫ –æ–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π
        if st.get("style") and st.get("mode") != "lego": parts.append(f"‚úÖ –°—Ç–∏–ª—å: {st['style']}")
        if st.get("replica"): parts.append(f"‚úÖ –§—Ä–∞–∑–∞: {st['replica']}")
        if st.get("orientation"): parts.append(f"‚úÖ –û—Ä–∏–µ–Ω—Ç–∞—Ü–∏—è: {st['orientation']}")

        preview = "üìù –ò—Ç–æ–≥–æ–≤—ã–π –ø—Ä–æ–º—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏:\n\n" + "\n\n".join(parts)

        kb_preview = InlineKeyboardMarkup([
            [InlineKeyboardButton("‚úçÔ∏è –î–æ–ø–æ–ª–Ω–∏—Ç—å", callback_data="prompt_add")],
            [InlineKeyboardButton("üí¨ –ò–∑–º–µ–Ω–∏—Ç—å —Ñ—Ä–∞–∑—É", callback_data="edit_replica_final")],
            [InlineKeyboardButton("üé≤ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Ñ—Ä–∞–∑—É", callback_data="generate_replica_final")],
            [InlineKeyboardButton("üöÄ –°–æ–∑–¥–∞—Ç—å –≤–∏–¥–µ–æ", callback_data="generate_now")]
        ])

        await q.message.edit_text(preview, reply_markup=kb_preview)
        return

    # --- –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ñ—Ä–∞–∑–∏ ---
    if data == "generate_replica":
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è
        await q.message.edit_text("‚è≥ –û–∂–∏–¥–∞–π—Ç–µ, —Ñ—Ä–∞–∑–∞ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç—Å—è...")
        
        base_scene = st.get("scene", "")
        style_note = st.get("style") or "–±–µ–∑ —Å—Ç–∏–ª—è"

        if st.get("mode") == "nkudo":
            # –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è NEUROKUDO
                prompt = (
                f"Write grandmother's dialogue in NEUROKUDO style for this scene.\n\n"
                f"Scene: {base_scene}\n"
                f"Style: {style_note}\n\n"
                f"NEUROKUDO DIALOGUE STYLE:\n"
                f"- Grandmother (75-85 years old) speaks calmly as if incredible things are normal\n"
                f"- Village accent, simple words, sometimes with humor\n"
                f"- Reactions: pride, explanation, calmness before absurdity\n"
                f"EXAMPLES FROM NEUROKUDO (for inspiration, create NEW variations):\n"
                f"- '–í–∑—è–ª–∞ –≤–æ—Ç –Ω–∞ –ø–µ—Ä–µ–¥–µ—Ä–∂–∫—É –º–∞–ª–µ–Ω—å–∫–∏—Ö, —Å–∫–æ—Ä–æ –≤—ã–ø—É—Å—Ç—è—Ç –∏—Ö, –ø—É—Å—Ç—å —Å–∏–ª –Ω–∞–±–∏—Ä–∞—é—Ç—Å—è'\n"
                f"- '–î–∞ —Å–æ—Å–µ–¥–∫–∞ –±–µ–≥–µ–º–æ—Ç–æ–≤ –∑–∞–≤–µ–ª–∞, —è —Ä–µ—à–∏–ª–∞ —á–µ–º –º—ã —Ö—É–∂–µ, –∑–∞–∫–∞–∑–∞–ª–∏ –≤–æ—Ç –º–∞–ª—ã—à–µ–π –∏–∑ –ù–∞–º–∏–±–∏–∏'\n"
                f"- '–ê–∫–∫—É—Ä–∞—Ç–Ω–µ–µ, –ª–ê—Ä–æ—á–∫–∞, —á–µ–≥–æ —Ç—ã –Ω–µ—Ä–≤–Ω–∏—á–∞–µ—à—å. –°–µ–π—á–∞—Å –æ–Ω–∏ —É–π–¥—É—Ç'\n"
                f"- '–ù–µ –±–æ–π—Ç–µ—Å—å –µ—ë. –≠—Ç–æ –õ–∞—Ä–∏—Å–∫–∞. –í –ø–æ–≥—Ä–µ–±–µ –Ω–∞—à–ª–∞, –º–µ–∂–¥—É –±–∞–Ω–æ–∫ —Å–∏–¥–µ–ª–∞'\n"
                f"- '–í–æ—Ç, –º–æ–∏ –Ω–µ—Å—É—à–∫–∏, –∫–æ—Ä–º–∏–ª–∏—Ü—ã –º–æ–∏, –∫–∞–∂–¥–æ–µ —É—Ç—Ä–æ —Å–≤–µ–∂–∏–µ —è–∏—á–∫–∏'\n\n"
                f"TASK: Create NEW dialogue inspired by these examples, not copy them.\n"
                f"Use similar tone and style but with different words and situations.\n"
                f"Write in RUSSIAN. Format: ONE complete sentence, maximum 20 words.\n"
                f"STRICT RULE: NO DASHES, HYPHENS, OR EM DASHES (‚Äî, -, ‚Äì) in the dialogue!\n"
                f"LENGTH RULE: Maximum 20 words total. Make it complete and conversational!"
            )
        else:
            # –û–±—ã—á–Ω—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è –¥—Ä—É–≥–∏—Ö —Ä–µ–∂–∏–º–æ–≤
            prompt = (
            f"–ù–∞–ø–∏—à–∏ –∫–æ—Ä–æ—Ç–∫—É—é –∏ –≤—ã—Ä–∞–∑–∏—Ç–µ–ª—å–Ω—É—é —Ñ—Ä–∞–∑—É –¥–ª—è —Å—Ü–µ–Ω—ã.\n\n"
            f"–°—Ü–µ–Ω–∞: {base_scene}\n"
            f"–°—Ç–∏–ª—å: {style_note}\n\n"
                f"–§–æ—Ä–º–∞—Ç: –û–î–ù–û –ø–æ–ª–Ω–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ, –º–∞–∫—Å–∏–º—É–º 20 —Å–ª–æ–≤.\n"
                f"–°–¢–†–û–ì–û –ó–ê–ü–†–ï–©–ï–ù–û: –Ω–∏–∫–∞–∫–∏—Ö —Ç–∏—Ä–µ, –¥–µ—Ñ–∏—Å–æ–≤ –∏–ª–∏ –¥–ª–∏–Ω–Ω—ã—Ö —Ç–∏—Ä–µ (‚Äî, -, ‚Äì) –≤ —Ñ—Ä–∞–∑–µ!\n"
                f"–î–õ–ò–ù–ê: –º–∞–∫—Å–∏–º—É–º 20 —Å–ª–æ–≤. –î–µ–ª–∞–π –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–º –∏ —Ä–∞–∑–≥–æ–≤–æ—Ä–Ω–æ!"
        )

        try:
            if not gpt:

                replica = "–î–∞ —Å–∞–º–∞ –¥–æ–≤–µ–∑—É –±–µ–∑ –ø—Ä–∏–Ω—Ü–µ–≤ –æ–±–æ–π–¥—É—Å—å!"

            else:

                resp = gpt.chat.completions.create(
                model=OPENAI_MODEL,
                messages=[{"role": "user", "content": prompt}],
                max_tokens=35,
                temperature=0.8,
            )
            replica = resp.choices[0].message.content.strip() if resp else "–î–∞ —Å–∞–º–∞ –¥–æ–≤–µ–∑—É –±–µ–∑ –ø—Ä–∏–Ω—Ü–µ–≤ –æ–±–æ–π–¥—É—Å—å!"
        except Exception as e:
            replica = f"(‚ö†Ô∏è –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {e})"

        # –û—á–∏—â–∞–µ–º —Ñ—Ä–∞–∑—É –æ—Ç —Ç–∏—Ä–µ
        replica = _clean_replica(replica)
        st["replica"] = replica
        
        # –£–±–∏—Ä–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ –º–µ–Ω—é –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–æ–≤–æ–µ
        if st.get("mode") == "nkudo":
            # –î–ª—è —Ä–µ–∂–∏–º–∞ NEUROKUDO –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ–º—Ç –≤ –ø–æ–≤–µ—Å—Ç–≤–æ–≤–∞—Ç–µ–ª—å–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
            scene_text = st.get('scene','')
            txt = f"‚úÖ –°–æ–∑–¥–∞–Ω–∞ —Ñ—Ä–∞–∑–∞: {replica}\n\nüé¨ –°—Ü–µ–Ω–∞:\n{scene_text}\n\n–¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å –∏–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å:"
        else:
            # –î–ª—è –æ–±—ã—á–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞ –≤—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Ñ—Ä–∞–∑—É –≤ —Å—Ü–µ–Ω—É
            if st.get("scene"):
                # –í—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Ñ—Ä–∞–∑—É –≤ —Å—Ü–µ–Ω—É —á–µ—Ä–µ–∑ GPT
                embed_prompt = (
                    f"–í—Å—Ç—Ä–æ–π —Ñ—Ä–∞–∑—É –≤ –æ–ø–∏—Å–∞–Ω–∏–µ —Å—Ü–µ–Ω—ã –∫–∞–∫ —Ä–µ—á—å –ø–µ—Ä—Å–æ–Ω–∞–∂–∞.\n\n"
                    f"–ò—Å—Ö–æ–¥–Ω–∞—è —Å—Ü–µ–Ω–∞: {st['scene']}\n"
                    f"–§—Ä–∞–∑–∞: {replica}\n\n"
                    f"–¢–†–ï–ë–û–í–ê–ù–ò–Ø:\n"
                    f"- –í—Å—Ç—Ä–æ–π —Ñ—Ä–∞–∑—É –∫–∞–∫ –ø—Ä—è–º—É—é —Ä–µ—á—å –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –≤ –∫–∞–≤—ã—á–∫–∞—Ö\n"
                    f"- –î–æ–±–∞–≤—å —Å–ª–æ–≤–∞ –∞–≤—Ç–æ—Ä–∞ —Ç–∏–ø–∞ '–≥–æ–≤–æ—Ä–∏—Ç', '–≤–æ—Å–∫–ª–∏—Ü–∞–µ—Ç', '—à–µ–ø—á–µ—Ç' –∏ —Ç.–¥.\n"
                    f"- –§—Ä–∞–∑–∞ –¥–æ–ª–∂–Ω–∞ –∑–≤—É—á–∞—Ç—å –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ —Å—Ü–µ–Ω—ã\n"
                    f"- –°—Ü–µ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –æ—Å—Ç–∞—Ç—å—Å—è —Ü–µ–ª–æ—Å—Ç–Ω–æ–π –∏ –ª–æ–≥–∏—á–Ω–æ–π\n\n"
                    f"–í–µ—Ä–Ω–∏ —Ç–æ–ª—å–∫–æ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Å—Ü–µ–Ω—ã –±–µ–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤."
                )
                
                try:
                    if not gpt:

                        replica = "–î–∞ —Å–∞–º–∞ –¥–æ–≤–µ–∑—É –±–µ–∑ –ø—Ä–∏–Ω—Ü–µ–≤ –æ–±–æ–π–¥—É—Å—å!"

                    else:

                        resp = gpt.chat.completions.create(
                        model=OPENAI_MODEL,
                        messages=[{"role": "user", "content": embed_prompt}],
                        max_tokens=200,
                        temperature=0.7,
                    )
                    updated_scene = resp.choices[0].message.content.strip() if resp else base_scene
                    st["scene"] = updated_scene
                except Exception as e:
                    updated_scene = f"{st['scene']}\n\n–ë–∞–±—É—à–∫–∞ –≥–æ–≤–æ—Ä–∏—Ç: {replica}"
                    st["scene"] = updated_scene
                
                txt = f"üí¨ –§—Ä–∞–∑–∞ –≤—Å—Ç—Ä–æ–µ–Ω–∞ –≤ —Å—Ü–µ–Ω—É\n\nüé¨ –û–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è —Å—Ü–µ–Ω–∞:\n{st['scene']}\n\n–ß—Ç–æ –¥–µ–ª–∞–µ–º –¥–∞–ª—å—à–µ?"
            else:
                txt = f"‚úÖ –°–æ–∑–¥–∞–Ω–∞ —Ñ—Ä–∞–∑–∞: {replica}\n\n–¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å –∏–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å:"
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        if st.get("mode") == "nkudo":
            await q.message.edit_text(
                txt,
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton("‚úçÔ∏è –í–≤–µ—Å—Ç–∏ —Ñ—Ä–∞–∑—É –≤—Ä—É—á–Ω—É—é", callback_data="manual_replica")],
                    [InlineKeyboardButton("‚û°Ô∏è –î–∞–ª–µ–µ", callback_data="go_orientation")]
                ])
            )
        else:
            # –î–ª—è –æ–±—ã—á–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å —Ñ—Ä–∞–∑–æ–π
            if st.get("scene"):
                await q.message.edit_text(txt, reply_markup=kb_variants_with_phrase())
            else:
                await q.message.edit_text(
                    txt,
                    reply_markup=InlineKeyboardMarkup([
                        [InlineKeyboardButton("‚úçÔ∏è –í–≤–µ—Å—Ç–∏ —Ñ—Ä–∞–∑—É –≤—Ä—É—á–Ω—É—é", callback_data="manual_replica")],
                        [InlineKeyboardButton("‚û°Ô∏è –î–∞–ª–µ–µ", callback_data="go_orientation")]
                    ])
                )
        return


    # --- –ü–µ—Ä–µ—Ö–æ–¥ –∫ –≤—ã–±–æ—Ä—É –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏–∏ ---
    if data == "go_orientation":
        await q.message.edit_text("–í—ã–±–µ—Ä–∏ –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏—é:", reply_markup=kb_orientation())
        return

    # --- –í—ã–±–æ—Ä –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏–∏ ---
    if data in ("ori_916", "ori_169"):
        st["orientation"] = "9:16" if data == "ori_916" else "16:9"
        await q.message.edit_text("–í—ã–±–µ—Ä–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∞—É–¥–∏–æ:", reply_markup=kb_audio_choice())
        return
    
    # --- –í—ã–±–æ—Ä –∞—É–¥–∏–æ ---
    if data in ("audio_on", "audio_off"):
        st["with_audio"] = data == "audio_on"
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ –º–µ–Ω—é —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
        audio_status = "üîä –° –∞—É–¥–∏–æ" if st["with_audio"] else "üîá –ë–µ–∑ –∞—É–¥–∏–æ"
        orientation_status = "üì± –í–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–æ–µ (9:16)" if st["orientation"] == "9:16" else "üñ• –ì–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–æ–µ (16:9)"
        
        preview_text = (
            f"üìù –ò—Ç–æ–≥–æ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:\n\n"
            f"‚úÖ –°—Ü–µ–Ω–∞: {st.get('scene', '–ù–µ –∑–∞–¥–∞–Ω–∞')[:100]}...\n"
            f"‚úÖ –û—Ä–∏–µ–Ω—Ç–∞—Ü–∏—è: {orientation_status}\n"
            f"‚úÖ –ê—É–¥–∏–æ: {audio_status}\n"
            f"‚úÖ –°—Ç–∏–ª—å: {st.get('style', DEFAULT_STYLE)}\n\n"
            f"–ì–æ—Ç–æ–≤ –∫ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏!"
        )
        
        await q.message.edit_text(preview_text, reply_markup=InlineKeyboardMarkup([
            [InlineKeyboardButton("üöÄ –°–æ–∑–¥–∞—Ç—å –≤–∏–¥–µ–æ", callback_data="generate_now")],
            [InlineKeyboardButton("‚úçÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å —Å—Ü–µ–Ω—É", callback_data="prompt_add")],
            [InlineKeyboardButton("üîÑ –ü–µ—Ä–µ–¥–µ–ª–∞—Ç—å", callback_data="go_next")],
        ]))
        return

    # --- –û—Ç–º–µ–Ω–∞ –ø—Ä–æ—Ü–µ–¥—É—Ä—ã ---
    if data == "cancel_procedure":
        # –û—á–∏—â–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        st.update({"scene": None, "style": None, "replica": None, "orientation": None, "mode": None, "with_audio": DEFAULT_AUDIO})
        await q.message.edit_text("‚ùå –ü—Ä–æ—Ü–µ–¥—É—Ä–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞. –í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=kb_home_inline())
        return

    # –ì–ï–ù–ï–†–ê–¶–ò–Ø (–æ–±—ã—á–Ω—ã–µ —Ä–µ–∂–∏–º—ã)
    if data == "generate_now":
        if not st.get("scene"): await q.message.reply_text("–°–Ω–∞—á–∞–ª–∞ –æ–ø–∏—à–∏ —Å—Ü–µ–Ω—É."); return
        if st.get("style") is None: st["style"] = DEFAULT_STYLE
        if not st.get("orientation"): st["orientation"] = DEFAULT_ORIENTATION

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ—Å—É—Ä—Å—ã (–±–æ–Ω—É—Å—ã –∏–ª–∏ –º–æ–Ω–µ—Ç—ã)
        if not can_generate_video(st):
            video_bonus = st.get("video_bonus", 0)
            coins = st.get("coins", 0)
            
            if video_bonus == 0 and coins < COST_VIDEO:
                await q.message.reply_text(
                    f"‚ùå –ù–µ —Ö–≤–∞—Ç–∞–µ—Ç —Ä–µ—Å—É—Ä—Å–æ–≤ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–∏–¥–µ–æ.\n\n"
                    f"üéÅ –ë–æ–Ω—É—Å–Ω—ã—Ö –≤–∏–¥–µ–æ: {video_bonus}\n"
                    f"üí∞ –ú–æ–Ω–µ—Ç–æ–∫: {coins} (–Ω—É–∂–Ω–æ: {COST_VIDEO})\n\n"
                    f"üí≥ –î–æ–∫—É–ø–∏—Ç—å –º–æ–Ω–µ—Ç—ã?",
                    reply_markup=InlineKeyboardMarkup([
                        [InlineKeyboardButton("‚ö° –ë—ã—Å—Ç—Ä—ã–µ –¥–æ–∫—É–ø–∫–∏", callback_data="show_addons")],
                        [InlineKeyboardButton("üìö –¢–∞—Ä–∏—Ñ—ã", callback_data="open:pricing")],
                        [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_home")],
                    ])
                )
                return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–Ω–µ–≤–Ω–æ–π –ª–∏–º–∏—Ç
        if not check_daily_cap(st, "video"):
            videos_left = get_daily_videos_left(st)
            plan = st.get("plan", "light")
            plan_name = PLANS[plan]["name"]
            await q.message.reply_text(
                f"‚ùå –î–Ω–µ–≤–Ω–æ–π –ª–∏–º–∏—Ç –≤–∏–¥–µ–æ –∏—Å—á–µ—Ä–ø–∞–Ω.\n"
                f"–ü–ª–∞–Ω {plan_name}: {DAILY_CAP_VIDEOS[plan]} –≤–∏–¥–µ–æ –≤ –¥–µ–Ω—å.\n\n"
                f"–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–≤—Ç—Ä–∞ –∏–ª–∏ —Å–º–µ–Ω–∏—Ç–µ —Ç–∞—Ä–∏—Ñ–Ω—ã–π –ø–ª–∞–Ω.",
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton("üìö –°–º–µ–Ω–∏—Ç—å —Ç–∞—Ä–∏—Ñ", callback_data="open:pricing")],
                    [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_home")],
                ])
            )
            return

        # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á—É
        try:
            job_id = hold_and_start(st, "video")
            st["current_job_id"] = job_id
        except Exception as e:
            await q.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏: {str(e)}")
            return

        msg = await q.message.reply_text(
            f"‚è≥ –ì–µ–Ω–µ—Ä–∏—Ä—É—é –≤–∏–¥–µ–æ‚Ä¶ –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç.\n"
            f"üí∞ –°–ø–∏—Å–∞–Ω–æ: {COST_VIDEO} –º–æ–Ω–µ—Ç–æ–∫"
        )
        try:
            # REPORTAGE ‚Äî –¥–≤–∞ –≤–∏–¥–µ–æ –ø–æ–¥—Ä—è–¥
            if st.get("nkudo_type") == "reportage" or st.get("mode") == "reportage":
                prompt1 = to_json_prompt(
                    st.get("nkudo_scene1",""), st.get("style"), None, "reportage",
                    aspect_ratio=st["orientation"], context=None
                )
                prompt2 = to_json_prompt(
                    st.get("nkudo_scene2",""), st.get("style"), st.get("replica"), "reportage",
                    aspect_ratio=st["orientation"], context=st.get("nkudo_scene1")
                )

                res1 = await asyncio.to_thread(generate_video_sync, prompt1, duration=8, aspect_ratio=st["orientation"], with_audio=st.get("with_audio", True))
                vids1 = (res1 or {}).get("videos", [])
                if vids1 and vids1[0].get("file_path") and os.path.exists(vids1[0]["file_path"]):
                    with open(vids1[0]["file_path"], "rb") as f:
                        await q.message.reply_video(video=f, caption="üì∫ –°—Ü–µ–Ω–∞ 1", supports_streaming=True)
                else:
                    await q.message.reply_text("‚ö†Ô∏è –°—Ü–µ–Ω–∞ 1: –≤–∏–¥–µ–æ –Ω–µ –≤–µ—Ä–Ω—É–ª–æ—Å—å.")

                res2 = await asyncio.to_thread(generate_video_sync, prompt2, duration=8, aspect_ratio=st["orientation"], with_audio=st.get("with_audio", True))
                vids2 = (res2 or {}).get("videos", [])
                cap2 = "üé§ –°—Ü–µ–Ω–∞ 2" + (f"\nüí¨ {st.get('replica')}" if st.get("replica") else "")
                if vids2 and vids2[0].get("file_path") and os.path.exists(vids2[0]["file_path"]):
                    with open(vids2[0]["file_path"], "rb") as f:
                        await q.message.reply_video(video=f, caption=cap2, supports_streaming=True)
                else:
                    await q.message.reply_text("‚ö†Ô∏è –°—Ü–µ–Ω–∞ 2: –≤–∏–¥–µ–æ –Ω–µ –≤–µ—Ä–Ω—É–ª–æ—Å—å.")

                # –û—Ç–º–µ—á–∞–µ–º –∑–∞–¥–∞—á—É –∫–∞–∫ —É—Å–ø–µ—à–Ω—É—é
                if st.get("current_job_id"):
                    on_success(st, st["current_job_id"])
                
                await q.message.reply_text("–ì–æ—Ç–æ–≤–æ! –ß—Ç–æ –¥–∞–ª—å—à–µ?", reply_markup=kb_video_result())
                await q.message.reply_text("–ë—ã—Å—Ç—Ä—ã–µ –∫–Ω–æ–ø–∫–∏ –≤–Ω–∏–∑—É –∞–∫—Ç–∏–≤–Ω—ã.", reply_markup=reply_main_kb())
                return

            # –û–±—ã—á–Ω—ã–µ ‚Äî –æ–¥–Ω–æ –≤–∏–¥–µ–æ
            prompt = to_json_prompt(
                st["scene"], st.get("style"), st.get("replica"), st.get("mode"),
                aspect_ratio=st["orientation"], context=None
            )
            res = await asyncio.to_thread(generate_video_sync, prompt, duration=8, aspect_ratio=st["orientation"], with_audio=st.get("with_audio", True))
            videos = (res or {}).get("videos", [])
            if not videos:
                await q.message.reply_text("‚ö†Ô∏è –í–∏–¥–µ–æ –Ω–µ –≤–µ—Ä–Ω—É–ª–æ—Å—å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.", reply_markup=kb_home_inline())
                return

            v0 = videos[0]; file_path = v0.get("file_path"); uri = v0.get("uri")
            caption = (f"‚úÖ –í–∏–¥–µ–æ –≥–æ—Ç–æ–≤–æ!\n\nüé¨ –°—Ü–µ–Ω–∞: {st['scene']}\nüé® –°—Ç–∏–ª—å: {st['style']}" +
                       (f"\nüí¨ –§—Ä–∞–∑–∞: {st['replica']}" if st.get("replica") else "") +
                       f"\nüìê –û—Ä–∏–µ–Ω—Ç–∞—Ü–∏—è: {st['orientation']}")
            
            # –û—Ç–º–µ—á–∞–µ–º –∑–∞–¥–∞—á—É –∫–∞–∫ —É—Å–ø–µ—à–Ω—É—é
            if st.get("current_job_id"):
                on_success(st, st["current_job_id"])
            
            if file_path and os.path.exists(file_path):
                with open(file_path, "rb") as f:
                    await q.message.reply_video(video=f, caption=caption, supports_streaming=True, reply_markup=kb_video_result())
            elif uri:
                await q.message.reply_text(f"{caption}\n\nüîó GCS: {uri}", reply_markup=kb_video_result())
            else:
                await q.message.reply_text("‚ö†Ô∏è –í–∏–¥–µ–æ –Ω–µ –≤–µ—Ä–Ω—É–ª–æ—Å—å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.", reply_markup=kb_home_inline())

        except Exception as e:
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –º–æ–Ω–µ—Ç—ã –ø—Ä–∏ –æ—à–∏–±–∫–µ
            if st.get("current_job_id"):
                on_error(st, st["current_job_id"])
            log.exception("Generation failed")
            log.exception("Veo generation failed")
            await q.message.reply_text(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {e}\n\n–ú–æ–Ω–µ—Ç–∫–∏ –≤–æ–∑–≤—Ä–∞—â–µ–Ω—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.", reply_markup=kb_home_inline())
        finally:
            try: await msg.delete()
            except: pass
        return

    # --- JSON PRO ---
    if data == "jsonpro_enter":
        st["jsonpro"]["await_text"] = True
        await q.message.edit_text("–í–≤–µ–¥–∏ —Ç–µ–∫—Å—Ç —Å—Ü–µ–Ω—ã. –Ø —Å–æ–±–µ—Ä—É –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω—ã–π JSON –¥–ª—è Veo.",
                                  reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_home")]]))
        return
    if data == "jsonpro_ori_916":
        st["jsonpro"]["orientation"] = "9:16"
        await q.message.edit_text("‚úÖ –û—Ä–∏–µ–Ω—Ç–∞—Ü–∏—è (JSON-—Ä–µ–∂–∏–º): –í–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–æ–µ (9:16)",
                                  reply_markup=kb_jsonpro_after_text())
        return
    if data == "jsonpro_ori_169":
        st["jsonpro"]["orientation"] = "16:9"
        await q.message.edit_text("‚úÖ –û—Ä–∏–µ–Ω—Ç–∞—Ü–∏—è (JSON-—Ä–µ–∂–∏–º): –ì–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–æ–µ (16:9)",
                                  reply_markup=kb_jsonpro_after_text())
        return
    if data == "jsonpro_generate":
        jj = st["jsonpro"].get("last_json")
        if not jj:
            await q.message.edit_text("–°–Ω–∞—á–∞–ª–∞ –≤–≤–µ–¥–∏ —Ç–µ–∫—Å—Ç —Å—Ü–µ–Ω—ã, —á—Ç–æ–±—ã —Å–æ–±—Ä–∞—Ç—å JSON.",
                                      reply_markup=kb_jsonpro_start()); return
        orr = st["jsonpro"].get("orientation", DEFAULT_ORIENTATION)
        msg = await q.message.reply_text("‚è≥ –ì–µ–Ω–µ—Ä–∏—Ä—É—é –≤–∏–¥–µ–æ –ø–æ JSON‚Ä¶")
        try:
            res = await asyncio.to_thread(generate_video_sync, jj, duration=8, aspect_ratio=orr, with_audio=st.get("with_audio", True))
            videos = (res or {}).get("videos", [])
            if not videos:
                await q.message.reply_text("‚ö†Ô∏è –í–∏–¥–µ–æ –Ω–µ –≤–µ—Ä–Ω—É–ª–æ—Å—å. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑.", reply_markup=kb_home_inline())
                return
            v0 = videos[0]; file_path = v0.get("file_path"); uri = v0.get("uri")
            caption = f"‚úÖ –í–∏–¥–µ–æ –ø–æ JSON –≥–æ—Ç–æ–≤–æ!\nüìê –û—Ä–∏–µ–Ω—Ç–∞—Ü–∏—è: {orr}"
            if file_path and os.path.exists(file_path):
                with open(file_path, "rb") as f:
                    await q.message.reply_video(video=f, caption=caption, supports_streaming=True, reply_markup=kb_after_video())
            elif uri:
                await q.message.reply_text(f"{caption}\n\nüîó GCS: {uri}", reply_markup=kb_after_video())
            else:
                await q.message.reply_text("‚ö†Ô∏è –í–∏–¥–µ–æ –Ω–µ –≤–µ—Ä–Ω—É–ª–æ—Å—å. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑.", reply_markup=kb_home_inline())
        except Exception as e:
            await q.message.reply_text(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {e}", reply_markup=kb_home_inline())
        finally:
            try: await msg.delete()
            except: pass
        return

    # –ü–æ—Å—Ç-–∫–Ω–æ–ø–∫–∏ –ø–æ—Å–ª–µ –≤–∏–¥–µ–æ
    if data == "edit_from_last":
        st["awaiting_scene"] = True
        await q.message.edit_text("‚úèÔ∏è –û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç —Å—Ü–µ–Ω—ã. –¢–µ–∫—É—â–∞—è –≤–µ—Ä—Å–∏—è –Ω–∏–∂–µ.")
        await q.message.edit_text(f"–¢–µ–∫—É—â–∞—è —Å—Ü–µ–Ω–∞:\n\n{st.get('scene','')}", reply_markup=kb_back_only())
        return

    if data == "refine_prompt":
        st["awaiting_prompt_refine"] = True
        current_scene = st.get('scene', '')
        current_style = st.get('style', '')
        current_replica = st.get('replica', '')
        
        await q.message.edit_text(
            f"üîß –î–æ—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ–º—Ç–∞\n\n"
            f"–¢–µ–∫—É—â–∏–π –ø—Ä–æ–º—Ç:\n"
            f"üìù –°—Ü–µ–Ω–∞: {current_scene}\n"
            f"üé® –°—Ç–∏–ª—å: {current_style}\n"
            f"üí¨ –§—Ä–∞–∑–∞: {current_replica}\n\n"
            f"–ù–∞–ø–∏—à–∏—Ç–µ —á—Ç–æ –Ω—É–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å –∏–ª–∏ –¥–æ–±–∞–≤–∏—Ç—å:",
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚¨ÖÔ∏è –û—Ç–º–µ–Ω–∞", callback_data="back_home")]])
        )
        return

    # fallback
    await q.message.reply_text("–ö–æ–º–∞–Ω–¥–∞ –ø–æ–∫–∞ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è. –í–æ–∑–≤—Ä–∞—Ç –≤ –º–µ–Ω—é.", reply_markup=kb_home_inline())

# -----------------------------------------------------------------------------
# –°–õ–£–ñ–ï–ë–ù–û–ï: –º–µ–º-—Å—Ü–µ–Ω–∞
# -----------------------------------------------------------------------------
def random_meme_scene() -> str:
    subjects = ["–ë–∞–±–∫–∞", "–î–µ–¥", "–¢—ë—Ç–∫–∞ —Å –∞–≤–æ—Å—å–∫–æ–π", "–î–≤–æ—Ä–Ω–∏–∫", "–ö—É—Ä—å–µ—Ä", "–û—Ñ–∏—Ü–∏–∞–Ω—Ç",
                "–®–∫–æ–ª—å–Ω–∏–∫ —Å —Ä—é–∫–∑–∞–∫–æ–º", "–†–æ–∫–µ—Ä", "–ë–∏–∑–Ω–µ—Å –ª–µ–¥–∏", "–ú—É–∂–∏–∫ –≤ —Ç–µ–ª–æ–≥—Ä–µ–π–∫–µ"]
    locations = ["—É –ø–æ–¥—ä–µ–∑–¥–∞", "–Ω–∞ —Ä—ã–Ω–∫–µ", "–≤ –º–µ—Ç—Ä–æ", "–Ω–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ", "–≤ –ø–∞—Ä–∫–µ",
                 "–≤–æ –¥–≤–æ—Ä–µ –ø–∞–Ω–µ–ª—å–Ω–æ–≥–æ –¥–æ–º–∞", "–Ω–∞ –Ω–∞–±–µ—Ä–µ–∂–Ω–æ–π", "—É –∫–∏–æ—Å–∫–∞ —Å —à–∞—É—Ä–º–æ–π"]
    props = ["–∞—Ä–±—É–∑–æ–º", "—Å–∞–º–æ–≤–∞—Ä–æ–º", "–≥–∏–≥–∞–Ω—Ç—Å–∫–∏–º –ø–∞–∫–µ—Ç–æ–º —á–∏–ø—Å–æ–≤", "–Ω–∞–¥—É–≤–Ω—ã–º –∫—Ä–æ–∫–æ–¥–∏–ª–æ–º",
             "–ø–ª—é—à–µ–≤—ã–º –º–µ–¥–≤–µ–¥–µ–º", "–æ–≥—Ä–æ–º–Ω–æ–π –ª–∞–º–ø–æ–π —Ç–æ—Ä—à–µ—Ä–æ–º", "–ø–æ—Ä—Ç—Ä–µ—Ç–æ–º –∫–æ—Ç–∞", "—Ä–µ–∑–∏–Ω–æ–≤—ã–º —É—Ç—ë–Ω–∫–æ–º"]
    items_plural = ["–∞–ø–µ–ª—å—Å–∏–Ω–∞–º–∏", "–±—É–ª–æ—á–∫–∞–º–∏", "–ø–ª—é—à–µ–≤—ã–º–∏ —É—Ç–∫–∞–º–∏", "—Å–æ—Å–∏—Å–∫–∞–º–∏ –≤ —Ç–µ—Å—Ç–µ",
                    "–ª–∏—Å—Ç–æ–≤–∫–∞–º–∏", "–ª–∞–¥–æ—à–∫–∞–º–∏ –∏–∑ –ø–æ—Ä–æ–ª–æ–Ω–∞", "–º–∞–≥–Ω–∏—Ç–∏–∫–∞–º–∏", "—Å—Ç–µ–∫–ª—è–Ω–Ω—ã–º–∏ –±–∞–Ω–∫–∞–º–∏"]
    npcs = ["–æ—Ö—Ä–∞–Ω–Ω–∏–∫–æ–º", "–ø—Ä–æ–¥–∞–≤—â–∏—Ü–µ–π —Å–µ–º–µ—á–µ–∫", "–∫–æ–Ω—Ç—Ä–æ–ª—ë—Ä–æ–º", "–¥–∏—Å–ø–µ—Ç—á–µ—Ä–æ–º —Ç–∞–∫—Å–∏", "–¥–≤–æ—Ä–æ–≤–æ–π –∫–æ—à–∫–æ–π"]
    vehicles = ["—Å–∫–µ–π—Ç–±–æ—Ä–¥–µ", "—Å–∞–º–æ–∫–∞—Ç–µ", "—Ç–µ–ª–µ–∂–∫–µ –∏–∑ —Å—É–ø–µ—Ä–º–∞—Ä–∫–µ—Ç–∞", "–≤–µ–ª–∏–∫–µ –±–µ–∑ —Å–µ–¥–ª–∞"]
    templates = [
        "{s} –µ–¥–µ—Ç –Ω–∞ {veh} {loc}",
        "{s} —Å–ø–æ—Ä–∏—Ç —Å {npc} {loc}",
        "{s} –∂–æ–Ω–≥–ª–∏—Ä—É–µ—Ç {items} {loc}",
        "{s} —Ç–∞–Ω—Ü—É–µ—Ç —Å {prop} {loc}",
        "{s} —Ä–∞–∑–¥–∞—ë—Ç {items} {loc}",
        "{s} –ø—ã—Ç–∞–µ—Ç—Å—è —É–ø–∞–∫–æ–≤–∞—Ç—å {prop} –≤ –ø–∞–∫–µ—Ç {loc}",
        "{s} —Ç–æ–ª–∫–∞–µ—Ç —Ç–µ–ª–µ–∂–∫—É —Å {prop} {loc}",
        "{s} —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—Ä—É–µ—Ç—Å—è —Å {prop} {loc}",
    ]
    t = random.choice(templates); s = random.choice(subjects); loc = random.choice(locations)
    if "{veh}" in t:  return _sanitize(t.format(s=s, veh=random.choice(vehicles), loc=loc))
    if "{npc}" in t:  return _sanitize(t.format(s=s, npc=random.choice(npcs), loc=loc))
    if "{items}" in t:return _sanitize(t.format(s=s, items=random.choice(items_plural), loc=loc))
    return _sanitize(t.format(s=s, prop=random.choice(props), loc=loc))

# ----------------------------------------------------------------------------- 
# –ó–ê–ü–£–°–ö
# -----------------------------------------------------------------------------
def main():
    if not BOT_TOKEN:
        raise RuntimeError("–ù–µ –Ω–∞–π–¥–µ–Ω TELEGRAM_TOKEN / BOT_TOKEN")
    
    app = Application.builder().token(BOT_TOKEN).build()
    app.add_handler(CommandHandler("start", cmd_start))
    app.add_handler(CommandHandler("whereami", cmd_whereami))  # —É—Ç–∏–ª–∏—Ç–∞
    app.add_handler(CommandHandler("terms", cmd_terms))  # –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ —Å–æ–≥–ª–∞—à–µ–Ω–∏–µ
    app.add_handler(CommandHandler("test_payment", cmd_test_payment))  # —Ç–µ—Å—Ç–æ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞
    app.add_handler(CallbackQueryHandler(on_cb))
    app.add_handler(MessageHandler(filters.PHOTO, on_photo))  # –ø—Ä–∏—ë–º —Ñ–æ—Ç–æ (–ø—Ä–∏–º–µ—Ä–æ—á–Ω–∞—è)
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, on_text))
    
    log.info("Bot is running‚Ä¶")
    # –ó–∞–ø—É—Å–∫–∞–µ–º polling —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º —É–¥–∞–ª–µ–Ω–∏–µ–º webhook
    app.run_polling(drop_pending_updates=True)

if __name__ == "__main__":
    main()

