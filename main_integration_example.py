#!/usr/bin/env python3
# main_integration_example.py
"""–ü—Ä–∏–º–µ—Ä –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –Ω–æ–≤–æ–π UI —Å–∏—Å—Ç–µ–º—ã –≤ main.py"""

# –î–æ–±–∞–≤—å—Ç–µ —ç—Ç–∏ –∏–º–ø–æ—Ä—Ç—ã –≤ –Ω–∞—á–∞–ª–æ main.py
from app.handlers.router import register_router, callback_entry
from app.ui.keyboards import build_keyboard_with_description
from app.ui.texts import t

# –ü—Ä–∏–º–µ—Ä –∑–∞–º–µ–Ω—ã —Ñ—É–Ω–∫—Ü–∏–∏ create_app()
def create_app_with_new_ui():
    """–°–æ–∑–¥–∞–Ω–∏–µ Telegram Application —Å –Ω–æ–≤–æ–π UI —Å–∏—Å—Ç–µ–º–æ–π"""
    if not BOT_TOKEN:
        raise RuntimeError("–ù–µ –Ω–∞–π–¥–µ–Ω TELEGRAM_TOKEN / BOT_TOKEN")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ –ø–æ–¥–ø–∏—Å–∫–∏ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
    check_and_reset_expired_plans()
    
    app = Application.builder().token(BOT_TOKEN).build()
    
    # –ö–æ–º–∞–Ω–¥—ã (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
    app.add_handler(CommandHandler("start", cmd_start))
    app.add_handler(CommandHandler("whereami", cmd_whereami))
    app.add_handler(CommandHandler("terms", cmd_terms))
    app.add_handler(CommandHandler("sync_pricing", lambda u, c: u.message.reply_text(pricing_text(), parse_mode="HTML")))
    app.add_handler(CommandHandler("test_payment", cmd_test_payment))
    app.add_handler(CommandHandler("add_bonus", cmd_add_bonus))
    app.add_handler(CommandHandler("reload_profile", cmd_reload_profile))
    app.add_handler(CommandHandler("reset_my_profile", cmd_reset_my_profile))
    
    # –ó–ê–ú–ï–ù–ê: —Å—Ç–∞—Ä—ã–π CallbackQueryHandler –Ω–∞ –Ω–æ–≤—ã–π —Ä–æ—É—Ç–µ—Ä
    # app.add_handler(CallbackQueryHandler(on_cb))  # –°–¢–ê–†–´–ô
    register_router(app)  # –ù–û–í–´–ô - —ç—Ç–æ –∑–∞–º–µ–Ω–∏—Ç –≤—Å–µ callback –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    
    # –û—Å—Ç–∞–ª—å–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
    app.add_handler(MessageHandler(filters.PHOTO, on_photo))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, on_text))
    
    return app

# –ü—Ä–∏–º–µ—Ä –∑–∞–º–µ–Ω—ã —Ñ—É–Ω–∫—Ü–∏–∏ kb_home_inline()
def kb_home_inline_new():
    """–ù–æ–≤–∞—è –≤–µ—Ä—Å–∏—è –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é"""
    # –°–¢–ê–†–´–ô –ö–û–î:
    # return InlineKeyboardMarkup([
    #     [InlineKeyboardButton("üé¨ –ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –≤–∏–¥–µ–æ", callback_data="menu_make")],
    #     [InlineKeyboardButton("üß± LEGO –º—É–ª—å—Ç–∏–∫–∏", callback_data="menu_lego")],
    #     [InlineKeyboardButton("üñºÔ∏è –û–∂–∏–≤–∏—Ç—å —Ñ–æ—Ç–æ", callback_data="menu_alive")],
    #     [InlineKeyboardButton("üëó –ü—Ä–∏–º–µ—Ä–æ—á–Ω–∞—è", callback_data="menu_tryon")],
    #     [InlineKeyboardButton("üì∏ –ò–∑–º–µ–Ω–∏—Ç—å —Ñ–æ—Ç–æ", callback_data="menu_transforms")],
    #     [InlineKeyboardButton("‚ö° JSON Pro", callback_data="menu_jsonpro")],
    #     [InlineKeyboardButton("üìö –ì–∞–π–¥—ã", callback_data="menu_guides")],
    #     [InlineKeyboardButton("üë§ –ü—Ä–æ—Ñ–∏–ª—å", callback_data="menu_profile")],
    #     [InlineKeyboardButton("üìú –ò—Å—Ç–æ—Ä–∏—è", callback_data="show_history")],
    # ])
    
    # –ù–û–í–´–ô –ö–û–î:
    _, keyboard = build_keyboard_with_description("root")
    return keyboard

# –ü—Ä–∏–º–µ—Ä –∑–∞–º–µ–Ω—ã –∫–æ–º–∞–Ω–¥—ã /start
async def cmd_start_new(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ù–æ–≤–∞—è –≤–µ—Ä—Å–∏—è –∫–æ–º–∞–Ω–¥—ã /start"""
    uid = update.effective_user.id
    _ensure(uid)
    
    # –°–¢–ê–†–´–ô –ö–û–î:
    # await update.message.reply_text(
    #     "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
    #     reply_markup=kb_home_inline(),
    #     parse_mode="HTML"
    # )
    
    # –ù–û–í–´–ô –ö–û–î:
    text, keyboard = build_keyboard_with_description("root")
    await update.message.reply_text(
        text,
        reply_markup=keyboard,
        parse_mode="HTML"
    )

# –ü—Ä–∏–º–µ—Ä –∑–∞–º–µ–Ω—ã –∫–æ–º–∞–Ω–¥—ã /coins
async def cmd_coins_new(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ù–æ–≤–∞—è –≤–µ—Ä—Å–∏—è –∫–æ–º–∞–Ω–¥—ã /coins"""
    if not await check_access(update): return
    uid = update.effective_user.id
    _ensure(uid)
    
    # –°–¢–ê–†–´–ô –ö–û–î:
    # await update.message.reply_text(
    #     "üí∞ <b>–ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å</b>\n\n"
    #     "–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è:",
    #     parse_mode="HTML",
    #     reply_markup=InlineKeyboardMarkup([
    #         [InlineKeyboardButton("üìã –¢–∞—Ä–∏—Ñ—ã", callback_data="show_plans")],
    #         [InlineKeyboardButton("üí∞ –ú–æ–Ω–µ—Ç–∫–∏", callback_data="show_topup")],
    #         [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_home")],
    #     ])
    # )
    
    # –ù–û–í–´–ô –ö–û–î:
    text, keyboard = build_keyboard_with_description("profile")
    await update.message.reply_text(
        "üí∞ <b>–ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è:",
        parse_mode="HTML",
        reply_markup=keyboard
    )

# –ü—Ä–∏–º–µ—Ä –º–∏–≥—Ä–∞—Ü–∏–æ–Ω–Ω–æ–π –æ–±–µ—Ä—Ç–∫–∏ –¥–ª—è –ø–æ—Å—Ç–µ–ø–µ–Ω–Ω–æ–≥–æ –ø–µ—Ä–µ—Ö–æ–¥–∞
async def migrated_callback_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ú–∏–≥—Ä–∞—Ü–∏–æ–Ω–Ω–∞—è –æ–±–µ—Ä—Ç–∫–∞ –¥–ª—è callback-–æ–≤"""
    try:
        # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º –Ω–æ–≤—ã–π —Ä–æ—É—Ç–µ—Ä
        await callback_entry(update.callback_query)
    except Exception as e:
        log.error(f"New callback router failed: {e}")
        # Fallback –∫ —Å—Ç–∞—Ä–æ–º—É –æ–±—Ä–∞–±–æ—Ç—á–∏–∫—É
        await on_cb(update, context)

# –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –º–∏–≥—Ä–∞—Ü–∏–æ–Ω–Ω–æ–π –æ–±–µ—Ä—Ç–∫–∏ –≤ create_app()
def create_app_with_migration():
    """–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è —Å –º–∏–≥—Ä–∞—Ü–∏–æ–Ω–Ω–æ–π –æ–±–µ—Ä—Ç–∫–æ–π"""
    if not BOT_TOKEN:
        raise RuntimeError("–ù–µ –Ω–∞–π–¥–µ–Ω TELEGRAM_TOKEN / BOT_TOKEN")
    
    check_and_reset_expired_plans()
    app = Application.builder().token(BOT_TOKEN).build()
    
    # –ö–æ–º–∞–Ω–¥—ã
    app.add_handler(CommandHandler("start", cmd_start_new))  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—É—é –≤–µ—Ä—Å–∏—é
    app.add_handler(CommandHandler("coins", cmd_coins_new))  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—É—é –≤–µ—Ä—Å–∏—é
    # ... –æ—Å—Ç–∞–ª—å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–∏–≥—Ä–∞—Ü–∏–æ–Ω–Ω—É—é –æ–±–µ—Ä—Ç–∫—É
    app.add_handler(CallbackQueryHandler(migrated_callback_handler))
    
    app.add_handler(MessageHandler(filters.PHOTO, on_photo))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, on_text))
    
    return app

# –ü—Ä–∏–º–µ—Ä –∑–∞–º–µ–Ω—ã –¥—Ä—É–≥–∏—Ö —Ñ—É–Ω–∫—Ü–∏–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä
def kb_modes_new():
    """–ù–æ–≤–∞—è –≤–µ—Ä—Å–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Ä–µ–∂–∏–º–æ–≤"""
    return build_keyboard_with_description("modes")[1]  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–æ–ª—å–∫–æ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É

def kb_lego_menu_new():
    """–ù–æ–≤–∞—è –≤–µ—Ä—Å–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã LEGO –º–µ–Ω—é"""
    return build_keyboard_with_description("lego_menu")[1]

def kb_nkudo_menu_new():
    """–ù–æ–≤–∞—è –≤–µ—Ä—Å–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –ù–ö–£–î–û –º–µ–Ω—é"""
    return build_keyboard_with_description("nkudo_menu")[1]

def kb_transforms_new():
    """–ù–æ–≤–∞—è –≤–µ—Ä—Å–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–π"""
    return build_keyboard_with_description("transforms")[1]

def kb_profile_new():
    """–ù–æ–≤–∞—è –≤–µ—Ä—Å–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –ø—Ä–æ—Ñ–∏–ª—è"""
    return build_keyboard_with_description("profile")[1]

# –ü—Ä–∏–º–µ—Ä —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –∑–∞–º–µ–Ω—ã —Ç–µ–∫—Å—Ç–æ–≤ –≤ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Ñ—É–Ω–∫—Ü–∏—è—Ö
def get_menu_text_new(menu_type: str) -> str:
    """–ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—Å—Ç –º–µ–Ω—é —á–µ—Ä–µ–∑ –Ω–æ–≤—É—é —Å–∏—Å—Ç–µ–º—É"""
    text_map = {
        "home": "menu.title",
        "modes": "menu.generate",
        "lego": "menu.lego",
        "transforms": "menu.transforms",
        "profile": "menu.profile",
        "tryon": "menu.tryon",
        "jsonpro": "menu.jsonpro",
    }
    
    text_key = text_map.get(menu_type, "menu.title")
    return t(text_key)

# –ü—Ä–∏–º–µ—Ä –∑–∞–º–µ–Ω—ã —Å–æ–∑–¥–∞–Ω–∏—è callback –¥–∞–Ω–Ω—ã—Ö
def create_callback_new(action: str, node_id: str = None, extra: str = None) -> str:
    """–°–æ–∑–¥–∞—Ç—å callback –¥–∞–Ω–Ω—ã–µ —á–µ—Ä–µ–∑ –Ω–æ–≤—É—é —Å–∏—Å—Ç–µ–º—É"""
    from app.ui.callbacks import Cb
    return Cb(action, node_id, extra).pack()

# –ü—Ä–∏–º–µ—Ä –∑–∞–º–µ–Ω—ã –≤ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Ñ—É–Ω–∫—Ü–∏—è—Ö
async def example_usage_in_existing_function():
    """–ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –Ω–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã –≤ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Ñ—É–Ω–∫—Ü–∏—è—Ö"""
    
    # –í–º–µ—Å—Ç–æ:
    # await message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º:", reply_markup=kb_modes())
    
    # –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ:
    text, keyboard = build_keyboard_with_description("modes")
    await message.reply_text(text, reply_markup=keyboard)
    
    # –ò–ª–∏ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è callback –¥–∞–Ω–Ω—ã—Ö:
    callback_data = create_callback_new("nav", "lego_menu")
    
    # –ò–ª–∏ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞:
    menu_text = get_menu_text_new("lego")

if __name__ == "__main__":
    print("–≠—Ç–æ—Ç —Ñ–∞–π–ª —Å–æ–¥–µ—Ä–∂–∏—Ç –ø—Ä–∏–º–µ—Ä—ã –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –Ω–æ–≤–æ–π UI —Å–∏—Å—Ç–µ–º—ã –≤ main.py")
    print("–°–∫–æ–ø–∏—Ä—É–π—Ç–µ –Ω—É–∂–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –∏ –∑–∞–º–µ–Ω–∏—Ç–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ —á–∞—Å—Ç–∏ –≤ main.py")
    print("–î–ª—è –ø–æ–ª–Ω–æ–π –º–∏–≥—Ä–∞—Ü–∏–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ create_app_with_new_ui()")
    print("–î–ª—è –ø–æ—Å—Ç–µ–ø–µ–Ω–Ω–æ–π –º–∏–≥—Ä–∞—Ü–∏–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ create_app_with_migration()")
