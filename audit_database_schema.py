#!/usr/bin/env python3
"""
–ê–£–î–ò–¢: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ö–µ–º—ã –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
"""

import os
import sys
sys.path.append('.')

from app.db.db_subscriptions import db_conn

def audit_database_schema():
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ö–µ–º—É –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    print("üîç –ê–£–î–ò–¢: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ö–µ–º—ã –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö")
    print("="*60)
    
    try:
        with db_conn() as conn:
            cur = conn.cursor()
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            is_postgres = hasattr(conn, 'cursor') and 'psycopg2' in str(type(conn))
            print(f"üóÑÔ∏è –¢–∏–ø –ë–î: {'PostgreSQL' if is_postgres else 'SQLite'}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∞–±–ª–∏—Ü—É users
            print("\nüìä –¢–ê–ë–õ–ò–¶–ê USERS:")
            if is_postgres:
                cur.execute("""
                    SELECT column_name, data_type, is_nullable, column_default
                    FROM information_schema.columns 
                    WHERE table_name = 'users' 
                    ORDER BY ordinal_position
                """)
            else:
                cur.execute("PRAGMA table_info(users)")
            
            users_columns = cur.fetchall()
            print("–ö–æ–ª–æ–Ω–∫–∏:")
            for col in users_columns:
                print(f"  - {col}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∞–±–ª–∏—Ü—É subscriptions
            print("\nüìä –¢–ê–ë–õ–ò–¶–ê SUBSCRIPTIONS:")
            if is_postgres:
                cur.execute("""
                    SELECT column_name, data_type, is_nullable, column_default
                    FROM information_schema.columns 
                    WHERE table_name = 'subscriptions' 
                    ORDER BY ordinal_position
                """)
            else:
                cur.execute("PRAGMA table_info(subscriptions)")
            
            subs_columns = cur.fetchall()
            print("–ö–æ–ª–æ–Ω–∫–∏:")
            for col in subs_columns:
                print(f"  - {col}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∞–±–ª–∏—Ü—É transactions
            print("\nüìä –¢–ê–ë–õ–ò–¶–ê TRANSACTIONS:")
            if is_postgres:
                cur.execute("""
                    SELECT column_name, data_type, is_nullable, column_default
                    FROM information_schema.columns 
                    WHERE table_name = 'transactions' 
                    ORDER BY ordinal_position
                """)
            else:
                cur.execute("PRAGMA table_info(transactions)")
            
            trans_columns = cur.fetchall()
            print("–ö–æ–ª–æ–Ω–∫–∏:")
            for col in trans_columns:
                print(f"  - {col}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–Ω–¥–µ–∫—Å—ã
            print("\nüîç –ò–ù–î–ï–ö–°–´:")
            if is_postgres:
                cur.execute("""
                    SELECT indexname, tablename, indexdef
                    FROM pg_indexes 
                    WHERE tablename IN ('users', 'subscriptions', 'transactions')
                """)
            else:
                cur.execute("SELECT name, sql FROM sqlite_master WHERE type='index'")
            
            indexes = cur.fetchall()
            for idx in indexes:
                print(f"  - {idx}")
            
            print("\n‚úÖ –ê–£–î–ò–¢ –°–•–ï–ú–´ –ó–ê–í–ï–†–®–ï–ù")
            
    except Exception as e:
        print(f"‚ùå –û–®–ò–ë–ö–ê –ê–£–î–ò–¢–ê –°–•–ï–ú–´: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    audit_database_schema()
