#!/usr/bin/env python3
# test_ui_system.py
"""–¢–µ—Å—Ç—ã –¥–ª—è –Ω–æ–≤–æ–π UI —Å–∏—Å—Ç–µ–º—ã –±–æ—Ç–∞"""

import unittest
import sys
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
project_root = Path(__file__).parent
sys.path.insert(0, str(project_root))

from app.ui.callbacks import Cb, parse_cb, Actions
from app.ui.texts import t
# from app.ui.keyboards import build_keyboard, build_keyboard_with_description  # –¢—Ä–µ–±—É–µ—Ç aiogram
from app.ui.menu_schema import MENU, validate_menu_schema, get_all_node_ids
# from app.handlers.router import HANDLERS  # –¢—Ä–µ–±—É–µ—Ç aiogram

class TestCallbacks(unittest.TestCase):
    """–¢–µ—Å—Ç—ã –¥–ª—è —Å–∏—Å—Ç–µ–º—ã callback-–æ–≤"""
    
    def test_cb_pack_unpack(self):
        """–¢–µ—Å—Ç —É–ø–∞–∫–æ–≤–∫–∏/—Ä–∞—Å–ø–∞–∫–æ–≤–∫–∏ callback –¥–∞–Ω–Ω—ã—Ö"""
        # –ü—Ä–æ—Å—Ç–æ–π callback
        cb = Cb("nav", "root")
        packed = cb.pack()
        unpacked = Cb.unpack(packed)
        
        self.assertEqual(unpacked.action, "nav")
        self.assertEqual(unpacked.id, "root")
        self.assertIsNone(unpacked.extra)
        
        # Callback —Å extra
        cb2 = Cb("action", "id", "extra")
        packed2 = cb2.pack()
        unpacked2 = Cb.unpack(packed2)
        
        self.assertEqual(unpacked2.action, "action")
        self.assertEqual(unpacked2.id, "id")
        self.assertEqual(unpacked2.extra, "extra")
    
    def test_cb_length_limit(self):
        """–¢–µ—Å—Ç –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –¥–ª–∏–Ω—ã callback –¥–∞–Ω–Ω—ã—Ö"""
        # –°–æ–∑–¥–∞–µ–º –æ—á–µ–Ω—å –¥–ª–∏–Ω–Ω—ã–π callback
        long_id = "a" * 100
        cb = Cb("action", long_id)
        packed = cb.pack()
        
        # –î–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ–±—Ä–µ–∑–∞–Ω –¥–æ 64 –±–∞–π—Ç
        self.assertLessEqual(len(packed.encode('utf-8')), 64)
    
    def test_parse_cb_valid(self):
        """–¢–µ—Å—Ç –ø–∞—Ä—Å–∏–Ω–≥–∞ –≤–∞–ª–∏–¥–Ω—ã—Ö callback –¥–∞–Ω–Ω—ã—Ö"""
        # –í–∞–ª–∏–¥–Ω—ã–π callback
        result = parse_cb("nav|root")
        self.assertIsNotNone(result)
        self.assertEqual(result.action, "nav")
        self.assertEqual(result.id, "root")
        
        # Callback —Å extra
        result2 = parse_cb("action|id|extra")
        self.assertIsNotNone(result2)
        self.assertEqual(result2.action, "action")
        self.assertEqual(result2.id, "id")
        self.assertEqual(result2.extra, "extra")
    
    def test_parse_cb_invalid(self):
        """–¢–µ—Å—Ç –ø–∞—Ä—Å–∏–Ω–≥–∞ –Ω–µ–≤–∞–ª–∏–¥–Ω—ã—Ö callback –¥–∞–Ω–Ω—ã—Ö"""
        # –ü—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞
        self.assertIsNone(parse_cb(""))
        
        # None
        self.assertIsNone(parse_cb(None))
        
        # –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç (–ø—É—Å—Ç–æ–π action)
        self.assertIsNone(parse_cb("|invalid"))
        self.assertIsNone(parse_cb("||invalid"))

class TestTexts(unittest.TestCase):
    """–¢–µ—Å—Ç—ã –¥–ª—è —Å–∏—Å—Ç–µ–º—ã —Ç–µ–∫—Å—Ç–æ–≤"""
    
    def test_t_function(self):
        """–¢–µ—Å—Ç —Ñ—É–Ω–∫—Ü–∏–∏ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–æ–≤"""
        # –°—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∫–ª—é—á
        text = t("menu.title")
        self.assertEqual(text, "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
        
        # –ù–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∫–ª—é—á (–¥–æ–ª–∂–µ–Ω –≤–µ—Ä–Ω—É—Ç—å –∫–ª—é—á –∫–∞–∫ –µ—Å—Ç—å)
        text2 = t("nonexistent.key")
        self.assertEqual(text2, "nonexistent.key")
    
    def test_t_with_formatting(self):
        """–¢–µ—Å—Ç —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–æ–≤"""
        # –¢–µ–∫—Å—Ç —Å —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º
        text = t("desc.transforms", coins=100)
        self.assertIn("100", text)
        self.assertIn("–º–æ–Ω–µ—Ç–æ–∫", text)

class TestMenuSchema(unittest.TestCase):
    """–¢–µ—Å—Ç—ã –¥–ª—è —Å—Ö–µ–º—ã –º–µ–Ω—é"""
    
    def test_menu_structure(self):
        """–¢–µ—Å—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –º–µ–Ω—é"""
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –æ—Å–Ω–æ–≤–Ω—ã—Ö —É–∑–ª–æ–≤
        self.assertIn("root", MENU)
        self.assertIn("modes", MENU)
        self.assertIn("lego_menu", MENU)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —É–∑–ª–∞
        root_node = MENU["root"]
        self.assertIn("text_key", root_node)
        self.assertIn("buttons", root_node)
        self.assertIsInstance(root_node["buttons"], list)
    
    def test_menu_validation(self):
        """–¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Å—Ö–µ–º—ã –º–µ–Ω—é"""
        errors = validate_menu_schema()
        self.assertEqual(len(errors), 0, f"Schema validation errors: {errors}")
    
    def test_all_targets_exist(self):
        """–¢–µ—Å—Ç —á—Ç–æ –≤—Å–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ —É–∑–ª—ã —Å—É—â–µ—Å—Ç–≤—É—é—Ç"""
        all_node_ids = get_all_node_ids()
        
        for node_id, node in MENU.items():
            for button in node.get("buttons", []):
                target = button.get("to")
                if target:
                    self.assertIn(target, all_node_ids, 
                                f"Node '{node_id}' references non-existent target '{target}'")

class TestKeyboards(unittest.TestCase):
    """–¢–µ—Å—Ç—ã –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä (–∑–∞–≥–ª—É—à–∫–∞ –±–µ–∑ aiogram)"""
    
    def test_keyboard_placeholder(self):
        """–ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è —Ç–µ—Å—Ç–æ–≤ –∫–ª–∞–≤–∏–∞—Ç—É—Ä"""
        # –¢–µ—Å—Ç—ã –∫–ª–∞–≤–∏–∞—Ç—É—Ä —Ç—Ä–µ–±—É—é—Ç aiogram, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
        self.assertTrue(True, "Keyboard tests skipped - requires aiogram")

class TestRouter(unittest.TestCase):
    """–¢–µ—Å—Ç—ã –¥–ª—è —Ä–æ—É—Ç–µ—Ä–∞ (–∑–∞–≥–ª—É—à–∫–∞ –±–µ–∑ aiogram)"""
    
    def test_router_placeholder(self):
        """–ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è —Ç–µ—Å—Ç–æ–≤ —Ä–æ—É—Ç–µ—Ä–∞"""
        # –¢–µ—Å—Ç—ã —Ä–æ—É—Ç–µ—Ä–∞ —Ç—Ä–µ–±—É—é—Ç aiogram, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
        self.assertTrue(True, "Router tests skipped - requires aiogram")

class TestIntegration(unittest.TestCase):
    """–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã"""
    
    def test_full_flow(self):
        """–¢–µ—Å—Ç –ø–æ–ª–Ω–æ–≥–æ —Ñ–ª–æ—É –æ—Ç callback –¥–æ –ø–∞—Ä—Å–∏–Ω–≥–∞"""
        # –°–æ–∑–¥–∞–µ–º callback
        cb = Cb(Actions.NAV, "lego_menu")
        packed = cb.pack()
        
        # –ü–∞—Ä—Å–∏–º –æ–±—Ä–∞—Ç–Ω–æ
        parsed = parse_cb(packed)
        self.assertIsNotNone(parsed)
        self.assertEqual(parsed.action, Actions.NAV)
        self.assertEqual(parsed.id, "lego_menu")
    
    def test_menu_navigation(self):
        """–¢–µ—Å—Ç –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ –º–µ–Ω—é"""
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –º–æ–∂–Ω–æ –¥–æ–±—Ä–∞—Ç—å—Å—è –æ—Ç root –¥–æ –æ—Å–Ω–æ–≤–Ω—ã—Ö —É–∑–ª–æ–≤
        visited = set()
        to_visit = ["root"]
        
        while to_visit:
            current = to_visit.pop(0)
            if current in visited:
                continue
                
            visited.add(current)
            
            if current in MENU:
                for button in MENU[current].get("buttons", []):
                    target = button.get("to")
                    if target and target not in visited:
                        to_visit.append(target)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –æ—Å–Ω–æ–≤–Ω—ã–µ —É–∑–ª—ã –¥–æ—Å—Ç–∏–∂–∏–º—ã
        main_nodes = {"root", "modes", "lego_menu", "nkudo_menu", "tryon_start", 
                     "transforms", "jsonpro_start", "profile"}
        unreachable = main_nodes - visited
        self.assertEqual(len(unreachable), 0, 
                        f"Unreachable main nodes: {unreachable}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ—Å—Ç–∏–∂–∏–º—ã—Ö —É–∑–ª–æ–≤ —Ä–∞–∑—É–º–Ω–æ–µ
        self.assertGreater(len(visited), 10, "Too few reachable nodes")

def run_tests():
    """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤"""
    # –°–æ–∑–¥–∞–µ–º test suite
    loader = unittest.TestLoader()
    suite = unittest.TestSuite()
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç—ã
    test_classes = [
        TestCallbacks,
        TestTexts,
        TestMenuSchema,
        TestKeyboards,
        TestRouter,
        TestIntegration
    ]
    
    for test_class in test_classes:
        tests = loader.loadTestsFromTestCase(test_class)
        suite.addTests(tests)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã
    runner = unittest.TextTestRunner(verbosity=2)
    result = runner.run(suite)
    
    return result.wasSuccessful()

if __name__ == "__main__":
    success = run_tests()
    sys.exit(0 if success else 1)
