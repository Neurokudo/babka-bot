#!/usr/bin/env python3
"""
UI Routes Test Script
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç—å –≤—Å–µ—Ö –∫–Ω–æ–ø–æ–∫ –∏ callback'–æ–≤ –≤ –±–æ—Ç–µ
"""

import re
import sys
from pathlib import Path
from typing import Set, Dict, List, Tuple

def find_callbacks() -> Set[str]:
    """–ù–∞–π—Ç–∏ –≤—Å–µ callback_data –≤ –ø—Ä–æ–µ–∫—Ç–µ"""
    callbacks = set()
    
    # –ò—â–µ–º –≤ –æ—Å–Ω–æ–≤–Ω—ã—Ö —Ñ–∞–π–ª–∞—Ö
    search_paths = [
        "main.py",
        "app/ui/",
        "app/handlers/",
        "app/"
    ]
    
    for search_path in search_paths:
        if Path(search_path).is_file():
            # –û–¥–∏–Ω–æ—á–Ω—ã–π —Ñ–∞–π–ª
            files = [Path(search_path)]
        else:
            # –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è
            files = list(Path(search_path).rglob("*.py"))
        
        for file in files:
            try:
                text = file.read_text(encoding="utf-8", errors="ignore")
                
                # –ò—â–µ–º callback_data –≤ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–∞—Ö
                patterns = [
                    r"callback_data=['\"](.*?)['\"]",  # callback_data="value"
                    r"callback_data=([a-zA-Z_][a-zA-Z0-9_]*)",  # callback_data=variable
                    r"CallbackQueryHandler\(.*?['\"](.*?)['\"]",  # CallbackQueryHandler("value")
                ]
                
                for pattern in patterns:
                    for match in re.findall(pattern, text):
                        if isinstance(match, str) and match.strip():
                            callbacks.add(match.strip())
                            
            except Exception as e:
                print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞ {file}: {e}")
    
    return callbacks

def find_handlers() -> Set[str]:
    """–ù–∞–π—Ç–∏ –≤—Å–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ callback'–æ–≤"""
    handlers = set()
    
    # –ò—â–µ–º –≤ main.py –∏ handlers/
    search_paths = ["main.py", "app/handlers/"]
    
    for search_path in search_paths:
        if Path(search_path).is_file():
            files = [Path(search_path)]
        else:
            files = list(Path(search_path).rglob("*.py"))
        
        for file in files:
            try:
                text = file.read_text(encoding="utf-8", errors="ignore")
                
                # –ò—â–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –≤ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–∞—Ö
                patterns = [
                    r"if data == ['\"](.*?)['\"]",  # if data == "value"
                    r"elif data == ['\"](.*?)['\"]",  # elif data == "value"
                    r"CallbackQueryHandler\(.*?['\"](.*?)['\"]",  # CallbackQueryHandler("value")
                    r"callback_data=['\"](.*?)['\"]",  # callback_data –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞—Ö
                ]
                
                for pattern in patterns:
                    for match in re.findall(pattern, text):
                        if isinstance(match, str) and match.strip():
                            handlers.add(match.strip())
                            
            except Exception as e:
                print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞ {file}: {e}")
    
    return handlers

def find_keyboard_functions() -> Dict[str, List[str]]:
    """–ù–∞–π—Ç–∏ –≤—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä –∏ –∏—Ö callback'—ã"""
    keyboards = {}
    
    # –ò—â–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ kb_* –≤ main.py
    try:
        text = Path("main.py").read_text(encoding="utf-8", errors="ignore")
        
        # –ò—â–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ def kb_*():
        kb_pattern = r"def (kb_[a-zA-Z_][a-zA-Z0-9_]*)\([^)]*\):"
        kb_functions = re.findall(kb_pattern, text)
        
        for func_name in kb_functions:
            # –ò—â–µ–º callback_data –≤ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏
            func_pattern = rf"def {func_name}\([^)]*\):(.*?)(?=def |$)"
            func_match = re.search(func_pattern, text, re.DOTALL)
            
            if func_match:
                func_text = func_match.group(1)
                callbacks = re.findall(r"callback_data=['\"](.*?)['\"]", func_text)
                keyboards[func_name] = callbacks
                
    except Exception as e:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä: {e}")
    
    return keyboards

def check_navigation_safety() -> List[str]:
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –Ω–∞–≤–∏–≥–∞—Ü–∏–∏"""
    issues = []
    
    try:
        text = Path("main.py").read_text(encoding="utf-8", errors="ignore")
        
        # –ö—Ä–∏—Ç–∏—á–Ω—ã–µ —ç–∫—Ä–∞–Ω—ã, –∫–æ—Ç–æ—Ä—ã–µ –¥–æ–ª–∂–Ω—ã –∏–º–µ—Ç—å –∫–Ω–æ–ø–∫—É –≤–æ–∑–≤—Ä–∞—Ç–∞
        critical_screens = [
            "show_tariffs",
            "show_profile", 
            "tryon_start",
            "menu_transforms",
            "nkudo_menu",
            "lego_menu"
        ]
        
        for screen in critical_screens:
            # –ò—â–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —ç—Ç–æ–≥–æ —ç–∫—Ä–∞–Ω–∞
            screen_pattern = rf"if data == ['\"]{screen}['\"]"
            if re.search(screen_pattern, text):
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∫–Ω–æ–ø–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ
                # –ò—â–µ–º —Ñ—É–Ω–∫—Ü–∏—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –ø–æ—Å–ª–µ —ç—Ç–æ–≥–æ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞
                handler_pattern = rf"if data == ['\"]{screen}['\"]:(.*?)(?=if data ==|elif data ==|$)"
                handler_match = re.search(handler_pattern, text, re.DOTALL)
                
                if handler_match:
                    handler_text = handler_match.group(1)
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–Ω–æ–ø–æ–∫ –≤–æ–∑–≤—Ä–∞—Ç–∞
                    back_patterns = [
                        r"callback_data=['\"](back_|home|main)",
                        r"–ù–∞–∑–∞–¥",
                        r"–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"
                    ]
                    
                    has_back = any(re.search(pattern, handler_text) for pattern in back_patterns)
                    if not has_back:
                        issues.append(f"‚ö†Ô∏è –≠–∫—Ä–∞–Ω '{screen}' –Ω–µ –∏–º–µ–µ—Ç –∫–Ω–æ–ø–∫–∏ –≤–æ–∑–≤—Ä–∞—Ç–∞")
                        
    except Exception as e:
        issues.append(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏: {e}")
    
    return issues

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üß≠ UI ROUTES TEST")
    print("=" * 50)
    
    # –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ callback'—ã –∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    callbacks = find_callbacks()
    handlers = find_handlers()
    keyboards = find_keyboard_functions()
    
    print(f"üìä –ù–∞–π–¥–µ–Ω–æ callback'–æ–≤: {len(callbacks)}")
    print(f"üìä –ù–∞–π–¥–µ–Ω–æ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤: {len(handlers)}")
    print(f"üìä –ù–∞–π–¥–µ–Ω–æ –∫–ª–∞–≤–∏–∞—Ç—É—Ä: {len(keyboards)}")
    print()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    missing = callbacks - handlers
    if missing:
        print("‚ùå –ù–ï –ù–ê–ô–î–ï–ù–´ –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò:")
        for callback in sorted(missing):
            print(f"   - {callback}")
        print()
    else:
        print("‚úÖ –í—Å–µ callback'—ã –∏–º–µ—é—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏")
        print()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    unused = handlers - callbacks
    if unused:
        print("‚ö†Ô∏è –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ë–ï–ó –ö–ù–û–ü–û–ö:")
        for handler in sorted(unused):
            print(f"   - {handler}")
        print()
    else:
        print("‚úÖ –í—Å–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è")
        print()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥—É–±–ª–∏—Ä—É—é—â–∏–µ—Å—è callback'—ã
    duplicates = []
    callback_counts = {}
    for callback in callbacks:
        callback_counts[callback] = callback_counts.get(callback, 0) + 1
    
    for callback, count in callback_counts.items():
        if count > 1:
            duplicates.append(callback)
    
    if duplicates:
        print("‚ùå –î–£–ë–õ–ò–†–£–Æ–©–ò–ï–°–Ø CALLBACK'–´:")
        for callback in sorted(duplicates):
            print(f"   - {callback} (–≤—Å—Ç—Ä–µ—á–∞–µ—Ç—Å—è {callback_counts[callback]} —Ä–∞–∑)")
        print()
    else:
        print("‚úÖ –ù–µ—Ç –¥—É–±–ª–∏—Ä—É—é—â–∏—Ö—Å—è callback'–æ–≤")
        print()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    nav_issues = check_navigation_safety()
    if nav_issues:
        print("‚ö†Ô∏è –ü–†–û–ë–õ–ï–ú–´ –ù–ê–í–ò–ì–ê–¶–ò–ò:")
        for issue in nav_issues:
            print(f"   {issue}")
        print()
    else:
        print("‚úÖ –ù–∞–≤–∏–≥–∞—Ü–∏—è –±–µ–∑–æ–ø–∞—Å–Ω–∞")
        print()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
    if keyboards:
        print("‚å®Ô∏è –ê–ù–ê–õ–ò–ó –ö–õ–ê–í–ò–ê–¢–£–†:")
        for kb_name, kb_callbacks in keyboards.items():
            print(f"   {kb_name}: {len(kb_callbacks)} –∫–Ω–æ–ø–æ–∫")
            for callback in kb_callbacks:
                if callback not in handlers:
                    print(f"     ‚ùå {callback} - –Ω–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞")
        print()
    
    # –ò—Ç–æ–≥–æ–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    total_issues = len(missing) + len(duplicates) + len(nav_issues)
    
    if total_issues == 0:
        print("üéâ –í–°–ï –ü–†–û–í–ï–†–ö–ò –ü–†–û–ô–î–ï–ù–´ –£–°–ü–ï–®–ù–û!")
        print("‚úÖ UI-–ª–æ–≥–∏–∫–∞ –±–æ—Ç–∞ –≤ –ø–æ—Ä—è–¥–∫–µ")
        return 0
    else:
        print(f"‚ùå –û–ë–ù–ê–†–£–ñ–ï–ù–û {total_issues} –ü–†–û–ë–õ–ï–ú")
        print("‚ö†Ô∏è –¢—Ä–µ–±—É–µ—Ç—Å—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–µ—Ä–µ–¥ –¥–µ–ø–ª–æ–µ–º")
        return 1

if __name__ == "__main__":
    sys.exit(main())
