#!/usr/bin/env python3
"""
–ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π —Ç–µ—Å—Ç —Å–∏—Å—Ç–µ–º—ã –±–∏–ª–ª–∏–Ω–≥–∞ –∏ –∞—É–¥–∏—Ç–∞
"""
import os
import sys

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –ø–∞–ø–∫—É –ø—Ä–æ–µ–∫—Ç–∞ –≤ –ø—É—Ç—å
sys.path.insert(0, os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

def test_balance_manager():
    """–¢–µ—Å—Ç balance_manager"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ balance_manager...")
    
    try:
        from app.services import balance_manager
        
        test_user_id = 5015100177
        
        # –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞
        balance = balance_manager.get_balance(test_user_id)
        print(f"‚úÖ get_balance: {balance}")
        
        # –¢–µ—Å—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –º–æ–Ω–µ—Ç
        new_balance = balance_manager.add_coins(
            user_id=test_user_id,
            amount=10,
            reason="Test add coins",
            feature="test_add"
        )
        print(f"‚úÖ add_coins: {new_balance}")
        
        # –¢–µ—Å—Ç —Å–ø–∏—Å–∞–Ω–∏—è –º–æ–Ω–µ—Ç
        final_balance = balance_manager.spend_coins(
            user_id=test_user_id,
            amount=5,
            reason="Test spend coins",
            feature="test_spend"
        )
        print(f"‚úÖ spend_coins: {final_balance}")
        
        # –¢–µ—Å—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ—Å—Ç–∏ —Å—Ä–µ–¥—Å—Ç–≤
        can_afford = balance_manager.can_afford(test_user_id, 1000)
        print(f"‚úÖ can_afford(1000): {can_afford}")
        
        # –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è —Å–≤–æ–¥–∫–∏
        summary = balance_manager.get_user_summary(test_user_id)
        print(f"‚úÖ get_user_summary: {len(summary['recent_transactions'])} transactions")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ balance_manager: {e}")
        return False

def test_billing_observer():
    """–¢–µ—Å—Ç billing_observer"""
    print("\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ billing_observer...")
    
    try:
        from app.services import billing_observer
        
        test_user_id = 5015100177
        
        # –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏
        history = billing_observer.get_user_recent_transactions(test_user_id, 5)
        print(f"‚úÖ get_user_recent_transactions: {len(history)} records")
        
        # –¢–µ—Å—Ç –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞
        daily_report = billing_observer.get_daily_report()
        print(f"‚úÖ get_daily_report: {daily_report['total_spent']} spent, {daily_report['total_earned']} earned")
        
        # –¢–µ—Å—Ç –Ω–µ–¥–µ–ª—å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞
        weekly_report = billing_observer.get_weekly_report()
        print(f"‚úÖ get_weekly_report: {weekly_report['unique_users']} users")
        
        # –¢–µ—Å—Ç –º–µ—Å—è—á–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞
        monthly_report = billing_observer.get_monthly_report()
        print(f"‚úÖ get_monthly_report: {monthly_report['unique_users']} users")
        
        # –¢–µ—Å—Ç —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ç—á–µ—Ç–∞
        formatted = billing_observer.format_report(daily_report)
        print(f"‚úÖ format_report: {len(formatted)} characters")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ billing_observer: {e}")
        return False

def test_audit_database():
    """–¢–µ—Å—Ç –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∞—É–¥–∏—Ç–∞"""
    print("\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∞—É–¥–∏—Ç–∞...")
    
    try:
        from app.db import db_billing_audit
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–∞–±–ª–∏—Ü—ã
        db_billing_audit.init_audit_table()
        print("‚úÖ init_audit_table")
        
        # –¢–µ—Å—Ç –≤—Å—Ç–∞–≤–∫–∏ –∑–∞–ø–∏—Å–∏
        test_record = {
            "user_id": 999999,
            "delta": 10,
            "feature": "test_feature",
            "reason": "Test record",
            "old_balance": 100,
            "new_balance": 110,
            "timestamp": "2025-01-01 12:00:00"
        }
        
        success = db_billing_audit.insert_record(test_record)
        print(f"‚úÖ insert_record: {success}")
        
        # –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏
        history = db_billing_audit.get_user_history(999999, 5)
        print(f"‚úÖ get_user_history: {len(history)} records")
        
        # –¢–µ—Å—Ç –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞
        from datetime import date
        daily_report = db_billing_audit.get_daily_report(date.today())
        print(f"‚úÖ get_daily_report: {daily_report['total_spent']} spent")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –∞—É–¥–∏—Ç–∞: {e}")
        return False

def test_pricing_system():
    """–¢–µ—Å—Ç —Å–∏—Å—Ç–µ–º—ã —Ü–µ–Ω–æ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è"""
    print("\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã —Ü–µ–Ω–æ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è...")
    
    try:
        from app.config.pricing import FEATURE_COSTS, FEATURE_DESCRIPTIONS, FEATURE_CATEGORIES
        
        # –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–æ–∏–º–æ—Å—Ç–∏
        video_cost = FEATURE_COSTS.get("video_8s_audio", 0)
        print(f"‚úÖ FEATURE_COSTS: video_8s_audio = {video_cost}")
        
        # –¢–µ—Å—Ç –æ–ø–∏—Å–∞–Ω–∏–π
        video_desc = FEATURE_DESCRIPTIONS.get("video_8s_audio", "Unknown")
        print(f"‚úÖ FEATURE_DESCRIPTIONS: video_8s_audio = {video_desc}")
        
        # –¢–µ—Å—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–π
        video_category = None
        for category, features in FEATURE_CATEGORIES.items():
            if "video_8s_audio" in features:
                video_category = category
                break
        print(f"‚úÖ FEATURE_CATEGORIES: video_8s_audio in {video_category}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Å–∏—Å—Ç–µ–º–µ —Ü–µ–Ω–æ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è: {e}")
        return False

def main():
    print("üöÄ –ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π —Ç–µ—Å—Ç —Å–∏—Å—Ç–µ–º—ã –±–∏–ª–ª–∏–Ω–≥–∞ –∏ –∞—É–¥–∏—Ç–∞\n")
    
    tests = [
        test_balance_manager,
        test_billing_observer,
        test_audit_database,
        test_pricing_system
    ]
    
    results = []
    for test in tests:
        try:
            result = test()
            results.append(result)
        except Exception as e:
            print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ {test.__name__}: {e}")
            results.append(False)
    
    print(f"\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:")
    print(f"‚úÖ –£—Å–ø–µ—à–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤: {sum(results)}")
    print(f"‚ùå –ù–µ—É–¥–∞—á–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤: {len(results) - sum(results)}")
    
    if all(results):
        print("\nüéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ!")
        print("üí° –°–∏—Å—Ç–µ–º–∞ –±–∏–ª–ª–∏–Ω–≥–∞ –∏ –∞—É–¥–∏—Ç–∞ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ")
        return True
    else:
        print("\nüí• –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –Ω–µ –ø—Ä–æ—à–ª–∏!")
        print("üîß –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –∏ –∏—Å–ø—Ä–∞–≤—å—Ç–µ –æ—à–∏–±–∫–∏")
        return False

if __name__ == "__main__":
    success = main()
    exit(0 if success else 1)
