#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π –∫–Ω–æ–ø–∫–∏ –¢–∞—Ä–∏—Ñ—ã
"""
import sys
import os

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –ø–∞–ø–∫—É –ø—Ä–æ–µ–∫—Ç–∞ –≤ –ø—É—Ç—å
sys.path.insert(0, os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

def test_pricing_functions():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ pricing"""
    print("=== –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–π pricing ===")
    
    try:
        from app.services.pricing import get_available_tariffs, format_plans_list
        
        # –¢–µ—Å—Ç get_available_tariffs
        tariffs = get_available_tariffs()
        print(f"‚úÖ get_available_tariffs() –≤–µ—Ä–Ω—É–ª {len(tariffs)} —Ç–∞—Ä–∏—Ñ–æ–≤")
        print(f"   –¢–∏–ø: {type(tariffs)}")
        
        for tariff in tariffs:
            print(f"   - {tariff['name']}: {tariff['title']} ‚Äî {tariff['price_rub']:,} ‚ÇΩ")
        
        # –¢–µ—Å—Ç format_plans_list
        plans_text = format_plans_list()
        print(f"‚úÖ format_plans_list() –≤–µ—Ä–Ω—É–ª —Ç–µ–∫—Å—Ç –¥–ª–∏–Ω–æ–π {len(plans_text)} —Å–∏–º–≤–æ–ª–æ–≤")
        print("   –ü–µ—Ä–≤—ã–µ 200 —Å–∏–º–≤–æ–ª–æ–≤:")
        print(f"   {plans_text[:200]}...")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ñ—É–Ω–∫—Ü–∏—è—Ö pricing: {e}")
        import traceback
        traceback.print_exc()
        return False

def test_billing_functions():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –±–∏–ª–ª–∏–Ω–≥–∞"""
    print("\n=== –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–π –±–∏–ª–ª–∏–Ω–≥–∞ ===")
    
    try:
        from app.db import db_subscriptions as db
        
        # –¢–µ—Å—Ç get_user_balance
        test_user_id = 5015100177
        balance = db.get_user_balance(test_user_id)
        print(f"‚úÖ get_user_balance({test_user_id}) = {balance}")
        
        # –¢–µ—Å—Ç charge_feature (–Ω–µ–±–æ–ª—å—à–∞—è —Å—É–º–º–∞)
        success = db.charge_feature(test_user_id, "test_feature", 1, note="test_charge")
        print(f"‚úÖ charge_feature() = {success}")
        
        # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –±–∞–ª–∞–Ω—Å
        if success:
            db.update_user_balance(test_user_id, 1, note="restore_after_test")
            print("‚úÖ –ë–∞–ª–∞–Ω—Å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ñ—É–Ω–∫—Ü–∏—è—Ö –±–∏–ª–ª–∏–Ω–≥–∞: {e}")
        import traceback
        traceback.print_exc()
        return False

def test_old_queries_redirect():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ä—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤"""
    print("\n=== –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ä—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ ===")
    
    try:
        from app.db.queries import charge_feature
        
        # –¢–µ—Å—Ç –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        test_user_id = 5015100177
        success = charge_feature(test_user_id, "test_redirect", 1, note="test_redirect")
        print(f"‚úÖ queries.charge_feature() –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω = {success}")
        
        # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –±–∞–ª–∞–Ω—Å
        if success:
            from app.db import db_subscriptions as db
            db.update_user_balance(test_user_id, 1, note="restore_after_redirect_test")
            print("‚úÖ –ë–∞–ª–∞–Ω—Å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ—Å–ª–µ —Ç–µ—Å—Ç–∞ –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–∏: {e}")
        import traceback
        traceback.print_exc()
        return False

def main():
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π –∫–Ω–æ–ø–∫–∏ –¢–∞—Ä–∏—Ñ—ã\n")
    
    results = []
    results.append(test_pricing_functions())
    results.append(test_billing_functions())
    results.append(test_old_queries_redirect())
    
    print(f"\n=== –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è ===")
    print(f"‚úÖ –£—Å–ø–µ—à–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤: {sum(results)}")
    print(f"‚ùå –ù–µ—É–¥–∞—á–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤: {len(results) - sum(results)}")
    
    if all(results):
        print("üéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ!")
        return 0
    else:
        print("üí• –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –Ω–µ –ø—Ä–æ—à–ª–∏!")
        return 1

if __name__ == "__main__":
    exit(main())
