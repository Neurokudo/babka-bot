#!/usr/bin/env python3
"""
–ê–≤—Ç–æ—Ç–µ—Å—Ç UI —Å–∏—Å—Ç–µ–º—ã –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–∞—Ä–∏—Ñ–æ–≤ –∏ –∫–Ω–æ–ø–æ–∫
"""
import sys
import os

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –ø–∞–ø–∫—É –ø—Ä–æ–µ–∫—Ç–∞ –≤ –ø—É—Ç—å –¥–ª—è –∏–º–ø–æ—Ä—Ç–æ–≤
sys.path.insert(0, os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from app.services.pricing import format_plans_list, get_available_tariffs, format_topup_packs, get_available_topup_packs

def test_pricing_smoke():
    """Smoke-—Ç–µ—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ—Å–Ω–æ–≤–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π pricing"""
    print("üß™ –ó–∞–ø—É—Å–∫ smoke-—Ç–µ—Å—Ç–æ–≤ UI —Å–∏—Å—Ç–µ–º—ã...")

    # –¢–µ—Å—Ç —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–∞—Ä–∏—Ñ–æ–≤
    try:
        t = format_plans_list()
        print(f"‚úÖ format_plans_list() —Ä–∞–±–æ—Ç–∞–µ—Ç: {len(t)} —Å–∏–º–≤–æ–ª–æ–≤")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤
        assert "–º–æ–Ω–µ—Ç" in t, "–í —Ç–µ–∫—Å—Ç–µ —Ç–∞—Ä–∏—Ñ–æ–≤ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –º–æ–Ω–µ—Ç—ã"
        assert ("1990" in t or "1 990" in t), "–î–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ç–∞—Ä–∏—Ñ –∑–∞ 1990 —Ä—É–±"

        print("‚úÖ –¢–µ–∫—Å—Ç —Ç–∞—Ä–∏—Ñ–æ–≤ —Å–æ–¥–µ—Ä–∂–∏—Ç –æ–∂–∏–¥–∞–µ–º—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã")

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ format_plans_list(): {e}")
        return False

    # –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–∞—Ä–∏—Ñ–æ–≤
    try:
        tariffs = get_available_tariffs()
        print(f"‚úÖ get_available_tariffs() –≤–µ—Ä–Ω—É–ª {len(tariffs)} —Ç–∞—Ä–∏—Ñ–æ–≤")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ —Ç–∞—Ä–∏—Ñ—ã
        tariff_names = [t["name"] for t in tariffs]
        required_tariffs = ["lite", "standard", "pro"]
        for tariff in required_tariffs:
            assert tariff in tariff_names, f"–î–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ç–∞—Ä–∏—Ñ '{tariff}'"

        # –í—ã–≤–æ–¥–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–∞—Ä–∏—Ñ–∞—Ö
        for tariff in tariffs:
            print(f"‚úÖ –¢–∞—Ä–∏—Ñ '{tariff['name']}': {tariff['title']} ‚Äî {tariff['price_rub']} ‚ÇΩ ‚Üí {tariff['coins']} –º–æ–Ω–µ—Ç")

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ get_available_tariffs(): {e}")
        return False

    # –¢–µ—Å—Ç —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–∞–∫–µ—Ç–æ–≤ –º–æ–Ω–µ—Ç
    try:
        tp = format_topup_packs()
        print(f"‚úÖ format_topup_packs() —Ä–∞–±–æ—Ç–∞–µ—Ç: {len(tp)} —Å–∏–º–≤–æ–ª–æ–≤")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –º–æ–Ω–µ—Ç –≤ —Ç–µ–∫—Å—Ç–µ
        assert "–º–æ–Ω–µ—Ç" in tp, "–í —Ç–µ–∫—Å—Ç–µ –ø–∞–∫–µ—Ç–æ–≤ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –º–æ–Ω–µ—Ç—ã"

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ format_topup_packs(): {e}")
        return False

    # –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –ø–∞–∫–µ—Ç–æ–≤ –º–æ–Ω–µ—Ç
    try:
        topup_packs = get_available_topup_packs()
        print(f"‚úÖ get_available_topup_packs() –≤–µ—Ä–Ω—É–ª {len(topup_packs)} –ø–∞–∫–µ—Ç–æ–≤")

        for pack in topup_packs:
            coins = pack['coins']
            price = pack['price_rub']
            rate = pack['rate_rub_per_coin']
            print(f"‚úÖ –ü–∞–∫–µ—Ç: {coins} –º–æ–Ω–µ—Ç ‚Äî {price} ‚ÇΩ (—Å—Ç–∞–≤–∫–∞: {rate:.2f} ‚ÇΩ/–º–æ–Ω–µ—Ç–∞)")

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ get_available_topup_packs(): {e}")
        return False

    print("üéâ –í—Å–µ smoke-—Ç–µ—Å—Ç—ã UI —Å–∏—Å—Ç–µ–º—ã –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ!")
    return True

if __name__ == "__main__":
    success = test_pricing_smoke()
    sys.exit(0 if success else 1)
