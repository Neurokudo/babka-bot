#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –º–∏–≥—Ä–∞—Ü–∏–∏ FINAL_MIGRATION.sql –∫ Railway –ë–î
–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: python apply_migration.py "postgres://user:password@host:port/database"
"""

import sys
import os
import psycopg2
import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
log = logging.getLogger(__name__)

def apply_migration(database_url):
    """–ü—Ä–∏–º–µ–Ω—è–µ—Ç –º–∏–≥—Ä–∞—Ü–∏—é –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
    
    migration_file = "FINAL_MIGRATION.sql"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ –º–∏–≥—Ä–∞—Ü–∏–∏
    if not os.path.exists(migration_file):
        log.error(f"–§–∞–π–ª –º–∏–≥—Ä–∞—Ü–∏–∏ {migration_file} –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return False
    
    try:
        # –ß–∏—Ç–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –º–∏–≥—Ä–∞—Ü–∏–∏
        with open(migration_file, 'r', encoding='utf-8') as f:
            migration_sql = f.read()
        
        log.info("üöÄ –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ Railway –ë–î...")
        
        # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        conn = psycopg2.connect(database_url)
        conn.autocommit = True  # –í–∫–ª—é—á–∞–µ–º –∞–≤—Ç–æ–∫–æ–º–º–∏—Ç –¥–ª—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
        
        cursor = conn.cursor()
        
        log.info("‚è≥ –ü—Ä–∏–º–µ–Ω—è–µ–º –º–∏–≥—Ä–∞—Ü–∏—é...")
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –º–∏–≥—Ä–∞—Ü–∏—é
        cursor.execute(migration_sql)
        
        log.info("‚úÖ –ú–∏–≥—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–º–µ–Ω–µ–Ω–∞!")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        log.info("üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –º–∏–≥—Ä–∞—Ü–∏–∏...")
        
        cursor.execute("""
            SELECT column_name
            FROM information_schema.columns
            WHERE table_name = 'users'
              AND column_name IN ('coins', 'admin_coins', 'plan', 'plan_expiry')
        """)
        present_columns = {row[0] for row in cursor.fetchall()}
        missing = {"coins", "admin_coins", "plan", "plan_expiry"} - present_columns
        if missing:
            log.warning("‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω—ã –∫–æ–ª–æ–Ω–∫–∏: %s", ", ".join(sorted(missing)))
        else:
            log.info("‚úÖ –í—Å–µ –Ω—É–∂–Ω—ã–µ –∫–æ–ª–æ–Ω–∫–∏ (coins, admin_coins, plan, plan_expiry) –Ω–∞ –º–µ—Å—Ç–µ")

        cursor.execute("""
            SELECT column_name
            FROM information_schema.columns
            WHERE table_name = 'users'
              AND column_name IN ('video_bonus', 'photo_bonus', 'tryon_bonus', 'videos_allowed', 'photos_allowed')
        """)
        legacy = [row[0] for row in cursor.fetchall()]
        if legacy:
            log.warning("‚ö†Ô∏è –£—Å—Ç–∞—Ä–µ–≤—à–∏–µ –∫–æ–ª–æ–Ω–∫–∏ –Ω–µ —É–¥–∞–ª–µ–Ω—ã: %s", ", ".join(legacy))
        else:
            log.info("‚úÖ –£—Å—Ç–∞—Ä–µ–≤—à–∏–µ –±–æ–Ω—É—Å–Ω—ã–µ –∫–æ–ª–æ–Ω–∫–∏ —É–¥–∞–ª–µ–Ω—ã")

        cursor.execute("""
            SELECT user_id, coins, admin_coins, plan, plan_expiry
            FROM users
            WHERE user_id = 5015100177
        """)
        admin_row = cursor.fetchone()
        if admin_row:
            log.info(
                "‚úÖ –ê–¥–º–∏–Ω—Å–∫–∞—è –∑–∞–ø–∏—Å—å: id=%s, coins=%s, admin_coins=%s, plan=%s, plan_expiry=%s",
                *admin_row
            )
        else:
            log.warning("‚ö†Ô∏è –ê–¥–º–∏–Ω—Å–∫–∞—è –∑–∞–ø–∏—Å—å —Å ID 5015100177 –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        
        cursor.close()
        conn.close()
        
        log.info("")
        log.info("üìä –ß—Ç–æ —Å–¥–µ–ª–∞–ª–∞ –º–∏–≥—Ä–∞—Ü–∏—è:")
        log.info("  ‚Ä¢ –û–±–Ω–æ–≤–∏–ª–∞ —Ç–∞–±–ª–∏—Ü—É users –ø–æ–¥ –º–æ–Ω–µ—Ç–Ω—É—é —Å–∏—Å—Ç–µ–º—É (coins, plan, plan_expiry, admin_coins)")
        log.info("  ‚Ä¢ –û—á–∏—Å—Ç–∏–ª–∞ —Å—Ç–∞—Ä—ã–µ –±–æ–Ω—É—Å–Ω—ã–µ –ø–æ–ª—è –∏ –¥–æ–±–∞–≤–∏–ª–∞ processed_payments")
        log.info("  ‚Ä¢ –ü—Ä–∏–≤–µ–ª–∞ transactions –∫ —É–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω–æ–º—É –≤–∏–¥—É (before/after/delta/metadata)")
        log.info("")
        log.info("üéâ –ú–æ–Ω–µ—Ç–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞. –ú–æ–∂–Ω–æ –¥–µ–ø–ª–æ–∏—Ç—å! üöÄ")
        
        return True
        
    except psycopg2.Error as e:
        log.error(f"‚ùå –û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")
        return False
    except Exception as e:
        log.error(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
        return False

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    
    if len(sys.argv) != 2:
        print("‚ùå –û—à–∏–±–∫–∞: –ù–µ —É–∫–∞–∑–∞–Ω–∞ —Å—Ç—Ä–æ–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î")
        print("")
        print("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:")
        print(f"  {sys.argv[0]} \"postgres://user:password@host:port/database\"")
        print("")
        print("–ü—Ä–∏–º–µ—Ä:")
        print(f"  {sys.argv[0]} \"postgresql://postgres:password@containers-us-west-1.railway.app:5432/railway\"")
        print("")
        print("–ü–æ–ª—É—á–∏—Ç—å —Å—Ç—Ä–æ–∫—É –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –º–æ–∂–Ω–æ –≤ Railway:")
        print("1. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –≤–∞—à –ø—Ä–æ–µ–∫—Ç –Ω–∞ Railway")
        print("2. –í—ã–±–µ—Ä–∏—Ç–µ PostgreSQL –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö")
        print("3. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ —Ä–∞–∑–¥–µ–ª 'Variables'")
        print("4. –°–∫–æ–ø–∏—Ä—É–π—Ç–µ –∑–Ω–∞—á–µ–Ω–∏–µ DATABASE_URL")
        sys.exit(1)
    
    database_url = sys.argv[1]
    
    # –°–∫—Ä—ã–≤–∞–µ–º –ø–∞—Ä–æ–ª—å –≤ –ª–æ–≥–∞—Ö
    safe_url = database_url.split('@')[0] + '@***' if '@' in database_url else '***'
    log.info(f"üîó –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: {safe_url}")
    
    if apply_migration(database_url):
        sys.exit(0)
    else:
        sys.exit(1)

if __name__ == "__main__":
    main()
