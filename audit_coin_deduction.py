#!/usr/bin/env python3
"""
–ê–£–î–ò–¢: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ø–∏—Å–∞–Ω–∏—è –º–æ–Ω–µ—Ç
"""

import os
import sys
sys.path.append('.')

from app.db.db_subscriptions import charge_feature, get_user_plan
from app.services.billing import can_use_feature

def audit_coin_deduction():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–ø–∏—Å–∞–Ω–∏–µ –º–æ–Ω–µ—Ç"""
    print("üîç –ê–£–î–ò–¢: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ø–∏—Å–∞–Ω–∏—è –º–æ–Ω–µ—Ç")
    print("="*60)
    
    # –¢–µ—Å—Ç 1: –°–ø–∏—Å–∞–Ω–∏–µ –º–æ–Ω–µ—Ç –∑–∞ —Ñ—É–Ω–∫—Ü–∏—é
    print("\nüß™ –¢–ï–°–¢ 1: –°–ø–∏—Å–∞–Ω–∏–µ –º–æ–Ω–µ—Ç –∑–∞ —Ñ—É–Ω–∫—Ü–∏—é")
    user_id = 5015100178  # –£ –Ω–∞—Å –µ—Å—Ç—å –ø–æ–¥–ø–∏—Å–∫–∞ —Å 120 –º–æ–Ω–µ—Ç–∞–º–∏
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å –¥–æ —Å–ø–∏—Å–∞–Ω–∏—è
        plan_data = get_user_plan(user_id)
        print(f"üìä –ë–∞–ª–∞–Ω—Å –¥–æ —Å–ø–∏—Å–∞–Ω–∏—è: {plan_data.get('coins', 0)} –º–æ–Ω–µ—Ç")
        
        # –°–ø–∏—Å—ã–≤–∞–µ–º –º–æ–Ω–µ—Ç—ã –∑–∞ tryon
        success = charge_feature(user_id, "tryon", 3, "–¢–µ—Å—Ç —Å–ø–∏—Å–∞–Ω–∏—è")
        print(f"‚úÖ –°–ø–∏—Å–∞–Ω–∏–µ tryon (3 –º–æ–Ω–µ—Ç—ã): {success}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å –ø–æ—Å–ª–µ —Å–ø–∏—Å–∞–Ω–∏—è
        plan_data = get_user_plan(user_id)
        print(f"üìä –ë–∞–ª–∞–Ω—Å –ø–æ—Å–ª–µ —Å–ø–∏—Å–∞–Ω–∏—è: {plan_data.get('coins', 0)} –º–æ–Ω–µ—Ç")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()
    
    # –¢–µ—Å—Ç 2: –°–ø–∏—Å–∞–Ω–∏–µ –∑–∞ video_generation
    print("\nüß™ –¢–ï–°–¢ 2: –°–ø–∏—Å–∞–Ω–∏–µ –∑–∞ video_generation")
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å –¥–æ —Å–ø–∏—Å–∞–Ω–∏—è
        plan_data = get_user_plan(user_id)
        print(f"üìä –ë–∞–ª–∞–Ω—Å –¥–æ —Å–ø–∏—Å–∞–Ω–∏—è: {plan_data.get('coins', 0)} –º–æ–Ω–µ—Ç")
        
        # –°–ø–∏—Å—ã–≤–∞–µ–º –º–æ–Ω–µ—Ç—ã –∑–∞ video_generation
        success = charge_feature(user_id, "video_generation", 10, "–¢–µ—Å—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–∏–¥–µ–æ")
        print(f"‚úÖ –°–ø–∏—Å–∞–Ω–∏–µ video_generation (10 –º–æ–Ω–µ—Ç): {success}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å –ø–æ—Å–ª–µ —Å–ø–∏—Å–∞–Ω–∏—è
        plan_data = get_user_plan(user_id)
        print(f"üìä –ë–∞–ª–∞–Ω—Å –ø–æ—Å–ª–µ —Å–ø–∏—Å–∞–Ω–∏—è: {plan_data.get('coins', 0)} –º–æ–Ω–µ—Ç")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
    
    # –¢–µ—Å—Ç 3: –ü–æ–ø—ã—Ç–∫–∞ —Å–ø–∏—Å–∞—Ç—å –±–æ–ª—å—à–µ, —á–µ–º –µ—Å—Ç—å
    print("\nüß™ –¢–ï–°–¢ 3: –ü–æ–ø—ã—Ç–∫–∞ —Å–ø–∏—Å–∞—Ç—å –±–æ–ª—å—à–µ, —á–µ–º –µ—Å—Ç—å")
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å
        plan_data = get_user_plan(user_id)
        current_balance = plan_data.get('coins', 0)
        print(f"üìä –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {current_balance} –º–æ–Ω–µ—Ç")
        
        # –ü—ã—Ç–∞–µ–º—Å—è —Å–ø–∏—Å–∞—Ç—å –±–æ–ª—å—à–µ, —á–µ–º –µ—Å—Ç—å
        success = charge_feature(user_id, "expensive_feature", current_balance + 1000, "–ü–æ–ø—ã—Ç–∫–∞ —Å–ø–∏—Å–∞—Ç—å —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ")
        print(f"‚ùå –°–ø–∏—Å–∞–Ω–∏–µ –±–æ–ª—å—à–µ –±–∞–ª–∞–Ω—Å–∞: {success}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –±–∞–ª–∞–Ω—Å –Ω–µ –∏–∑–º–µ–Ω–∏–ª—Å—è
        plan_data = get_user_plan(user_id)
        print(f"üìä –ë–∞–ª–∞–Ω—Å –ø–æ—Å–ª–µ –Ω–µ—É–¥–∞—á–Ω–æ–≥–æ —Å–ø–∏—Å–∞–Ω–∏—è: {plan_data.get('coins', 0)} –º–æ–Ω–µ—Ç")
        
    except Exception as e:
        print(f"‚úÖ –û—à–∏–±–∫–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞: {e}")
    
    # –¢–µ—Å—Ç 4: –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    print("\nüß™ –¢–ï–°–¢ 4: –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö")
    invalid_cases = [
        (0, "tryon", 3, "test"),
        (-1, "tryon", 3, "test"),
        (None, "tryon", 3, "test"),
        (user_id, "", 3, "test"),
        (user_id, None, 3, "test"),
        (user_id, "tryon", -1, "test"),
        (user_id, "tryon", None, "test"),
    ]
    
    for user_id_test, feature, cost, note in invalid_cases:
        try:
            success = charge_feature(user_id_test, feature, cost, note)
            print(f"üîê –ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ ({user_id_test}, {feature}, {cost}): {success}")
        except Exception as e:
            print(f"‚úÖ –ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –æ—Ç–∫–ª–æ–Ω–µ–Ω—ã: {e}")
    
    # –¢–µ—Å—Ç 5: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –≤ –ë–î
    print("\nüß™ –¢–ï–°–¢ 5: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –≤ –ë–î")
    try:
        import sqlite3
        conn = sqlite3.connect('babka_bot.db')
        cur = conn.cursor()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∞–±–ª–∏—Ü—É transactions
        cur.execute("SELECT user_id, feature, coins_spent, note FROM transactions WHERE user_id = ? ORDER BY timestamp DESC LIMIT 5", (user_id,))
        transactions = cur.fetchall()
        
        print("üìã –ü–æ—Å–ª–µ–¥–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏:")
        for trans in transactions:
            print(f"  - –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {trans[0]}: {trans[1]} - {trans[2]} –º–æ–Ω–µ—Ç ({trans[3]})")
        
        conn.close()
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: {e}")

if __name__ == "__main__":
    audit_coin_deduction()
    print("\n‚úÖ –ê–£–î–ò–¢ –°–ü–ò–°–ê–ù–ò–Ø –ú–û–ù–ï–¢ –ó–ê–í–ï–†–®–ï–ù")
